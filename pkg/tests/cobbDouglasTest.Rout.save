
R version 2.9.1 (2009-06-26)
Copyright (C) 2009 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library( micEcon )
Loading required package: systemfit
Loading required package: Matrix
Loading required package: lattice

Attaching package: 'Matrix'


	The following object(s) are masked from package:stats :

	 xtabs 


	The following object(s) are masked from package:base :

	 rcond 

Loading required package: car
Loading required package: lmtest
Loading required package: zoo

Attaching package: 'zoo'


	The following object(s) are masked from package:base :

	 as.Date.numeric 

Loading required package: np
Loading required package: boot

Attaching package: 'boot'


	The following object(s) are masked from package:car :

	 logit 


	The following object(s) are masked from package:lattice :

	 melanoma 

Nonparametric Kernel Methods for Mixed Datatypes (version 0.30-3)
> 
> data( germanFarms )
> # output quantity:
> germanFarms$qOutput <- germanFarms$vOutput / germanFarms$pOutput
> # quantity of variable inputs
> germanFarms$qVarInput <- germanFarms$vVarInput / germanFarms$pVarInput
> # a time trend to account for technical progress:
> germanFarms$time <- c(1:20)
> 
> # estimate a Cobb-Douglas production function
> estResult <- translogEst( "qOutput", c( "qLabor", "qVarInput", "land", "time" ),
+    germanFarms, linear = TRUE )
> 
> # calculate fitted values
> fitted <- cobbDouglasCalc( c( "qLabor", "qVarInput", "land", "time" ),
+    data = germanFarms, coef = coef( estResult )[ 1:5 ],
+    coefCov = vcov( estResult )[ 1:5, 1:5 ] )
> print( fitted )
        1         2         3         4         5         6         7         8 
 915.9295 1024.0093 1078.8583 1140.0400 1160.8934 1195.0936 1242.1365 1253.3053 
        9        10        11        12        13        14        15        16 
1231.9718 1288.6305 1343.3516 1537.1326 1619.5938 1667.9966 1617.0959 1624.9890 
       17        18        19        20 
1690.8755 1759.8691 1874.5322 1989.0299 
attr(,"variance")
 [1]  329.20857  154.08326  109.67965  111.80262   83.10454  128.85083
 [7]  333.48783  125.05065  214.02153  267.92747  155.14825  478.36206
[13]  594.82886  484.25370  218.29493  157.19359  379.67332  498.05931
[19]  594.48172 1227.50230
> # t-values
> print( c( fitted ) / attributes( fitted )$variance^0.5 )
        1         2         3         4         5         6         7         8 
 50.48083  82.49472 103.01522 107.81870 127.34444 105.28301  68.01886 112.07633 
        9        10        11        12        13        14        15        16 
 84.21162  78.72629 107.84903  70.28020  66.40642  75.79816 109.44954 129.60836 
       17        18        19        20 
 86.77739  78.85693  76.88182  56.77147 
> all.equal( fitted, estResult$fitted, check.attributes = FALSE )
[1] TRUE
> 
> # calculate logged variables
> germanFarms$lQLabor    <- log( germanFarms$qLabor )
> germanFarms$lLand      <- log( germanFarms$land )
> germanFarms$lQVarInput <- log( germanFarms$qVarInput )
> germanFarms$lTime      <- log( germanFarms$time )
> germanFarms$lQOutput   <- log( germanFarms$qOutput )
> 
> # estimation with logged variables
> estResultLog <- translogEst( "lQOutput",
+    c( "lQLabor", "lQVarInput", "lLand", "lTime" ),
+    germanFarms, dataLogged = TRUE, linear = TRUE )
> all.equal( estResult[c(2:5,7:11,14:16)], estResultLog[c(2:5,7:11,14:16)] )
[1] TRUE
> 
> # calculate fitted values using logged independent variables
> fittedLogged <- cobbDouglasCalc( c( "lQLabor", "lQVarInput", "lLand", "lTime" ),
+    data = germanFarms, coef = coef( estResult )[ 1:5 ],
+    coefCov = vcov( estResult )[ 1:5, 1:5 ], dataLogged = TRUE )
> all.equal( fitted, exp( fittedLogged ), check.attributes = FALSE )
[1] TRUE
> all.equal( attributes( fitted )$variance/fitted^2,
+    attributes( fittedLogged )$variance, check.attributes = FALSE )
[1] TRUE
> all.equal( fittedLogged, predict( estResult$est, se.fit=T )$fit,
+    check.attributes = FALSE )
[1] TRUE
> all.equal( attributes( fittedLogged )$variance^0.5,
+    predict( estResult$est, se.fit=T )$se.fit )
[1] TRUE
> 
> # coefficients not named
> coefNoNames <- coef( estResult )[ 1:5 ]
> names( coefNoNames ) <- NULL
> fittedNoNames <- cobbDouglasCalc( c( "qLabor", "qVarInput", "land", "time" ),
+    data = germanFarms, coef = coefNoNames )
> all.equal( fitted, fittedNoNames, check.attributes = FALSE )
[1] TRUE
> 
> # coefficients in a different order
> coefDiffOrder <- coef( estResult )[ c( 3, 5, 1, 2, 4 ) ]
> fittedDiffOrder <- cobbDouglasCalc( c( "qLabor", "qVarInput", "land", "time" ),
+    data = germanFarms, coef = coefDiffOrder )
> all.equal( fitted, fittedDiffOrder, check.attributes = FALSE )
[1] TRUE
> 
> ## derivatives (marginal products)
> # compute the marginal products of the inputs (with "fitted" Output)
> margProducts <- cobbDouglasDeriv( c( "qLabor", "qVarInput", "land", "time" ),
+    data = germanFarms, coef = coef( estResult )[1:5],
+    coefCov = vcov( estResult )[1:5, 1:5] )
> print( margProducts )
$deriv
     qLabor qVarInput     land      time
1   99.0894 0.3970801 30.35450 84.041473
2  110.0180 0.4072783 32.81447 46.979189
3  116.7158 0.4281926 33.88599 32.997024
4  120.0013 0.4206170 35.49141 26.151207
5  122.1964 0.4324995 36.14061 21.303647
6  126.6521 0.4388961 36.73344 18.276047
7  133.4532 0.4450165 37.17738 16.281818
8  131.0383 0.4667286 37.42500 14.374691
9  129.6781 0.4644663 37.94215 12.560007
10 131.2093 0.4794587 38.33225 11.823880
11 136.7810 0.4749881 38.91511 11.205433
12 141.6943 0.4873770 39.90736 11.753351
13 148.4174 0.4876964 40.37226 11.431267
14 155.5988 0.5044476 40.18381 10.931978
15 152.6791 0.5294154 39.78565  9.891818
16 157.2361 0.5454771 39.52838  9.318844
17 162.6014 0.5822371 39.09538  9.126291
18 169.2361 0.6050482 38.92650  8.970972
19 180.2626 0.6185030 38.96230  9.052550
20 191.2731 0.6231196 39.15906  9.125212

$variance
      qLabor  qVarInput      land       time
1   27587.95 0.07194722  9.769649 162.441810
2   33680.26 0.07754151 10.731366  52.184259
3   37814.23 0.08543341 11.266135  27.431902
4   39919.59 0.08366818 11.513469  17.045305
5   41467.09 0.08765847 11.492984  11.894446
6   44358.44 0.09091135 12.064797   8.868758
7   48837.06 0.09501811 13.244101   6.994331
8   47752.84 0.10084985 12.117066   5.798810
9   46813.71 0.09936776 11.845629   4.618257
10  48282.77 0.10450294 11.672132   4.109451
11  52060.20 0.10497098 12.467463   3.544218
12  56540.80 0.11047910 12.694812   3.560526
13  61625.88 0.11292930 13.791228   3.203294
14  67323.29 0.12157167 14.788554   2.913132
15  65346.23 0.12950123 13.853800   2.611458
16  68996.22 0.13745883 14.468847   2.365135
17  74058.45 0.15410185 14.968553   2.308310
18  80086.55 0.16647132 15.731687   2.211712
19  90148.37 0.17747110 17.150590   2.134186
20 100576.58 0.18467227 18.799515   2.044151

attr(,"class")
[1] "cobbDouglasDeriv"
> # t-values
> margProducts$deriv / margProducts$variance^0.5
      qLabor qVarInput      land     time
1  0.5965784  1.480373  9.711440 6.593936
2  0.5994816  1.462595 10.017006 6.503329
3  0.6002082  1.464959 10.095614 6.300091
4  0.6006107  1.454141 10.459723 6.334165
5  0.6000763  1.460793 10.660538 6.177060
6  0.6013456  1.455636 10.575516 6.136926
7  0.6038850  1.443687 10.215687 6.156442
8  0.5996511  1.469694 10.751352 5.969378
9  0.5993496  1.473437 11.024094 5.844547
10 0.5971295  1.483157 11.219905 5.832680
11 0.5994777  1.466048 11.021208 5.952075
12 0.5958972  1.466307 11.200564 6.228804
13 0.5978652  1.451263 10.871302 6.386986
14 0.5996857  1.446771 10.449325 6.404993
15 0.5972679  1.471159 10.689122 6.121172
16 0.5986039  1.471263 10.391831 6.059462
17 0.5974987  1.483187 10.104983 6.006856
18 0.5980166  1.482929  9.814264 6.032193
19 0.6003805  1.468176  9.408167 6.196618
20 0.6031225  1.450009  9.031480 6.382436
> 
> # compute the marginal products of the inputs (with observed Output)
> margProductsObs <- cobbDouglasDeriv( c( "qLabor", "qVarInput", "land", "time" ),
+    data = germanFarms, coef = coef( estResult )[1:5],
+    coefCov = vcov( estResult )[1:5, 1:5], yName = "qOutput" )
> print( margProductsObs )
$deriv
     qLabor qVarInput     land      time
1  102.3570 0.4101741 31.35547 86.812810
2  103.4343 0.3829060 30.85079 44.167859
3  115.7119 0.4245098 33.59454 32.713221
4  123.3440 0.4323335 36.48005 26.879663
5  124.0092 0.4389159 36.67678 21.619701
6  125.6682 0.4354867 36.44809 18.134078
7  133.1547 0.4440210 37.09422 16.245396
8  134.7244 0.4798577 38.47777 14.779052
9  127.1239 0.4553179 37.19482 12.312618
10 130.1685 0.4756555 38.02818 11.730088
11 138.5365 0.4810843 39.41456 11.349247
12 142.0309 0.4885348 40.00216 11.781271
13 144.3341 0.4742786 39.26151 11.116764
14 158.2073 0.5129043 40.85746 11.115245
15 155.2843 0.5384490 40.46453 10.060607
16 157.3369 0.5458269 39.55373  9.324821
17 159.1553 0.5698974 38.26681  8.932873
18 168.8255 0.6035804 38.83207  8.949209
19 181.5019 0.6227554 39.23018  9.114789
20 191.5486 0.6240168 39.21545  9.138351

$variance
      qLabor  qVarInput      land       time
1   29169.37 0.07834990  9.053011 196.764937
2   29786.61 0.06827885  8.763934  50.932241
3   37277.65 0.08392230 10.392118  27.940019
4   42357.33 0.08704416 12.253983  18.863736
5   42815.44 0.08971490 12.386512  12.203361
6   43968.66 0.08831851 12.232524   8.585608
7   49363.40 0.09181401 12.670068   6.890340
8   50534.16 0.10723262 13.632841   5.702605
9   44993.19 0.09654535 12.738887   3.958047
10  47174.15 0.10536270 13.316117   3.592383
11  53434.41 0.10778149 14.304735   3.362902
12  56163.97 0.11114576 14.734435   3.623802
13  58000.27 0.10475361 14.193862   3.226539
14  69686.01 0.12251086 15.371254   3.225657
15  67134.75 0.13501783 15.077022   2.642582
16  68921.32 0.13874322 14.405935   2.270184
17  70523.61 0.15124997 13.483764   2.083351
18  79353.97 0.16965716 13.885054   2.090978
19  91718.06 0.18060798 14.171215   2.169069
20 102152.75 0.18134039 14.160574   2.180298

attr(,"class")
[1] "cobbDouglasDeriv"
> # t-values
> margProductsObs$deriv / margProductsObs$variance^0.5
      qLabor qVarInput     land    time
1  0.5993132  1.465376 10.42118 6.18885
2  0.5993132  1.465376 10.42118 6.18885
3  0.5993132  1.465376 10.42118 6.18885
4  0.5993132  1.465376 10.42118 6.18885
5  0.5993132  1.465376 10.42118 6.18885
6  0.5993132  1.465376 10.42118 6.18885
7  0.5993132  1.465376 10.42118 6.18885
8  0.5993132  1.465376 10.42118 6.18885
9  0.5993132  1.465376 10.42118 6.18885
10 0.5993132  1.465376 10.42118 6.18885
11 0.5993132  1.465376 10.42118 6.18885
12 0.5993132  1.465376 10.42118 6.18885
13 0.5993132  1.465376 10.42118 6.18885
14 0.5993132  1.465376 10.42118 6.18885
15 0.5993132  1.465376 10.42118 6.18885
16 0.5993132  1.465376 10.42118 6.18885
17 0.5993132  1.465376 10.42118 6.18885
18 0.5993132  1.465376 10.42118 6.18885
19 0.5993132  1.465376 10.42118 6.18885
20 0.5993132  1.465376 10.42118 6.18885
> 
> 
> # calculate optimal quantities of variable inputs
> xCoef <- coef( estResult )[ 1:3 ]
> zCoef <- coef( estResult )[ 4:5 ]
> names( zCoef ) <- c( "d_1", "d_2" )
> optInput <- cobbDouglasOpt( pyName = "pOutput",
+    pxNames = c( "pLabor", "pVarInput" ), coef = xCoef,
+    data = germanFarms, xNames = c( "qLabor", "qVarInput" ),
+    zNames = c( "land", "time" ), zCoef = zCoef )
> print( optInput )
      qLabor qVarInput
1  1.2640342  196.5796
2  0.7889562  194.7165
3  0.5934942  194.7972
4  0.7104717  198.3848
5  0.7396314  198.6683
6  0.7352334  192.4898
7  0.7590359  204.0918
8  0.7298039  199.2645
9  0.7572819  193.5511
10 0.6986687  191.4896
11 0.7046215  194.1673
12 0.6892230  222.5265
13 0.6823710  232.3780
14 0.7754472  249.5916
15 0.7785506  252.0872
16 0.6248399  225.3417
17 0.6345964  236.7778
18 0.5870300  218.7731
19 0.5579027  221.7038
20 0.5675505  242.3757
> 
> # determine optimal quantities of variable inputs using optim()
> objFun <- function( xVal, obs = 1 ) {
+    tmpData <- germanFarms
+    tmpData$qLabor[ obs ] <- xVal[ 1 ]
+    tmpData$qVarInput[ obs ] <- xVal[ 2 ]
+    outp <- translogCalc( c( "qLabor", "qVarInput", "land", "time" ),
+       data = tmpData, coef = coef( estResult ) )
+    profit <- germanFarms$pOutput[ obs ] * outp[ obs ] -
+       germanFarms$pLabor[ obs ] * xVal[ 1 ] -
+       germanFarms$pVarInput[ obs ] * xVal[ 2 ]
+    return( profit )
+ }
> optInputNum <- data.frame( qLabor = rep( NA, nrow( germanFarms ) ),
+    qVarInput = rep( NA, nrow( germanFarms ) ) )
> for( obs in 1:nrow( germanFarms ) ) {
+    optResult <- optim(
+       c( germanFarms$qLabor[ obs ], germanFarms$qVarInput[ obs ] ),
+       objFun, method = "L-BFGS-B", lower = 1e-10,
+       control = list( fnscale = -1 ), obs = obs )
+    optInputNum[ obs, ] <- optResult$par
+ }
> all.equal( optInput, optInputNum, check.attributes = FALSE, tolerance = 1e-5 )
[1] TRUE
> 
