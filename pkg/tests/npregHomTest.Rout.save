
R version 2.8.1 (2008-12-22)
Copyright (C) 2008 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # load micEcon package
> library( micEcon )
Loading required package: systemfit
Loading required package: Matrix
Loading required package: lattice

Attaching package: 'Matrix'


	The following object(s) are masked from package:stats :

	 xtabs 


	The following object(s) are masked from package:base :

	 colMeans,
	 colSums,
	 rcond,
	 rowMeans,
	 rowSums 

Loading required package: car
Loading required package: lmtest
Loading required package: zoo

Attaching package: 'zoo'


	The following object(s) are masked from package:base :

	 as.Date.numeric 

Loading required package: np
Loading required package: boot

Attaching package: 'boot'


	The following object(s) are masked from package:car :

	 logit 


	The following object(s) are masked from package:lattice :

	 melanoma 

Nonparametric Kernel Methods for Mixed Datatypes (version 0.30-1)
> 
> # load data
> data( germanFarms )
> # output quantity
> germanFarms$qOutput <- germanFarms$vOutput / germanFarms$pOutput
> # quantity of variable inputs
> germanFarms$qVarInput <- germanFarms$vVarInput / germanFarms$pVarInput
> # a time trend to account for technical progress:
> germanFarms$time <- c(1:20)
> 
> # weights to impose normalize prices
> weights <- c(
+    pOutput = mean( germanFarms$qOutput ),
+    pVarInput = mean( germanFarms$qVarInput ),
+    pLabor = mean( germanFarms$qLabor ) )
> weights <- weights / sum( weights )
> 
> # estimation (restricted gradients)
> npseed( 123 )
> estResult <- npregHom( "qVarInput",
+    xNames = c( "pOutput", "pVarInput", "pLabor", "land" ),
+    data = germanFarms, homWeights = weights )
Multistart 1 of 3 |Multistart 1 of 3 |Multistart 1 of 3 |Multistart 1 of 3 /Multistart 1 of 3 -Multistart 1 of 3 \Multistart 1 of 3 |Multistart 1 of 3 /Multistart 1 of 3 |Multistart 1 of 3 |Multistart 1 of 3 /Multistart 1 of 3 -Multistart 1 of 3 \Multistart 2 of 3 |Multistart 2 of 3 |Multistart 2 of 3 /Multistart 2 of 3 -Multistart 2 of 3 |Multistart 2 of 3 |Multistart 2 of 3 /Multistart 2 of 3 -Multistart 3 of 3 |Multistart 3 of 3 |Multistart 3 of 3 /Multistart 3 of 3 -Multistart 3 of 3 \Multistart 3 of 3 |Multistart 3 of 3 |Multistart 3 of 3 /Multistart 3 of 3 -                   > print( estResult )
$call
npregHom(yName = "qVarInput", xNames = c("pOutput", "pVarInput", 
    "pLabor", "land"), homWeights = weights, data = germanFarms)

$yName
[1] "qVarInput"

$xNames
[1] "pOutput"   "pVarInput" "pLabor"    "land"     

$homWeights
     pOutput    pVarInput       pLabor 
0.6723446781 0.3269168696 0.0007384522 

$restrictGrad
[1] TRUE

$est

Regression Data: 20 training points, in 3 variable(s)
                     r_2      r_3      r_4
Bandwidth(s): 0.01664024 26.66757 1.589505

Kernel Regression Estimator: Local-Constant
Bandwidth Type: Fixed

Continuous Kernel Type: Second-Order Gaussian
No. Continuous Explanatory Vars.: 3


$grad
         pOutput  pVarInput        pLabor       land
 [1,] -2.3490395  2.5457664  1.944730e-03  0.8427035
 [2,] -2.4945197  2.5631551  1.757982e-03  0.8750529
 [3,] -2.2761224  2.5519635  1.014854e-04  0.2673162
 [4,] -1.7078678  1.8671461 -1.423325e-04  0.1994970
 [5,] -0.4717483  0.4819729  7.956271e-05  0.3086799
 [6,]  2.9975397 -2.9945389 -1.775170e-05  0.6788984
 [7,]  2.1748425 -2.1824080 -1.510609e-05  0.7419406
 [8,]  3.9802650 -3.9058795  5.643105e-05  0.5801248
 [9,]  1.7326372 -1.7035494  1.959666e-04  0.7900884
[10,] -6.1168493  5.5697928  8.101432e-04  6.1365158
[11,] -3.5216759  2.9839011  1.348740e-03  9.0304935
[12,] -2.7541361  2.1746765  1.831971e-03  9.6005936
[13,] -3.2856128  2.9087990  5.800798e-04  3.0583682
[14,] -3.8457661  3.4981216  2.865944e-04  2.2558040
[15,] -5.8787911  5.4073115  5.923243e-04  1.8341178
[16,]  6.8291617 -5.8619225 -6.684418e-04 -3.9806272
[17,]  1.7756946 -1.4851999 -2.666554e-04 -2.8689169
[18,] -2.0945439  1.6128532  2.564679e-04  2.7735968
[19,]  1.4899094 -1.4744823  1.264643e-03  6.3116328
[20,]  3.0108686 -2.7017335  1.215329e-03  5.4040093

attr(,"class")
[1] "npregHom"
> all.equal( estResult$grad[ , "pOutput" ] * germanFarms$pOutput +
+    estResult$grad[ , "pVarInput" ] * germanFarms$pVarInput,
+    - estResult$grad[ , "pLabor" ] * germanFarms$pLabor )
[1] TRUE
> estEla <- elas( estResult )
> print( estEla )
       pOutput   pVarInput        pLabor         land
1  -0.40444826  0.37563477  0.0288134843  0.035253616
2  -0.41396463  0.37317823  0.0407864035  0.035003162
3  -0.36754681  0.36447515  0.0030716585  0.010830282
4  -0.24913703  0.25260876 -0.0034717263  0.007640924
5  -0.07177834  0.06978058  0.0019977652  0.011823163
6   0.45418370 -0.45372902 -0.0004546725  0.025953062
7   0.35482835 -0.35440248 -0.0004258785  0.029051613
8   0.65629032 -0.65796618  0.0016758538  0.023125078
9   0.28816855 -0.29374484  0.0055762887  0.030797534
10 -0.96934990  0.94502508  0.0243248212  0.242435463
11 -0.51944865  0.48078322  0.0386654325  0.357669492
12 -0.33832992  0.28779033  0.0505395870  0.373288144
13 -0.39180551  0.37534698  0.0164585277  0.122374543
14 -0.47885813  0.47084145  0.0080166864  0.093167605
15 -0.77439478  0.75705751  0.0173372665  0.075158175
16  0.90026185 -0.87697592 -0.0232859257 -0.177025068
17  0.24571797 -0.23553052 -0.0101874515 -0.136062288
18 -0.26552405  0.25573867  0.0097853803  0.138032551
19  0.17421993 -0.22337771  0.0491577876  0.320007171
20  0.35205393 -0.40190428  0.0498503496  0.279014554
> all.equal( estEla[[ "pOutput" ]] + estEla[[ "pVarInput" ]],
+    - estEla[[ "pLabor" ]] )
[1] TRUE
> estElaObs <- elas( estResult, yObs = TRUE )
> print( estElaObs )
       pOutput  pVarInput        pLabor         land
1  -0.40648824  0.3775294  0.0289588158  0.035431431
2  -0.41283359  0.3721586  0.0406749656  0.034907526
3  -0.36844780  0.3653686  0.0030791883  0.010856831
4  -0.24777141  0.2512241 -0.0034526964  0.007599042
5  -0.07208038  0.0700742  0.0020061715  0.011872913
6   0.45625403 -0.4557973 -0.0004567450  0.026071366
7   0.34863693 -0.3482185 -0.0004184473  0.028544689
8   0.65992671 -0.6616119  0.0016851394  0.023253210
9   0.29086902 -0.2964976  0.0056285450  0.031086142
10 -0.98639785  0.9616452  0.0247526215  0.246699172
11 -0.51451209  0.4762141  0.0382979768  0.354270392
12 -0.34155857  0.2905367  0.0510218814  0.376850396
13 -0.38018469  0.3642143  0.0159703735  0.118744957
14 -0.46780744  0.4599758  0.0078316840  0.091017561
15 -0.80824381  0.7901487  0.0180950837  0.078443361
16  0.89786682 -0.8746428 -0.0232239765 -0.176554116
17  0.24799926 -0.2377172 -0.0102820336 -0.137325514
18 -0.26654417  0.2567212  0.0098229746  0.138562856
19  0.17532181 -0.2247905  0.0494686956  0.322031119
20  0.34873574 -0.3981162  0.0493804988  0.276384779
> all.equal( estElaObs[[ "pOutput" ]] + estElaObs[[ "pVarInput" ]],
+    - estElaObs[[ "pLabor" ]] )
[1] TRUE
> # different normalized variable omitted
> npseed( 123 )
> estResult2 <- npregHom( "qVarInput",
+    xNames = c( "pOutput", "pVarInput", "pLabor", "land" ),
+    data = germanFarms, homWeights = weights[ c( 3, 2, 1 ) ] )
Multistart 1 of 3 |Multistart 1 of 3 |Multistart 1 of 3 |Multistart 1 of 3 /Multistart 1 of 3 -Multistart 1 of 3 \Multistart 1 of 3 |Multistart 1 of 3 |Multistart 1 of 3 |Multistart 1 of 3 /Multistart 1 of 3 -Multistart 1 of 3 \Multistart 2 of 3 |Multistart 2 of 3 |Multistart 2 of 3 /Multistart 2 of 3 -Multistart 2 of 3 |Multistart 2 of 3 |Multistart 2 of 3 /Multistart 2 of 3 -Multistart 2 of 3 \Multistart 3 of 3 |Multistart 3 of 3 |Multistart 3 of 3 /Multistart 3 of 3 |Multistart 3 of 3 |Multistart 3 of 3 /Multistart 3 of 3 -                   > print( estResult2 )
$call
npregHom(yName = "qVarInput", xNames = c("pOutput", "pVarInput", 
    "pLabor", "land"), homWeights = weights[c(3, 2, 1)], data = germanFarms)

$yName
[1] "qVarInput"

$xNames
[1] "pOutput"   "pVarInput" "pLabor"    "land"     

$homWeights
      pLabor    pVarInput      pOutput 
0.0007384522 0.3269168696 0.6723446781 

$restrictGrad
[1] TRUE

$est

Regression Data: 20 training points, in 3 variable(s)
                   r_1      r_2      r_4
Bandwidth(s): 10.00021 49.45027 2.664297

Kernel Regression Estimator: Local-Constant
Bandwidth Type: Fixed

Continuous Kernel Type: Second-Order Gaussian
No. Continuous Explanatory Vars.: 3


$grad
            pOutput     pVarInput        pLabor          land
 [1,] -0.0001431196 -6.851991e-05  2.345546e-06  5.643264e-05
 [2,] -1.8535106390 -8.923047e-01  1.885732e-02  1.591403e+00
 [3,]  0.5814595089  2.805703e-01 -4.426114e-03  3.461575e+00
 [4,] -0.1435942911 -6.922062e-02  1.242717e-03  7.145147e-01
 [5,] -0.3062707379 -1.476173e-01  2.707063e-03  7.077175e-01
 [6,] -0.2302589146 -1.109877e-01  2.018721e-03  7.054697e-01
 [7,] -0.0850801754 -4.101630e-02  7.286193e-04  7.820466e-01
 [8,]  0.0716724124  3.456423e-02 -5.940025e-04  1.072267e+00
 [9,] -0.2106179361 -1.015207e-01  1.846224e-03  7.046135e-01
[10,]  0.2033760391  9.810128e-02 -1.627767e-03  1.777070e+00
[11,] -0.0105186314 -5.068693e-03  8.260828e-05  2.757352e+00
[12,] -1.3036384340 -6.294882e-01  8.824602e-03  2.951282e+00
[13,]  0.7071354324  3.415665e-01 -4.525461e-03 -8.668802e-02
[14,] -0.5843231603 -2.821508e-01  3.958726e-03  1.299767e+00
[15,] -0.7336862554 -3.542625e-01  4.996438e-03  1.714555e+00
[16,]  3.5758341407  1.728055e+00 -2.095281e-02 -3.432599e+00
[17,]  1.0842209920  5.240670e-01 -6.102467e-03 -1.678023e+00
[18,] -0.5588908232 -2.702154e-01  2.979902e-03  7.012373e-01
[19,] -2.4018359595 -1.161704e+00  1.175295e-02  3.414313e+00
[20,] -1.4227918516 -6.883422e-01  6.552251e-03  2.174883e+00

attr(,"class")
[1] "npregHom"
> all.equal( estResult2$grad[ , "pOutput" ] * germanFarms$pOutput +
+    estResult2$grad[ , "pVarInput" ] * germanFarms$pVarInput,
+    - estResult2$grad[ , "pLabor" ] * germanFarms$pLabor )
[1] TRUE
> estEla2 <- elas( estResult2 )
> print( estEla2 )
         pOutput     pVarInput        pLabor          land
1  -2.476603e-05 -1.016129e-05  3.492732e-05  2.372706e-06
2  -2.978303e-01 -1.257917e-01  4.236220e-01  6.163829e-02
3   8.855587e-02  3.779340e-02 -1.263493e-01  1.322724e-01
4  -2.088358e-02 -9.336612e-03  3.022019e-02  2.728377e-02
5  -4.650509e-02 -2.132855e-02  6.783364e-02  2.705186e-02
6  -3.530350e-02 -1.701674e-02  5.232024e-02  2.728959e-02
7  -1.406032e-02 -6.746736e-03  2.080706e-02  3.101775e-02
8   1.178420e-02  5.805985e-03 -1.759019e-02  4.262153e-02
9  -3.469532e-02 -1.733830e-02  5.203362e-02  2.720369e-02
10  3.258492e-02  1.682841e-02 -4.941332e-02  7.098112e-02
11 -1.603777e-03 -8.442135e-04  2.447990e-03  1.128896e-01
12 -1.604290e-01 -8.345258e-02  2.438816e-01  1.149549e-01
13  8.494074e-02  4.439702e-02 -1.293378e-01 -3.493974e-03
14 -7.353312e-02 -3.838195e-02  1.119151e-01  5.425440e-02
15 -9.658732e-02 -4.956875e-02  1.461561e-01  7.021597e-02
16  4.654849e-01  2.552890e-01 -7.207739e-01 -1.507416e-01
17  1.497489e-01  8.295191e-02 -2.327008e-01 -7.943191e-02
18 -7.077292e-02 -4.279937e-02  1.135723e-01  3.486012e-02
19 -2.806309e-01 -1.758531e-01  4.564840e-01  1.729719e-01
20 -1.668908e-01 -1.027208e-01  2.696116e-01  1.126472e-01
> all.equal( estEla2[[ "pOutput" ]] + estEla2[[ "pVarInput" ]],
+    - estEla2[[ "pLabor" ]] )
[1] TRUE
> estEla2Obs <- elas( estResult2, yObs = TRUE )
> print( estEla2Obs )
         pOutput     pVarInput        pLabor          land
1  -2.476605e-05 -1.016129e-05  3.492735e-05  2.372708e-06
2  -3.067490e-01 -1.295586e-01  4.363076e-01  6.348410e-02
3   9.412389e-02  4.016969e-02 -1.342936e-01  1.405891e-01
4  -2.083215e-02 -9.313619e-03  3.014577e-02  2.721658e-02
5  -4.679638e-02 -2.146214e-02  6.825852e-02  2.722130e-02
6  -3.504760e-02 -1.689339e-02  5.194099e-02  2.709177e-02
7  -1.363873e-02 -6.544437e-03  2.018317e-02  3.008769e-02
8   1.188326e-02  5.854791e-03 -1.773805e-02  4.297981e-02
9  -3.535780e-02 -1.766936e-02  5.302716e-02  2.772312e-02
10  3.279624e-02  1.693755e-02 -4.973379e-02  7.144146e-02
11 -1.536758e-03 -8.089353e-04  2.345693e-03  1.081722e-01
12 -1.616728e-01 -8.409959e-02  2.457724e-01  1.158462e-01
13  8.182403e-02  4.276797e-02 -1.245920e-01 -3.365770e-03
14 -7.107835e-02 -3.710064e-02  1.081790e-01  5.244321e-02
15 -1.008706e-01 -5.176695e-02  1.526376e-01  7.332980e-02
16  4.701343e-01  2.578389e-01 -7.279731e-01 -1.522473e-01
17  1.514258e-01  8.388079e-02 -2.353066e-01 -8.032139e-02
18 -7.112245e-02 -4.301074e-02  1.141332e-01  3.503229e-02
19 -2.826308e-01 -1.771062e-01  4.597370e-01  1.742045e-01
20 -1.647958e-01 -1.014313e-01  2.662270e-01  1.112331e-01
> all.equal( estEla2Obs[[ "pOutput" ]] + estEla2Obs[[ "pVarInput" ]],
+    - estEla2Obs[[ "pLabor" ]] )
[1] TRUE
> 
> # estimation (gradients not restricted)
> npseed( 123 )
> estResultAll <- npregHom( "qVarInput",
+    xNames = c( "pOutput", "pVarInput", "pLabor", "land" ),
+    data = germanFarms, homWeights = weights, restrictGrad = FALSE )
Multistart 1 of 4 |Multistart 1 of 4 |Multistart 1 of 4 |Multistart 1 of 4 /Multistart 1 of 4 -Multistart 1 of 4 \Multistart 1 of 4 |Multistart 1 of 4 |Multistart 1 of 4 /Multistart 1 of 4 -Multistart 1 of 4 \Multistart 2 of 4 |Multistart 2 of 4 |Multistart 2 of 4 /Multistart 2 of 4 -Multistart 2 of 4 \Multistart 2 of 4 |Multistart 2 of 4 |Multistart 2 of 4 /Multistart 3 of 4 |Multistart 3 of 4 |Multistart 3 of 4 /Multistart 3 of 4 -Multistart 3 of 4 \Multistart 3 of 4 |Multistart 3 of 4 |Multistart 3 of 4 |Multistart 4 of 4 |Multistart 4 of 4 |Multistart 4 of 4 /Multistart 4 of 4 -Multistart 4 of 4 \Multistart 4 of 4 |Multistart 4 of 4 |Multistart 4 of 4 |Multistart 4 of 4 /Multistart 4 of 4 -Multistart 4 of 4 \                   > print( estResultAll )
$call
npregHom(yName = "qVarInput", xNames = c("pOutput", "pVarInput", 
    "pLabor", "land"), homWeights = weights, data = germanFarms, 
    restrictGrad = FALSE)

$yName
[1] "qVarInput"

$xNames
[1] "pOutput"   "pVarInput" "pLabor"    "land"     

$homWeights
     pOutput    pVarInput       pLabor 
0.6723446781 0.3269168696 0.0007384522 

$restrictGrad
[1] FALSE

$est

Regression Data: 20 training points, in 4 variable(s)
                     r_1        r_2      r_3      r_4
Bandwidth(s): 0.01327776 0.01144763 54034536 2.005919

Kernel Regression Estimator: Local-Constant
Bandwidth Type: Fixed

Continuous Kernel Type: Second-Order Gaussian
No. Continuous Explanatory Vars.: 4


$grad
          pOutput  pVarInput        pLabor         land
 [1,]  0.09398842 -0.1085895 -1.079019e-05  0.015006923
 [2,] -0.82214887  0.9249882  7.599808e-05  0.149669756
 [3,] -0.26609947  0.2961552  2.221110e-05  0.007373737
 [4,]  0.20061405 -0.2144641 -1.023513e-05  0.105926890
 [5,] -0.61194096  0.6395630  2.041266e-05  0.222443388
 [6,]  3.99299584 -3.9929958 -1.119966e-17  0.353667386
 [7,]  2.67466574 -2.6857704 -8.206342e-06  0.422677333
 [8,]  5.15148429 -5.0549156  7.136403e-05  0.387650002
 [9,]  2.01177414 -1.9482035  4.697856e-05  0.582563203
[10,] -5.08800820  4.7910520 -2.194501e-04  3.049208610
[11,] -4.12028267  3.8123470 -2.275638e-04  2.419317360
[12,]  0.16229036 -0.1522030  7.454548e-06  3.376529874
[13,] -0.87373826  0.8167167 -4.213883e-05  1.127916327
[14,] -2.81884408  2.6357978 -1.352708e-04  1.843848545
[15,] -4.11270382  3.9020418 -1.556788e-04  1.181031885
[16,]  4.99156887 -4.4854530  3.740186e-04 -3.116587406
[17,]  0.77457733 -0.6907978  6.191291e-05 -2.055141878
[18,] -0.85276381  0.7075908 -1.072825e-04  1.977950974
[19,]  3.58982821 -2.9013781  5.087632e-04  3.225207121
[20,]  5.18691620 -4.2649269  6.813482e-04  2.006474740

attr(,"class")
[1] "npregHom"
> all.equal( estResultAll$grad[ , "pOutput" ] * germanFarms$pOutput +
+    estResultAll$grad[ , "pVarInput" ] * germanFarms$pVarInput,
+    - estResultAll$grad[ , "pLabor" ] * germanFarms$pLabor )
[1] TRUE
> estElaAll <- elas( estResultAll )
> print( estElaAll )
       pOutput   pVarInput        pLabor          land
1   0.01626197 -0.01610131 -1.606541e-04  0.0006308798
2  -0.13590361  0.13414727  1.756337e-03  0.0059636375
3  -0.04306798  0.04239418  6.738027e-04  0.0002994302
4   0.02919964 -0.02895054 -2.490960e-04  0.0040480673
5  -0.09314124  0.09262851  5.127244e-04  0.0085230337
6   0.60517688 -0.60517688 -2.869329e-16  0.0135237065
7   0.43624831 -0.43601702 -2.312900e-04  0.0165456491
8   0.84739715 -0.84951146  2.114307e-03  0.0154160162
9   0.33491802 -0.33625611  1.338083e-03  0.0227302199
10 -0.80777332  0.81437436 -6.601042e-03  0.1206841801
11 -0.61203894  0.61860881 -6.569869e-03  0.0964988323
12  0.01987412 -0.02007913  2.050099e-04  0.1308750855
13 -0.10433742  0.10553468 -1.197265e-03  0.0451942062
14 -0.35207619  0.35587172 -3.795534e-03  0.0763889295
15 -0.54179076  0.54634777 -4.557012e-03  0.0483994459
16  0.65702723 -0.67003695  1.300972e-02 -0.1383908660
17  0.10700903 -0.10937051  2.361476e-03 -0.0973080142
18 -0.10796880  0.11205697 -4.088169e-03  0.0983125176
19  0.42235280 -0.44225055  1.989775e-02  0.1645278207
20  0.60375824 -0.63157970  2.782146e-02  0.1031290252
> all.equal( estElaAll[[ "pOutput" ]] + estElaAll[[ "pVarInput" ]],
+    - estElaAll[[ "pLabor" ]] )
[1] TRUE
> estElaAllObs <- elas( estResultAll, yObs = TRUE )
> print( estElaAllObs )
       pOutput   pVarInput        pLabor          land
1   0.01626417 -0.01610350 -1.606759e-04  0.0006309654
2  -0.13606253  0.13430414  1.758391e-03  0.0059706113
3  -0.04307491  0.04240100  6.739110e-04  0.0002994784
4   0.02910438 -0.02885609 -2.482834e-04  0.0040348612
5  -0.09350100  0.09298629  5.147048e-04  0.0085559541
6   0.60777191 -0.60777191 -2.881632e-16  0.0135816969
7   0.42876081 -0.42853349 -2.273203e-04  0.0162616697
8   0.85411452 -0.85624558  2.131067e-03  0.0155382198
9   0.33772955 -0.33907887  1.349316e-03  0.0229210325
10 -0.82048781  0.82719275 -6.704944e-03  0.1225837699
11 -0.60196773  0.60842949 -6.461761e-03  0.0949109269
12  0.02012670 -0.02033431  2.076153e-04  0.1325383275
13 -0.10110197  0.10226211 -1.160138e-03  0.0437927569
14 -0.34289039  0.34658689 -3.696507e-03  0.0743959131
15 -0.56543383  0.57018971 -4.755875e-03  0.0505115377
16  0.65626856 -0.66926326  1.299470e-02 -0.1382310658
17  0.10817998 -0.11056730  2.387316e-03 -0.0983728088
18 -0.10851967  0.11262870 -4.109028e-03  0.0988141227
19  0.42242514 -0.44232630  1.990116e-02  0.1645560011
20  0.60077782 -0.62846194  2.768412e-02  0.1026199344
> all.equal( estElaAllObs[[ "pOutput" ]] + estElaAllObs[[ "pVarInput" ]],
+    - estElaAllObs[[ "pLabor" ]] )
[1] TRUE
> # different order of weights
> npseed( 123 )
> estResultAll2 <- npregHom( "qVarInput",
+    xNames = c( "pOutput", "pVarInput", "pLabor", "land" ),
+    data = germanFarms, homWeights = weights[ c( 3, 2, 1 ) ],
+    restrictGrad = FALSE )
Multistart 1 of 4 |Multistart 1 of 4 |Multistart 1 of 4 |Multistart 1 of 4 /Multistart 1 of 4 -Multistart 1 of 4 \Multistart 1 of 4 |Multistart 1 of 4 |Multistart 1 of 4 /Multistart 1 of 4 -Multistart 1 of 4 \Multistart 2 of 4 |Multistart 2 of 4 |Multistart 2 of 4 /Multistart 2 of 4 -Multistart 2 of 4 \Multistart 2 of 4 |Multistart 2 of 4 |Multistart 2 of 4 /Multistart 3 of 4 |Multistart 3 of 4 |Multistart 3 of 4 /Multistart 3 of 4 -Multistart 3 of 4 \Multistart 3 of 4 |Multistart 3 of 4 |Multistart 3 of 4 |Multistart 4 of 4 |Multistart 4 of 4 |Multistart 4 of 4 /Multistart 4 of 4 -Multistart 4 of 4 \Multistart 4 of 4 |Multistart 4 of 4 |Multistart 4 of 4 |Multistart 4 of 4 /Multistart 4 of 4 -Multistart 4 of 4 \                   > all.equal( estResultAll$grad, estResultAll2$grad, tolerance = 1e-6 )
[1] TRUE
> all.equal( elas( estResultAll ), elas( estResultAll2 ), tolerance = 1e-6 )
[1] TRUE
> all.equal( elas( estResultAll, yObs = TRUE ),
+    elas( estResultAll2, yObs = TRUE ), tolerance = 1e-6 )
[1] TRUE
> 
> 
> # estimation with Epanechnikov kernel (restricted gradients)
> npseed( 123 )
> estResultEpa <- npregHom( "qVarInput",
+    xNames = c( "pOutput", "pVarInput", "pLabor", "land" ),
+    data = germanFarms, homWeights = weights, ckertype="epanechnikov" )
Multistart 1 of 3 |Multistart 1 of 3 |Multistart 1 of 3 |Multistart 1 of 3 /Multistart 1 of 3 -Multistart 1 of 3 \Multistart 1 of 3 |Multistart 1 of 3 |Multistart 2 of 3 |Multistart 2 of 3 |Multistart 2 of 3 /Multistart 2 of 3 |Multistart 2 of 3 |Multistart 3 of 3 |Multistart 3 of 3 |Multistart 3 of 3 /Multistart 3 of 3 |Multistart 3 of 3 |Multistart 3 of 3 /                   > print( estResultEpa )
$call
npregHom(yName = "qVarInput", xNames = c("pOutput", "pVarInput", 
    "pLabor", "land"), homWeights = weights, data = germanFarms, 
    ckertype = "epanechnikov")

$yName
[1] "qVarInput"

$xNames
[1] "pOutput"   "pVarInput" "pLabor"    "land"     

$homWeights
     pOutput    pVarInput       pLabor 
0.6723446781 0.3269168696 0.0007384522 

$restrictGrad
[1] TRUE

$est

Regression Data: 20 training points, in 3 variable(s)
                     r_2      r_3      r_4
Bandwidth(s): 0.01630222 21.37180 1.699412

Kernel Regression Estimator: Local-Constant
Bandwidth Type: Fixed

Continuous Kernel Type: Second-Order Epanechnikov
No. Continuous Explanatory Vars.: 3


$grad
         pOutput   pVarInput        pLabor        land
 [1,] -1.1479844  0.38360645  9.520206e-03  0.09743689
 [2,] -1.1393592  0.20703790  6.850352e-03  0.10179848
 [3,] -0.0579661  0.02558467  1.885318e-04  0.01580823
 [4,]  0.7253859 -0.78116754 -5.379664e-06  0.00000000
 [5,]  0.7024502 -0.73941060  6.856645e-06  0.00000000
 [6,]  4.1006848 -4.09389991 -4.013747e-05  0.19466313
 [7,]  5.2202281 -5.23177377 -7.435267e-05  0.13285615
 [8,]  2.8646694 -2.81181253  4.447016e-05  0.24941501
 [9,]  6.9406719 -6.73454853  2.420465e-04  0.15980084
[10,] -5.5308766  5.13481083  1.754435e-04 19.43192452
[11,] -1.8379614  1.33714446  1.941260e-03 13.07239450
[12,] -0.8462923  0.44026197  1.656515e-03 22.51412882
[13,] -2.5076579  2.22867300  4.035805e-04  1.09362478
[14,] -2.5905486  2.32466529  3.456191e-04  1.42246502
[15,] -2.7339886  2.49245634  3.819714e-04  0.89794785
[16,]  0.5384236 -0.43420068 -1.727941e-04 -1.25872439
[17,]  0.5183273 -0.41341936 -1.613216e-04 -1.25872439
[18,] -4.5864638  3.67070274 -1.609359e-05  2.17238371
[19,] -2.0002821  1.25979561  1.107406e-03  6.09546189
[20,]  2.8374824 -2.52621949  1.073063e-03  3.52724720

attr(,"class")
[1] "npregHom"
> all.equal( estResultEpa$grad[ , "pOutput" ] * germanFarms$pOutput +
+    estResultEpa$grad[ , "pVarInput" ] * germanFarms$pVarInput,
+    - estResultEpa$grad[ , "pLabor" ] * germanFarms$pLabor )
[1] TRUE
> estElaEpa <- elas( estResultEpa )
> print( estElaEpa )
        pOutput    pVarInput        pLabor          land
1  -0.198347612  0.056800413  0.1415471985  0.0040904458
2  -0.188672191  0.030078916  0.1585932747  0.0040633586
3  -0.009387896  0.003664802  0.0057230948  0.0006423547
4   0.105630860 -0.105499872 -0.0001309888  0.0000000000
5   0.106927094 -0.107099334  0.0001722406  0.0000000000
6   0.622227932 -0.621198411 -0.0010295208  0.0074523642
7   0.852143470 -0.850046159 -0.0020973115  0.0052049374
8   0.471440274 -0.472758394  0.0013181197  0.0099232175
9   1.155281564 -1.162174579  0.0068930149  0.0062339981
10 -0.877652869  0.872378126  0.0052747431  0.7687163687
11 -0.270030948  0.214598716  0.0554322319  0.5157146548
12 -0.104051670  0.058313133  0.0457385373  0.8761428361
13 -0.299464200  0.287997040  0.0114671601  0.0438219918
14 -0.323567252  0.313869440  0.0096978120  0.0589323818
15 -0.358749995  0.347612880  0.0111371156  0.0366539624
16  0.071562849 -0.065493797 -0.0060690520 -0.0564385691
17  0.071597546 -0.065445309 -0.0061522379 -0.0595903397
18 -0.579047892  0.579659425 -0.0006115329  0.1076705272
19 -0.233140738  0.190234526  0.0429062119  0.3080445751
20  0.334188666 -0.378523073  0.0443344067  0.1834373702
> all.equal( estElaEpa[[ "pOutput" ]] + estElaEpa[[ "pVarInput" ]],
+    - estElaEpa[[ "pLabor" ]] )
[1] TRUE
> estElaEpaObs <- elas( estResultEpa, yObs = TRUE )
> print( estElaEpaObs )
        pOutput    pVarInput        pLabor          land
1  -0.198652320  0.056887672  0.1417646480  0.0040967297
2  -0.188559648  0.030060974  0.1584986741  0.0040609348
3  -0.009383276  0.003662998  0.0057202779  0.0006420386
4   0.105236423 -0.105105923 -0.0001304997  0.0000000000
5   0.107330276 -0.107503166  0.0001728901  0.0000000000
6   0.624163195 -0.623130472 -0.0010327228  0.0074755427
7   0.836825770 -0.834766159 -0.0020596113  0.0051113761
8   0.474961302 -0.476289267  0.0013279643  0.0099973306
9   1.165175540 -1.172127588  0.0069520475  0.0062873869
10 -0.891904384  0.886543989  0.0053603955  0.7811989503
11 -0.268523678  0.213400860  0.0551228180  0.5128360169
12 -0.104954286  0.058818981  0.0461353048  0.8837430998
13 -0.290166014  0.279054903  0.0111111116  0.0424613449
14 -0.315120022  0.305675386  0.0094446354  0.0573938595
15 -0.375881590  0.364212637  0.0116689527  0.0384043201
16  0.070789464 -0.064786001 -0.0060034633 -0.0558286330
17  0.072391269 -0.066170828 -0.0062204410 -0.0602509517
18 -0.583656974  0.584273375 -0.0006164006  0.1085275588
19 -0.235378796  0.192060702  0.0433180944  0.3110016802
20  0.328653177 -0.372253230  0.0436000531  0.1803989199
> all.equal( estElaEpaObs[[ "pOutput" ]] + estElaEpaObs[[ "pVarInput" ]],
+    - estElaEpaObs[[ "pLabor" ]] )
[1] TRUE
> 
> # estimation with Epanechnikov kernel (gradients not restricted)
> npseed( 123 )
> estResultEpaAll <- npregHom( "qVarInput",
+    xNames = c( "pOutput", "pVarInput", "pLabor", "land" ),
+    data = germanFarms, homWeights = weights, restrictGrad = FALSE,
+    ckertype="epanechnikov" )
Multistart 1 of 4 |Multistart 1 of 4 |Multistart 1 of 4 |Multistart 1 of 4 /Multistart 1 of 4 -Multistart 1 of 4 \Multistart 1 of 4 |Multistart 1 of 4 |Multistart 2 of 4 |Multistart 2 of 4 |Multistart 2 of 4 /Multistart 2 of 4 |Multistart 2 of 4 |Multistart 2 of 4 /Multistart 3 of 4 |Multistart 3 of 4 |Multistart 3 of 4 /Multistart 3 of 4 -Multistart 3 of 4 |Multistart 3 of 4 |Multistart 3 of 4 /Multistart 4 of 4 |Multistart 4 of 4 |Multistart 4 of 4 /Multistart 4 of 4 -Multistart 4 of 4 |Multistart 4 of 4 |                   > print( estResultEpaAll )
$call
npregHom(yName = "qVarInput", xNames = c("pOutput", "pVarInput", 
    "pLabor", "land"), homWeights = weights, data = germanFarms, 
    restrictGrad = FALSE, ckertype = "epanechnikov")

$yName
[1] "qVarInput"

$xNames
[1] "pOutput"   "pVarInput" "pLabor"    "land"     

$homWeights
     pOutput    pVarInput       pLabor 
0.6723446781 0.3269168696 0.0007384522 

$restrictGrad
[1] FALSE

$est

Regression Data: 20 training points, in 4 variable(s)
                     r_1        r_2      r_3      r_4
Bandwidth(s): 0.01920081 0.01536006 23.29574 1.893435

Kernel Regression Estimator: Local-Constant
Bandwidth Type: Fixed

Continuous Kernel Type: Second-Order Epanechnikov
No. Continuous Explanatory Vars.: 4


$grad
            pOutput     pVarInput        pLabor          land
 [1,]  7.663373e-15 -1.382548e-14  4.863180e-17  2.636379e-15
 [2,] -3.192879e+00  3.471247e+00  1.054569e-03  5.741285e-01
 [3,]  5.441053e-02 -7.355179e-02  5.678120e-05  6.607126e-03
 [4,] -2.462913e+00  2.491236e+00  9.116728e-04  4.304087e-01
 [5,] -2.577405e+00  2.680273e+00  1.636580e-04  3.877953e-01
 [6,]  1.501184e+00 -1.500339e+00 -4.999188e-06  2.236435e-01
 [7,]  1.332031e+00 -1.338114e+00 -9.058979e-07  2.517239e-01
 [8,]  1.918006e+00 -1.905356e+00  1.587632e-04  1.907674e+00
 [9,]  1.038416e+00 -1.033497e+00  1.932816e-04  5.344562e-01
[10,] -2.174449e+00  1.876230e+00  8.742682e-04  7.330672e+00
[11,]  2.179400e+00 -2.262304e+00  1.501787e-03  5.630943e+00
[12,]  3.914736e+00 -3.904423e+00  1.297573e-03  1.122752e+01
[13,]  1.812755e+00 -1.498263e+00 -8.048270e-04 -8.922325e-01
[14,]  4.991684e-01 -3.167515e-01 -6.978365e-04  1.422018e-01
[15,] -2.631373e-01  2.331306e-01  6.909889e-05  5.753592e-01
[16,]  4.753440e+00 -3.649284e+00 -2.315830e-03 -3.424505e+00
[17,]  2.880559e+00 -2.134956e+00 -1.571416e-03 -3.649041e+00
[18,] -8.018475e-01  5.092838e-01  5.476746e-04  2.228806e+00
[19,]  3.986757e+00 -3.575912e+00  1.943636e-03  5.249224e+00
[20,]  4.561354e+00 -3.903779e+00  1.154849e-03  2.502714e+00

attr(,"class")
[1] "npregHom"
> all.equal( estResultEpaAll$grad[ , "pOutput" ] * germanFarms$pOutput +
+    estResultEpaAll$grad[ , "pVarInput" ] * germanFarms$pVarInput,
+    - estResultEpaAll$grad[ , "pLabor" ] * germanFarms$pLabor )
[1] TRUE
> estElaEpaAll <- elas( estResultEpaAll )
> print( estElaEpaAll )
         pOutput     pVarInput        pLabor          land
1   1.326104e-15 -2.050276e-15  7.241723e-16  1.108465e-16
2  -5.202566e-01  4.962331e-01  2.402342e-02  2.254970e-02
3   8.809645e-03 -1.053283e-02  1.723186e-03  2.684019e-04
4  -3.621934e-01  3.397758e-01  2.241753e-02  1.661873e-02
5  -3.893194e-01  3.852398e-01  4.079551e-03  1.474579e-02
6   2.289361e-01 -2.288072e-01 -1.288759e-04  8.605058e-03
7   2.189730e-01 -2.189472e-01 -2.573348e-05  9.931418e-03
8   3.148623e-01 -3.195565e-01  4.694127e-03  7.570992e-02
9   1.709189e-01 -1.763618e-01  5.442935e-03  2.061731e-02
10 -3.448571e-01  3.185865e-01  2.627058e-02  2.898379e-01
11  3.248781e-01 -3.683885e-01  4.351044e-02  2.253938e-01
12  4.844507e-01 -5.205116e-01  3.606094e-02  4.397665e-01
13  2.194743e-01 -1.962899e-01 -2.318443e-02 -3.624682e-02
14  6.297715e-02 -4.319868e-02 -1.977848e-02  5.950873e-03
15 -3.456868e-02  3.255162e-02  2.017056e-03  2.351332e-02
16  6.073831e-01 -5.291861e-01 -7.819695e-02 -1.476163e-01
17  3.913318e-01 -3.323923e-01 -5.893948e-02 -1.699019e-01
18 -1.007032e-01  8.000161e-02  2.070163e-02  1.098874e-01
19  4.680851e-01 -5.439440e-01  7.585889e-02  2.672269e-01
20  5.364694e-01 -5.841162e-01  4.764676e-02  1.299738e-01
> all.equal( estElaEpaAll[[ "pOutput" ]] + estElaEpaAll[[ "pVarInput" ]],
+    - estElaEpaAll[[ "pLabor" ]] )
[1] TRUE
> estElaEpaAllObs <- elas( estResultEpaAll, yObs = TRUE )
> print( estElaEpaAllObs )
         pOutput     pVarInput        pLabor          land
1   1.326104e-15 -2.050276e-15  7.241723e-16  1.108465e-16
2  -5.284094e-01  5.040095e-01  2.439989e-02  2.290308e-02
3   8.807716e-03 -1.053053e-02  1.722809e-03  2.683431e-04
4  -3.573106e-01  3.351953e-01  2.211532e-02  1.639470e-02
5  -3.938124e-01  3.896858e-01  4.126632e-03  1.491597e-02
6   2.284945e-01 -2.283659e-01 -1.286273e-04  8.588459e-03
7   2.135305e-01 -2.135054e-01 -2.509389e-05  9.684577e-03
8   3.180047e-01 -3.227457e-01  4.740975e-03  7.646553e-02
9   1.743256e-01 -1.798771e-01  5.551424e-03  2.102826e-02
10 -3.506498e-01  3.239380e-01  2.671186e-02  2.947065e-01
11  3.184073e-01 -3.610512e-01  4.264381e-02  2.209045e-01
12  4.854922e-01 -5.216307e-01  3.613847e-02  4.407120e-01
13  2.097574e-01 -1.875994e-01 -2.215797e-02 -3.464204e-02
14  6.071994e-02 -4.165036e-02 -1.906958e-02  5.737583e-03
15 -3.617736e-02  3.406643e-02  2.110921e-03  2.460753e-02
16  6.249604e-01 -5.445005e-01 -8.045993e-02 -1.518882e-01
17  4.023082e-01 -3.417155e-01 -6.059265e-02 -1.746674e-01
18 -1.020402e-01  8.106376e-02  2.097648e-02  1.113463e-01
19  4.691329e-01 -5.451616e-01  7.602869e-02  2.678251e-01
20  5.283216e-01 -5.752448e-01  4.692311e-02  1.279998e-01
> all.equal( estElaEpaAllObs[[ "pOutput" ]] + estElaEpaAllObs[[ "pVarInput" ]],
+    - estElaEpaAllObs[[ "pLabor" ]] )
[1] TRUE
> # different order of weights
> npseed( 123 )
> estResultEpaAll2 <- npregHom( "qVarInput",
+    xNames = c( "pOutput", "pVarInput", "pLabor", "land" ),
+    data = germanFarms, homWeights = weights[ c( 3, 2, 1 ) ],
+    restrictGrad = FALSE, ckertype="epanechnikov" )
Multistart 1 of 4 |Multistart 1 of 4 |Multistart 1 of 4 |Multistart 1 of 4 /Multistart 1 of 4 -Multistart 1 of 4 \Multistart 1 of 4 |Multistart 1 of 4 |Multistart 2 of 4 |Multistart 2 of 4 |Multistart 2 of 4 /Multistart 2 of 4 |Multistart 2 of 4 |Multistart 2 of 4 /Multistart 3 of 4 |Multistart 3 of 4 |Multistart 3 of 4 /Multistart 3 of 4 -Multistart 3 of 4 |Multistart 3 of 4 |Multistart 3 of 4 /Multistart 4 of 4 |Multistart 4 of 4 |Multistart 4 of 4 /Multistart 4 of 4 -Multistart 4 of 4 |Multistart 4 of 4 |                   > all.equal( estResultEpaAll$grad, estResultEpaAll2$grad, tolerance = 1e-6 )
[1] TRUE
> all.equal( elas( estResultEpaAll ), elas( estResultEpaAll2 ), tolerance = 1e-6 )
[1] TRUE
> all.equal( elas( estResultEpaAll, yObs = TRUE ),
+    elas( estResultEpaAll2, yObs = TRUE ), tolerance = 1e-6 )
[1] TRUE
> 
> 
> # estimation with manual bandwidth selection (restricted gradients)
> estResultMan <- npregHom( "qVarInput",
+    xNames = c( "pOutput", "pVarInput", "pLabor", "land" ),
+    data = germanFarms, homWeights = weights, bws = rep( 1, 3 ),
+    bwscaling = TRUE )
> print( estResultMan )
$call
npregHom(yName = "qVarInput", xNames = c("pOutput", "pVarInput", 
    "pLabor", "land"), homWeights = weights, data = germanFarms, 
    bws = rep(1, 3), bwscaling = TRUE)

$yName
[1] "qVarInput"

$xNames
[1] "pOutput"   "pVarInput" "pLabor"    "land"     

$homWeights
     pOutput    pVarInput       pLabor 
0.6723446781 0.3269168696 0.0007384522 

$restrictGrad
[1] TRUE

$est

Regression Data: 20 training points, in 3 variable(s)
                 r_2 r_3 r_4
Scale Factor(s):   1   1   1

Kernel Regression Estimator: Local-Constant
Bandwidth Type: Fixed

Continuous Kernel Type: Second-Order Gaussian
No. Continuous Explanatory Vars.: 3


$grad
          pOutput    pVarInput        pLabor       land
 [1,] -1.57635057  0.991422639  8.444994e-03  0.9427534
 [2,] -2.83857697  2.491356228  4.669516e-03  1.4129624
 [3,] -2.07453689  2.347574461 -9.551493e-06  1.1601769
 [4,] -1.88147604  1.874236024  8.566194e-04  1.3011841
 [5,] -1.56251489  1.490158221  8.760078e-04  1.3927804
 [6,] -1.19646306  0.987039251  1.238894e-03  2.1214829
 [7,] -1.32680288  1.064882689  1.544478e-03  2.8041318
 [8,] -1.41264728  0.985799886  2.251467e-03  4.1378024
 [9,] -0.98861116  0.699349589  1.540456e-03  2.7604051
[10,] -1.67048667  0.916369858  3.638438e-03  6.6809555
[11,] -2.16768322  1.034593211  5.338201e-03  9.1186278
[12,] -1.51283979  0.366407246  4.978857e-03  8.8944021
[13,]  0.19848637 -0.405148424  1.008374e-03  3.5072734
[14,]  0.26680945 -0.330454388  4.024227e-04  3.9637744
[15,] -0.47136333  0.004351884  2.100518e-03  6.2566045
[16,]  2.08861762 -1.221672685 -2.657166e-03 -1.5072291
[17,]  2.42360642 -1.319516978 -3.301160e-03 -2.5632617
[18,] -0.07368454 -0.151801658  8.756801e-04  2.0099016
[19,] -0.83611942  0.049025389  2.324182e-03  3.9817589
[20,] -0.44418364 -0.201890752  1.998397e-03  3.7651185

attr(,"class")
[1] "npregHom"
> all.equal( estResultMan$grad[ , "pOutput" ] * germanFarms$pOutput +
+    estResultMan$grad[ , "pVarInput" ] * germanFarms$pVarInput,
+    - estResultMan$grad[ , "pLabor" ] * germanFarms$pLabor )
[1] TRUE
> estElaMan <- elas( estResultMan )
> print( estElaMan )
        pOutput     pVarInput        pLabor        land
1  -0.266847248  0.1438279694  0.1230192789  0.03877611
2  -0.455438713  0.3506955137  0.1047431995  0.05464577
3  -0.321531669  0.3218091454 -0.0002774764  0.04511535
4  -0.277237991  0.2561323163  0.0211056750  0.05034058
5  -0.238645698  0.2165662011  0.0220794972  0.05354936
6  -0.182704829  0.1507249513  0.0319798773  0.08173489
7  -0.218169851  0.1742851592  0.0438846918  0.11066171
8  -0.229500057  0.1636208083  0.0658792485  0.16251616
9  -0.161399132  0.1183713416  0.0430277902  0.10562088
10 -0.260775830  0.1531604481  0.1076153821  0.26000662
11 -0.317754199  0.1656672800  0.1520869187  0.35892371
12 -0.192929924  0.0503381482  0.1425917756  0.35901658
13  0.024487127 -0.0540861833  0.0295990566  0.14518572
14  0.034333887 -0.0459673092  0.0116334218  0.16918828
15 -0.063569443  0.0006237966  0.0629456460  0.26248587
16  0.265712392 -0.1763818449 -0.0893305472 -0.06468655
17  0.323827575 -0.2020506976 -0.1217768773 -0.11738047
18 -0.009157153 -0.0235965087  0.0327536616  0.09805791
19 -0.097981138  0.0074431633  0.0905379752  0.20231550
20 -0.052988941 -0.0306409226  0.0836298633  0.19833288
> all.equal( estElaMan[[ "pOutput" ]] + estElaMan[[ "pVarInput" ]],
+    - estElaMan[[ "pLabor" ]] )
[1] TRUE
> estElaManObs <- elas( estResultMan, yObs = TRUE )
> print( estElaManObs )
        pOutput     pVarInput        pLabor        land
1  -0.272778711  0.1470249679  0.1257537432  0.03963803
2  -0.469773762  0.3617337442  0.1080400183  0.05636576
3  -0.335816113  0.3361059168 -0.0002898037  0.04711965
4  -0.272957888  0.2521780499  0.0207798377  0.04956340
5  -0.238743138  0.2166546253  0.0220885123  0.05357123
6  -0.182113049  0.1502367545  0.0318762947  0.08147016
7  -0.212692401  0.1699094935  0.0427829070  0.10788339
8  -0.234216485  0.1669833603  0.0672331252  0.16585601
9  -0.165964557  0.1217196585  0.0442448980  0.10860854
10 -0.269381238  0.1582146286  0.1111666093  0.26858664
11 -0.316695590  0.1651153541  0.1515802362  0.35772794
12 -0.187617235  0.0489519925  0.1386652423  0.34913038
13  0.022967247 -0.0507291352  0.0277618877  0.13617426
14  0.032455287 -0.0434521792  0.0109968919  0.15993104
15 -0.064805244  0.0006359233  0.0641693204  0.26758864
16  0.274601855 -0.1822827359 -0.0923191191 -0.06685065
17  0.338488728 -0.2111984556 -0.1272902728 -0.12269482
18 -0.009376832 -0.0241625850  0.0335394165  0.10041030
19 -0.098388514  0.0074741097  0.0909144041  0.20315666
20 -0.051447849 -0.0297497841  0.0811976328  0.19256471
> all.equal( estElaManObs[[ "pOutput" ]] + estElaManObs[[ "pVarInput" ]],
+    - estElaManObs[[ "pLabor" ]] )
[1] TRUE
> # different normalized variable omitted
> estResultMan2 <- npregHom( "qVarInput",
+    xNames = c( "pOutput", "pVarInput", "pLabor", "land" ),
+    data = germanFarms, homWeights = weights[ c( 3, 2, 1 ) ],
+    bws = rep( 1, 3 ), bwscaling = TRUE )
> print( estResultMan2 )
$call
npregHom(yName = "qVarInput", xNames = c("pOutput", "pVarInput", 
    "pLabor", "land"), homWeights = weights[c(3, 2, 1)], data = germanFarms, 
    bws = rep(1, 3), bwscaling = TRUE)

$yName
[1] "qVarInput"

$xNames
[1] "pOutput"   "pVarInput" "pLabor"    "land"     

$homWeights
      pLabor    pVarInput      pOutput 
0.0007384522 0.3269168696 0.6723446781 

$restrictGrad
[1] TRUE

$est

Regression Data: 20 training points, in 3 variable(s)
                 r_1 r_2 r_4
Scale Factor(s):   1   1   1

Kernel Regression Estimator: Local-Constant
Bandwidth Type: Fixed

Continuous Kernel Type: Second-Order Gaussian
No. Continuous Explanatory Vars.: 3


$grad
         pOutput   pVarInput        pLabor        land
 [1,] -0.3346884 -0.16425801  0.0055251735  0.33621380
 [2,] -0.4521373 -0.22115739  0.0046218903  1.29140243
 [3,] -0.3296662 -0.16102865  0.0025186722  4.35090056
 [4,] -0.1987278 -0.09712347  0.0017272135  1.63559747
 [5,] -0.1973915 -0.09648024  0.0017524333  1.47173270
 [6,] -0.2028850 -0.09916195  0.0017868264  1.60810292
 [7,] -0.2385393 -0.11657709  0.0020519292  2.15194813
 [8,] -0.2846660 -0.13910014  0.0023695569  2.81273632
 [9,] -0.1843323 -0.09009408  0.0016233456  1.59472959
[10,] -0.3904939 -0.19078525  0.0031391107  3.91699187
[11,] -0.6714398 -0.32802679  0.0052983172  5.75167024
[12,] -1.3702067 -0.66902722  0.0093106917  9.79732005
[13,]  0.1310055  0.06395225 -0.0008414572  2.00652032
[14,] -0.1091054 -0.05327333  0.0007420158  4.20519692
[15,] -0.4587158 -0.22398179  0.0031357844  6.03653634
[16,]  1.1869787  0.57928217 -0.0069794947 -2.61385366
[17,]  1.1183006  0.54569804 -0.0063156941 -2.77990043
[18,]  0.2089895  0.10196293 -0.0011181149  0.09287105
[19,] -0.9947068 -0.48520235  0.0048833544  4.12096811
[20,] -0.7239911 -0.35309920  0.0033444087  3.16663946

attr(,"class")
[1] "npregHom"
> all.equal( estResultMan2$grad[ , "pOutput" ] * germanFarms$pOutput +
+    estResultMan2$grad[ , "pVarInput" ] * germanFarms$pVarInput,
+    - estResultMan2$grad[ , "pLabor" ] * germanFarms$pLabor )
[1] TRUE
> estElaMan2 <- elas( estResultMan2 )
> print( estElaMan2 )
       pOutput    pVarInput      pLabor        land
1  -0.05754522 -0.024203031  0.08174825  0.01404560
2  -0.07075465 -0.030363457  0.10111811  0.04871278
3  -0.04964070 -0.021445841  0.07108654  0.16437666
4  -0.02901872 -0.013153152  0.04217187  0.06270778
5  -0.03009263 -0.013995840  0.04408847  0.05648107
6  -0.03121997 -0.015259055  0.04647902  0.06243292
7  -0.03949584 -0.019212103  0.05870794  0.08551333
8  -0.04678445 -0.023355771  0.07014022  0.11175648
9  -0.03047852 -0.015444193  0.04592271  0.06179890
10 -0.06225251 -0.032564092  0.09481660  0.15567427
11 -0.10125263 -0.054035622  0.15528825  0.23290047
12 -0.17433694 -0.091700910  0.26603785  0.39454971
13  0.01611640  0.008513326 -0.02462972  0.08282647
14 -0.01399777 -0.007388189  0.02138596  0.17895272
15 -0.06169056 -0.032015536  0.09370609  0.25254420
16  0.15138516  0.083844903 -0.23523006 -0.11246139
17  0.15059925  0.084219036 -0.23481828 -0.12830531
18  0.02600418  0.015868949 -0.04187313  0.00453652
19 -0.11677075 -0.073794539  0.19056529  0.20975788
20 -0.08603613 -0.053383508  0.13941964  0.16616504
> all.equal( estElaMan2[[ "pOutput" ]] + estElaMan2[[ "pVarInput" ]],
+    - estElaMan2[[ "pLabor" ]] )
[1] TRUE
> estElaMan2Obs <- elas( estResultMan2, yObs = TRUE )
> print( estElaMan2Obs )
       pOutput    pVarInput      pLabor         land
1  -0.05791596 -0.024358965  0.08227493  0.014136094
2  -0.07482702 -0.032111061  0.10693808  0.051516500
3  -0.05336479 -0.023054724  0.07641951  0.176708324
4  -0.02883073 -0.013067942  0.04189867  0.062301543
5  -0.03016026 -0.014027295  0.04418755  0.056608010
6  -0.03088102 -0.015093391  0.04597441  0.061755104
7  -0.03823891 -0.018600691  0.05683960  0.082791924
8  -0.04719753 -0.023561992  0.07075952  0.112743235
9  -0.03094506 -0.015680599  0.04662566  0.062744864
10 -0.06297070 -0.032939775  0.09591048  0.157470246
11 -0.09809646 -0.052351261  0.15044772  0.225640655
12 -0.16992836 -0.089382008  0.25931037  0.384572464
13  0.01515890  0.008007540 -0.02316644  0.077905652
14 -0.01327183 -0.007005028  0.02027685  0.169671997
15 -0.06306641 -0.032729559  0.09579596  0.258176546
16  0.15605851  0.086433248 -0.24249176 -0.115933144
17  0.15618549  0.087343009 -0.24352850 -0.133064591
18  0.02659526  0.016229652 -0.04282491  0.004639635
19 -0.11704993 -0.073970970  0.19102090  0.210259375
20 -0.08385672 -0.052031234  0.13588795  0.161955856
> all.equal( estElaMan2Obs[[ "pOutput" ]] + estElaMan2Obs[[ "pVarInput" ]],
+    - estElaMan2Obs[[ "pLabor" ]] )
[1] TRUE
> 
> # estimation with manual bandwidth selection (gradients not restricted)
> estResultManAll <- npregHom( "qVarInput",
+    xNames = c( "pOutput", "pVarInput", "pLabor", "land" ),
+    data = germanFarms, homWeights = weights, restrictGrad = FALSE,
+    bws = rep( 1, 4 ), bwscaling = TRUE )
> print( estResultManAll )
$call
npregHom(yName = "qVarInput", xNames = c("pOutput", "pVarInput", 
    "pLabor", "land"), homWeights = weights, data = germanFarms, 
    restrictGrad = FALSE, bws = rep(1, 4), bwscaling = TRUE)

$yName
[1] "qVarInput"

$xNames
[1] "pOutput"   "pVarInput" "pLabor"    "land"     

$homWeights
     pOutput    pVarInput       pLabor 
0.6723446781 0.3269168696 0.0007384522 

$restrictGrad
[1] FALSE

$est

Regression Data: 20 training points, in 4 variable(s)
                 r_1 r_2 r_3 r_4
Scale Factor(s):   1   1   1   1

Kernel Regression Estimator: Local-Constant
Bandwidth Type: Fixed

Continuous Kernel Type: Second-Order Gaussian
No. Continuous Explanatory Vars.: 4


$grad
          pOutput  pVarInput        pLabor       land
 [1,]  0.34834994 -0.8642949  0.0045593069  0.5745809
 [2,] -3.70641516  3.6167963  0.0038144081  0.9491543
 [3,] -4.37417241  5.0097219 -0.0003025467  0.2530275
 [4,] -5.16944274  5.3649943  0.0011586154  0.8182849
 [5,] -3.21017620  3.2014644  0.0009928279  0.9360419
 [6,] -0.65757961  0.4535162  0.0012071827  1.9010838
 [7,] -1.06085817  0.8006586  0.0015273908  2.5305005
 [8,] -0.80729418  0.3623389  0.0024269373  4.1901877
 [9,] -0.34619642  0.0750514  0.0015686874  2.6616786
[10,] -0.33120027 -0.3093311  0.0034960514  6.1612418
[11,]  0.44466963 -1.2031047  0.0044740813  7.4517976
[12,]  1.12027668 -1.9079057  0.0041637277  7.2835521
[13,]  1.61654307 -1.6304094  0.0006208271  2.4557501
[14,]  1.43550254 -1.4436977  0.0005568663  3.3261268
[15,]  0.68875524 -1.0476392  0.0019114690  4.9280135
[16,]  3.48917364 -2.5082975 -0.0024316441 -1.3988396
[17,]  3.58501496 -2.4524342 -0.0028051517 -2.1668603
[18,]  0.08011058 -0.4176700  0.0014695915  2.4549355
[19,]  1.12577801 -1.4404042  0.0022272236  3.3025005
[20,]  1.73656548 -1.9396437  0.0020840803  3.3271347

attr(,"class")
[1] "npregHom"
> all.equal( estResultManAll$grad[ , "pOutput" ] * germanFarms$pOutput +
+    estResultManAll$grad[ , "pVarInput" ] * germanFarms$pVarInput,
+    - estResultManAll$grad[ , "pLabor" ] * germanFarms$pLabor )
[1] TRUE
> estElaManAll <- elas( estResultManAll )
> print( estElaManAll )
        pOutput   pVarInput       pLabor        land
1   0.059440297 -0.12638681  0.066946516  0.02382170
2  -0.599667073  0.51338751  0.086279565  0.03701601
3  -0.696067689  0.70509171 -0.009024023  0.01010231
4  -0.762893305  0.73430314  0.028590165  0.03170663
5  -0.487818457  0.46292099  0.024897462  0.03580691
6  -0.099928249  0.06891802  0.031010231  0.07288840
7  -0.173569097  0.13038654  0.043182559  0.09936470
8  -0.130623181  0.05989687  0.070726311  0.16390781
9  -0.056415164  0.01267969  0.043735473  0.10165533
10 -0.051614215 -0.05161237  0.103226580  0.23936927
11  0.065292779 -0.19297576  0.127682979  0.29380955
12  0.142062243 -0.26063744  0.118575192  0.29233963
13  0.198573282 -0.21671813  0.018144848  0.10121965
14  0.184348759 -0.20041411  0.016065356  0.14168198
15  0.092527878 -0.14958654  0.057058665  0.20594639
16  0.444054078 -0.36227508 -0.081778997 -0.06005692
17  0.478718872 -0.37530173 -0.103417139 -0.09916802
18  0.009969622 -0.06501436  0.055044737  0.11993687
19  0.132198931 -0.21914012  0.086941185  0.16815048
20  0.206493825 -0.29342735  0.086933527  0.17469468
> all.equal( estElaManAll[[ "pOutput" ]] + estElaManAll[[ "pVarInput" ]],
+    - estElaManAll[[ "pLabor" ]] )
[1] TRUE
> estElaManAllObs <- elas( estResultManAll, yObs = TRUE )
> print( estElaManAllObs )
       pOutput   pVarInput       pLabor        land
1   0.06028002 -0.12817231  0.067892284  0.02415823
2  -0.61339770  0.52514259  0.088255116  0.03786357
3  -0.70807012  0.71724974 -0.009179626  0.01027651
4  -0.74996447  0.72185882  0.028105644  0.03116929
5  -0.49049615  0.46546202  0.025034127  0.03600346
6  -0.10008987  0.06902948  0.031060385  0.07300629
7  -0.17006028  0.12775069  0.042309594  0.09735597
8  -0.13384913  0.06137612  0.072473009  0.16795578
9  -0.05811824  0.01306247  0.045055768  0.10472412
10 -0.05340907 -0.05340716  0.106816227  0.24769320
11  0.06496563 -0.19200886  0.127043228  0.29233743
12  0.13893290 -0.25489611  0.115963218  0.28589998
13  0.18705337 -0.20414557  0.017092203  0.09534756
14  0.17461768 -0.18983501  0.015217326  0.13420313
15  0.09469330 -0.15308731  0.058394006  0.21076615
16  0.45874053 -0.37425681 -0.084483720 -0.06204321
17  0.50069481 -0.39253023 -0.108164578 -0.10372040
18  0.01019459 -0.06648140  0.056286814  0.12264323
19  0.13247345 -0.21959517  0.087121724  0.16849965
20  0.20113879 -0.28581785  0.084679065  0.17016429
> all.equal( estElaManAllObs[[ "pOutput" ]] + estElaManAllObs[[ "pVarInput" ]],
+    - estElaManAllObs[[ "pLabor" ]] )
[1] TRUE
> # different order of weights
> estResultManAll2 <- npregHom( "qVarInput",
+    xNames = c( "pOutput", "pVarInput", "pLabor", "land" ),
+    data = germanFarms, homWeights = weights[ c( 3, 2, 1 ) ],
+    restrictGrad = FALSE, bws = rep( 1, 4 ), bwscaling = TRUE )
> all.equal( estResultManAll$grad, estResultManAll2$grad )
[1] TRUE
> all.equal( elas( estResultManAll ), elas( estResultManAll2 ) )
[1] TRUE
> all.equal( elas( estResultManAll, yObs = TRUE ),
+    elas( estResultManAll2, yObs = TRUE ) )
[1] TRUE
> 
