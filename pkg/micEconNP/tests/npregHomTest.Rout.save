
R version 3.0.1 (2013-05-16) -- "Good Sport"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # load the micEconNP package
> library( micEconNP )
Loading required package: np
Loading required package: boot
Loading required package: cubature
Nonparametric Kernel Methods for Mixed Datatypes (version 0.50-1)
[vignette("np_faq",package="np") provides answers to frequently asked questions]
Loading required package: micEcon
Loading required package: miscTools
> 
> # load data
> data( germanFarms )
> # output quantity
> germanFarms$qOutput <- germanFarms$vOutput / germanFarms$pOutput
> # quantity of variable inputs
> germanFarms$qVarInput <- germanFarms$vVarInput / germanFarms$pVarInput
> # a time trend to account for technical progress:
> germanFarms$time <- c(1:20)
> 
> # weights to impose normalize prices
> weights <- c(
+    pOutput = mean( germanFarms$qOutput ),
+    pVarInput = mean( germanFarms$qVarInput ),
+    pLabor = mean( germanFarms$qLabor ) )
> weights <- weights / sum( weights )
> 
> # estimation (restricted gradients)
> npseed( 123 )
> estResult <- npregHom( "qVarInput",
+    xNames = c( "pOutput", "pVarInput", "pLabor", "land" ),
+    data = germanFarms, homWeights = weights )
Multistart 1 of 3 |Multistart 1 of 3 |Multistart 1 of 3 |Multistart 1 of 3 /Multistart 1 of 3 -Multistart 1 of 3 \Multistart 1 of 3 |Multistart 1 of 3 /Multistart 1 of 3 |Multistart 1 of 3 |Multistart 1 of 3 /Multistart 1 of 3 -Multistart 1 of 3 \Multistart 2 of 3 |Multistart 2 of 3 |Multistart 2 of 3 /Multistart 2 of 3 -Multistart 2 of 3 |Multistart 2 of 3 |Multistart 2 of 3 /Multistart 2 of 3 -Multistart 3 of 3 |Multistart 3 of 3 |Multistart 3 of 3 /Multistart 3 of 3 -Multistart 3 of 3 \Multistart 3 of 3 |Multistart 3 of 3 |Multistart 3 of 3 /Multistart 3 of 3 -                   > print( estResult )
$call
npregHom(yName = "qVarInput", xNames = c("pOutput", "pVarInput", 
    "pLabor", "land"), homWeights = weights, data = germanFarms)

$yName
[1] "qVarInput"

$xNames
[1] "pOutput"   "pVarInput" "pLabor"    "land"     

$homWeights
     pOutput    pVarInput       pLabor 
0.6723446781 0.3269168696 0.0007384522 

$restrictGrad
[1] TRUE

$est

Regression Data: 20 training points, in 3 variable(s)
                     r_2      r_3      r_4
Bandwidth(s): 0.01664024 26.66757 1.589505

Kernel Regression Estimator: Local-Constant
Bandwidth Type: Fixed

Continuous Kernel Type: Second-Order Gaussian
No. Continuous Explanatory Vars.: 3


$grad
         pOutput  pVarInput        pLabor       land
 [1,] -2.3490390  2.5457658  1.944729e-03  0.8427032
 [2,] -2.4945193  2.5631547  1.757982e-03  0.8750527
 [3,] -2.2761223  2.5519634  1.014854e-04  0.2673161
 [4,] -1.7078676  1.8671460 -1.423326e-04  0.1994970
 [5,] -0.4717482  0.4819728  7.956272e-05  0.3086799
 [6,]  2.9975397 -2.9945390 -1.775171e-05  0.6788983
 [7,]  2.1748426 -2.1824080 -1.510609e-05  0.7419406
 [8,]  3.9802650 -3.9058796  5.643105e-05  0.5801248
 [9,]  1.7326372 -1.7035494  1.959667e-04  0.7900884
[10,] -6.1168494  5.5697928  8.101434e-04  6.1365157
[11,] -3.5216759  2.9839011  1.348740e-03  9.0304933
[12,] -2.7541362  2.1746766  1.831971e-03  9.6005934
[13,] -3.2856129  2.9087991  5.800799e-04  3.0583682
[14,] -3.8457663  3.4981218  2.865945e-04  2.2558040
[15,] -5.8787912  5.4073116  5.923245e-04  1.8341178
[16,]  6.8291613 -5.8619222 -6.684419e-04 -3.9806269
[17,]  1.7756945 -1.4851998 -2.666554e-04 -2.8689168
[18,] -2.0945440  1.6128532  2.564680e-04  2.7735967
[19,]  1.4899095 -1.4744823  1.264643e-03  6.3116326
[20,]  3.0108686 -2.7017335  1.215329e-03  5.4040091

attr(,"class")
[1] "npregHom"
> all.equal( estResult$grad[ , "pOutput" ] * germanFarms$pOutput +
+    estResult$grad[ , "pVarInput" ] * germanFarms$pVarInput,
+    - estResult$grad[ , "pLabor" ] * germanFarms$pLabor )
[1] TRUE
> estEla <- elas( estResult )
> print( estEla )
       pOutput   pVarInput        pLabor         land
1  -0.40444816  0.37563468  0.0288134815  0.035253606
2  -0.41396456  0.37317816  0.0407864008  0.035003154
3  -0.36754679  0.36447514  0.0030716567  0.010830281
4  -0.24913701  0.25260873 -0.0034717271  0.007640924
5  -0.07177834  0.06978057  0.0019977654  0.011823162
6   0.45418370 -0.45372903 -0.0004546725  0.025953061
7   0.35482836 -0.35440248 -0.0004258785  0.029051612
8   0.65629033 -0.65796618  0.0016758538  0.023125077
9   0.28816855 -0.29374484  0.0055762895  0.030797533
10 -0.96934991  0.94502508  0.0243248273  0.242435459
11 -0.51944866  0.48078322  0.0386654406  0.357669483
12 -0.33832994  0.28779034  0.0505395962  0.373288134
13 -0.39180552  0.37534699  0.0164585315  0.122374541
14 -0.47885816  0.47084147  0.0080166892  0.093167606
15 -0.77439479  0.75705752  0.0173372705  0.075158174
16  0.90026180 -0.87697587 -0.0232859310 -0.177025058
17  0.24571797 -0.23553051 -0.0101874537 -0.136062282
18 -0.26552406  0.25573867  0.0097853837  0.138032547
19  0.17421993 -0.22337772  0.0491577947  0.320007158
20  0.35205393 -0.40190429  0.0498503558  0.279014546
> all.equal( estEla[[ "pOutput" ]] + estEla[[ "pVarInput" ]],
+    - estEla[[ "pLabor" ]] )
[1] TRUE
> estElaObs <- elas( estResult, yObs = TRUE )
> print( estElaObs )
       pOutput  pVarInput        pLabor         land
1  -0.40648815  0.3775293  0.0289588129  0.035431421
2  -0.41283352  0.3721586  0.0406749630  0.034907517
3  -0.36844779  0.3653686  0.0030791865  0.010856830
4  -0.24777139  0.2512241 -0.0034526972  0.007599041
5  -0.07208037  0.0700742  0.0020061717  0.011872913
6   0.45625404 -0.4557973 -0.0004567451  0.026071365
7   0.34863693 -0.3482185 -0.0004184473  0.028544688
8   0.65992672 -0.6616119  0.0016851394  0.023253209
9   0.29086902 -0.2964976  0.0056285457  0.031086141
10 -0.98639785  0.9616452  0.0247526277  0.246699169
11 -0.51451209  0.4762141  0.0382979848  0.354270383
12 -0.34155859  0.2905367  0.0510218907  0.376850386
13 -0.38018471  0.3642143  0.0159703772  0.118744955
14 -0.46780747  0.4599758  0.0078316867  0.091017562
15 -0.80824382  0.7901487  0.0180950878  0.078443361
16  0.89786677 -0.8746428 -0.0232239818 -0.176554106
17  0.24799925 -0.2377172 -0.0102820358 -0.137325508
18 -0.26654417  0.2567212  0.0098229780  0.138562852
19  0.17532182 -0.2247905  0.0494687028  0.322031106
20  0.34873574 -0.3981162  0.0493805049  0.276384771
> all.equal( estElaObs[[ "pOutput" ]] + estElaObs[[ "pVarInput" ]],
+    - estElaObs[[ "pLabor" ]] )
[1] TRUE
> # different normalized variable omitted
> npseed( 123 )
> estResult2 <- npregHom( "qVarInput",
+    xNames = c( "pOutput", "pVarInput", "pLabor", "land" ),
+    data = germanFarms, homWeights = weights[ c( 3, 2, 1 ) ] )
Multistart 1 of 3 |Multistart 1 of 3 |Multistart 1 of 3 |Multistart 1 of 3 /Multistart 1 of 3 -Multistart 1 of 3 \Multistart 1 of 3 |Multistart 1 of 3 |Multistart 1 of 3 |Multistart 1 of 3 /Multistart 1 of 3 -Multistart 1 of 3 \Multistart 2 of 3 |Multistart 2 of 3 |Multistart 2 of 3 /Multistart 2 of 3 -Multistart 2 of 3 |Multistart 2 of 3 |Multistart 2 of 3 /Multistart 2 of 3 -Multistart 2 of 3 \Multistart 3 of 3 |Multistart 3 of 3 |Multistart 3 of 3 /Multistart 3 of 3 |Multistart 3 of 3 |Multistart 3 of 3 /Multistart 3 of 3 -                   > print( estResult2 )
$call
npregHom(yName = "qVarInput", xNames = c("pOutput", "pVarInput", 
    "pLabor", "land"), homWeights = weights[c(3, 2, 1)], data = germanFarms)

$yName
[1] "qVarInput"

$xNames
[1] "pOutput"   "pVarInput" "pLabor"    "land"     

$homWeights
      pLabor    pVarInput      pOutput 
0.0007384522 0.3269168696 0.6723446781 

$restrictGrad
[1] TRUE

$est

Regression Data: 20 training points, in 3 variable(s)
                  r_1      r_2      r_4
Bandwidth(s): 10.0002 49.45242 2.664307

Kernel Regression Estimator: Local-Constant
Bandwidth Type: Fixed

Continuous Kernel Type: Second-Order Gaussian
No. Continuous Explanatory Vars.: 3


$grad
            pOutput     pVarInput        pLabor          land
 [1,] -0.0001431217 -6.852087e-05  2.345580e-06  5.643311e-05
 [2,] -1.8535098419 -8.923042e-01  1.885732e-02  1.591393e+00
 [3,]  0.5814507173  2.805660e-01 -4.426047e-03  3.461564e+00
 [4,] -0.1435945586 -6.922074e-02  1.242719e-03  7.145107e-01
 [5,] -0.3062708617 -1.476174e-01  2.707064e-03  7.077135e-01
 [6,] -0.2302590823 -1.109878e-01  2.018723e-03  7.054657e-01
 [7,] -0.0850802771 -4.101634e-02  7.286201e-04  7.820420e-01
 [8,]  0.0716721262  3.456409e-02 -5.940001e-04  1.072261e+00
 [9,] -0.2106180848 -1.015207e-01  1.846225e-03  7.046095e-01
[10,]  0.2033745461  9.810055e-02 -1.627755e-03  1.777061e+00
[11,] -0.0105217375 -5.070191e-03  8.263268e-05  2.757342e+00
[12,] -1.3036438746 -6.294908e-01  8.824639e-03  2.951286e+00
[13,]  0.7071375667  3.415675e-01 -4.525474e-03 -8.668746e-02
[14,] -0.5843248828 -2.821516e-01  3.958738e-03  1.299766e+00
[15,] -0.7336896528 -3.542641e-01  4.996461e-03  1.714558e+00
[16,]  3.5758345981  1.728056e+00 -2.095281e-02 -3.432580e+00
[17,]  1.0842232674  5.240680e-01 -6.102479e-03 -1.678015e+00
[18,] -0.5588915550 -2.702157e-01  2.979905e-03  7.012340e-01
[19,] -2.4018395450 -1.161706e+00  1.175297e-02  3.414298e+00
[20,] -1.4227929867 -6.883427e-01  6.552256e-03  2.174872e+00

attr(,"class")
[1] "npregHom"
> all.equal( estResult2$grad[ , "pOutput" ] * germanFarms$pOutput +
+    estResult2$grad[ , "pVarInput" ] * germanFarms$pVarInput,
+    - estResult2$grad[ , "pLabor" ] * germanFarms$pLabor )
[1] TRUE
> estEla2 <- elas( estResult2 )
> print( estEla2 )
         pOutput     pVarInput        pLabor          land
1  -2.476639e-05 -1.016143e-05  3.492781e-05  2.372725e-06
2  -2.978301e-01 -1.257916e-01  4.236218e-01  6.163791e-02
3   8.855453e-02  3.779282e-02 -1.263473e-01  1.322719e-01
4  -2.088362e-02 -9.336629e-03  3.022025e-02  2.728362e-02
5  -4.650511e-02 -2.132855e-02  6.783367e-02  2.705171e-02
6  -3.530353e-02 -1.701675e-02  5.232028e-02  2.728943e-02
7  -1.406034e-02 -6.746744e-03  2.080709e-02  3.101756e-02
8   1.178416e-02  5.805961e-03 -1.759012e-02  4.262128e-02
9  -3.469534e-02 -1.733831e-02  5.203366e-02  2.720353e-02
10  3.258468e-02  1.682828e-02 -4.941296e-02  7.098077e-02
11 -1.604250e-03 -8.444631e-04  2.448713e-03  1.128892e-01
12 -1.604297e-01 -8.345293e-02  2.438826e-01  1.149551e-01
13  8.494099e-02  4.439715e-02 -1.293381e-01 -3.493951e-03
14 -7.353334e-02 -3.838206e-02  1.119154e-01  5.425437e-02
15 -9.658777e-02 -4.956898e-02  1.461568e-01  7.021609e-02
16  4.654849e-01  2.552890e-01 -7.207739e-01 -1.507408e-01
17  1.497493e-01  8.295207e-02 -2.327013e-01 -7.943152e-02
18 -7.077301e-02 -4.279942e-02  1.135724e-01  3.485996e-02
19 -2.806313e-01 -1.758533e-01  4.564846e-01  1.729711e-01
20 -1.668910e-01 -1.027208e-01  2.696118e-01  1.126466e-01
> all.equal( estEla2[[ "pOutput" ]] + estEla2[[ "pVarInput" ]],
+    - estEla2[[ "pLabor" ]] )
[1] TRUE
> estEla2Obs <- elas( estResult2, yObs = TRUE )
> print( estEla2Obs )
         pOutput     pVarInput        pLabor          land
1  -2.476641e-05 -1.016144e-05  3.492785e-05  2.372727e-06
2  -3.067489e-01 -1.295586e-01  4.363074e-01  6.348371e-02
3   9.412246e-02  4.016908e-02 -1.342915e-01  1.405887e-01
4  -2.083219e-02 -9.313636e-03  3.014583e-02  2.721643e-02
5  -4.679640e-02 -2.146214e-02  6.825854e-02  2.722115e-02
6  -3.504762e-02 -1.689340e-02  5.194102e-02  2.709162e-02
7  -1.363875e-02 -6.544445e-03  2.018319e-02  3.008751e-02
8   1.188322e-02  5.854767e-03 -1.773798e-02  4.297956e-02
9  -3.535782e-02 -1.766937e-02  5.302719e-02  2.772296e-02
10  3.279600e-02  1.693742e-02 -4.973342e-02  7.144111e-02
11 -1.537212e-03 -8.091744e-04  2.346386e-03  1.081718e-01
12 -1.616735e-01 -8.409994e-02  2.457734e-01  1.158463e-01
13  8.182427e-02  4.276809e-02 -1.245924e-01 -3.365749e-03
14 -7.107856e-02 -3.710074e-02  1.081793e-01  5.244318e-02
15 -1.008711e-01 -5.176719e-02  1.526383e-01  7.332992e-02
16  4.701343e-01  2.578389e-01 -7.279732e-01 -1.522464e-01
17  1.514261e-01  8.388096e-02 -2.353071e-01 -8.032099e-02
18 -7.112254e-02 -4.301079e-02  1.141333e-01  3.503212e-02
19 -2.826312e-01 -1.771065e-01  4.597377e-01  1.742037e-01
20 -1.647959e-01 -1.014313e-01  2.662272e-01  1.112325e-01
> all.equal( estEla2Obs[[ "pOutput" ]] + estEla2Obs[[ "pVarInput" ]],
+    - estEla2Obs[[ "pLabor" ]] )
[1] TRUE
> 
> # estimation (gradients not restricted)
> npseed( 123 )
> estResultAll <- npregHom( "qVarInput",
+    xNames = c( "pOutput", "pVarInput", "pLabor", "land" ),
+    data = germanFarms, homWeights = weights, restrictGrad = FALSE )
Multistart 1 of 4 |Multistart 1 of 4 |Multistart 1 of 4 |Multistart 1 of 4 /Multistart 1 of 4 -Multistart 1 of 4 \Multistart 1 of 4 |Multistart 1 of 4 |Multistart 1 of 4 /Multistart 1 of 4 -Multistart 1 of 4 \Multistart 2 of 4 |Multistart 2 of 4 |Multistart 2 of 4 /Multistart 2 of 4 -Multistart 2 of 4 \Multistart 2 of 4 |Multistart 2 of 4 |Multistart 2 of 4 /Multistart 3 of 4 |Multistart 3 of 4 |Multistart 3 of 4 /Multistart 3 of 4 -Multistart 3 of 4 \Multistart 3 of 4 |Multistart 3 of 4 |Multistart 3 of 4 |Multistart 4 of 4 |Multistart 4 of 4 |Multistart 4 of 4 /Multistart 4 of 4 -Multistart 4 of 4 \Multistart 4 of 4 |Multistart 4 of 4 |Multistart 4 of 4 |Multistart 4 of 4 /Multistart 4 of 4 -Multistart 4 of 4 \                   > print( estResultAll )
$call
npregHom(yName = "qVarInput", xNames = c("pOutput", "pVarInput", 
    "pLabor", "land"), homWeights = weights, data = germanFarms, 
    restrictGrad = FALSE)

$yName
[1] "qVarInput"

$xNames
[1] "pOutput"   "pVarInput" "pLabor"    "land"     

$homWeights
     pOutput    pVarInput       pLabor 
0.6723446781 0.3269168696 0.0007384522 

$restrictGrad
[1] FALSE

$est

Regression Data: 20 training points, in 4 variable(s)
                     r_1        r_2      r_3      r_4
Bandwidth(s): 0.01327776 0.01144763 26961131 2.005919

Kernel Regression Estimator: Local-Constant
Bandwidth Type: Fixed

Continuous Kernel Type: Second-Order Gaussian
No. Continuous Explanatory Vars.: 4


$grad
         pOutput  pVarInput        pLabor         land
 [1,]  0.0939884 -0.1085895 -1.079019e-05  0.015006914
 [2,] -0.8221488  0.9249881  7.599807e-05  0.149669678
 [3,] -0.2660993  0.2961550  2.221108e-05  0.007373731
 [4,]  0.2006143 -0.2144644 -1.023515e-05  0.105926837
 [5,] -0.6119407  0.6395628  2.041266e-05  0.222443288
 [6,]  3.9929961 -3.9929961 -4.434199e-17  0.353667273
 [7,]  2.6746659 -2.6857706 -8.206342e-06  0.422677215
 [8,]  5.1514846 -5.0549160  7.136404e-05  0.387649969
 [9,]  2.0117741 -1.9482035  4.697856e-05  0.582563072
[10,] -5.0880078  4.7910516 -2.194500e-04  3.049208362
[11,] -4.1202827  3.8123470 -2.275638e-04  2.419316865
[12,]  0.1622904 -0.1522030  7.454549e-06  3.376529404
[13,] -0.8737384  0.8167169 -4.213884e-05  1.127916151
[14,] -2.8188441  2.6357979 -1.352708e-04  1.843848352
[15,] -4.1127041  3.9020421 -1.556788e-04  1.181031703
[16,]  4.9915686 -4.4854527  3.740186e-04 -3.116586426
[17,]  0.7745773 -0.6907978  6.191291e-05 -2.055141307
[18,] -0.8527638  0.7075908 -1.072825e-04  1.977950723
[19,]  3.5898283 -2.9013782  5.087632e-04  3.225206300
[20,]  5.1869168 -4.2649274  6.813483e-04  2.006474330

attr(,"class")
[1] "npregHom"
> all.equal( estResultAll$grad[ , "pOutput" ] * germanFarms$pOutput +
+    estResultAll$grad[ , "pVarInput" ] * germanFarms$pVarInput,
+    - estResultAll$grad[ , "pLabor" ] * germanFarms$pLabor )
[1] TRUE
> estElaAll <- elas( estResultAll )
> print( estElaAll )
       pOutput   pVarInput        pLabor          land
1   0.01626196 -0.01610131 -1.606541e-04  0.0006308794
2  -0.13590359  0.13414725  1.756337e-03  0.0059636344
3  -0.04306796  0.04239416  6.738023e-04  0.0002994300
4   0.02919968 -0.02895058 -2.490964e-04  0.0040480653
5  -0.09314120  0.09262848  5.127242e-04  0.0085230299
6   0.60517692 -0.60517692 -1.136032e-15  0.0135237021
7   0.43624833 -0.43601704 -2.312901e-04  0.0165456444
8   0.84739721 -0.84951151  2.114307e-03  0.0154160149
9   0.33491802 -0.33625610  1.338083e-03  0.0227302148
10 -0.80777326  0.81437430 -6.601042e-03  0.1206841701
11 -0.61203894  0.61860881 -6.569869e-03  0.0964988125
12  0.01987413 -0.02007914  2.050099e-04  0.1308750672
13 -0.10433744  0.10553471 -1.197265e-03  0.0451941991
14 -0.35207619  0.35587173 -3.795534e-03  0.0763889215
15 -0.54179079  0.54634781 -4.557013e-03  0.0483994385
16  0.65702719 -0.67003692  1.300972e-02 -0.1383908228
17  0.10700903 -0.10937051  2.361476e-03 -0.0973079872
18 -0.10796880  0.11205696 -4.088169e-03  0.0983125050
19  0.42235281 -0.44225056  1.989775e-02  0.1645277789
20  0.60375831 -0.63157977  2.782146e-02  0.1031290041
> all.equal( estElaAll[[ "pOutput" ]] + estElaAll[[ "pVarInput" ]],
+    - estElaAll[[ "pLabor" ]] )
[1] TRUE
> estElaAllObs <- elas( estResultAll, yObs = TRUE )
> print( estElaAllObs )
       pOutput   pVarInput        pLabor          land
1   0.01626417 -0.01610349 -1.606759e-04  0.0006309650
2  -0.13606251  0.13430412  1.758390e-03  0.0059706082
3  -0.04307489  0.04240098  6.739107e-04  0.0002994781
4   0.02910442 -0.02885613 -2.482838e-04  0.0040348591
5  -0.09350096  0.09298626  5.147046e-04  0.0085559503
6   0.60777195 -0.60777195 -1.140904e-15  0.0135816925
7   0.42876084 -0.42853352 -2.273203e-04  0.0162616652
8   0.85411457 -0.85624564  2.131067e-03  0.0155382184
9   0.33772954 -0.33907886  1.349316e-03  0.0229210274
10 -0.82048775  0.82719269 -6.704943e-03  0.1225837600
11 -0.60196774  0.60842950 -6.461761e-03  0.0949109074
12  0.02012670 -0.02033432  2.076153e-04  0.1325383090
13 -0.10110199  0.10226213 -1.160139e-03  0.0437927501
14 -0.34289039  0.34658690 -3.696507e-03  0.0743959053
15 -0.56543387  0.57018975 -4.755875e-03  0.0505115299
16  0.65626852 -0.66926322  1.299470e-02 -0.1382310224
17  0.10817998 -0.11056730  2.387316e-03 -0.0983727815
18 -0.10851967  0.11262870 -4.109028e-03  0.0988141101
19  0.42242515 -0.44232631  1.990116e-02  0.1645559592
20  0.60077789 -0.62846201  2.768412e-02  0.1026199134
> all.equal( estElaAllObs[[ "pOutput" ]] + estElaAllObs[[ "pVarInput" ]],
+    - estElaAllObs[[ "pLabor" ]] )
[1] TRUE
> # different order of weights
> npseed( 123 )
> estResultAll2 <- npregHom( "qVarInput",
+    xNames = c( "pOutput", "pVarInput", "pLabor", "land" ),
+    data = germanFarms, homWeights = weights[ c( 3, 2, 1 ) ],
+    restrictGrad = FALSE )
Multistart 1 of 4 |Multistart 1 of 4 |Multistart 1 of 4 |Multistart 1 of 4 /Multistart 1 of 4 -Multistart 1 of 4 \Multistart 1 of 4 |Multistart 1 of 4 |Multistart 1 of 4 /Multistart 1 of 4 -Multistart 1 of 4 \Multistart 2 of 4 |Multistart 2 of 4 |Multistart 2 of 4 /Multistart 2 of 4 -Multistart 2 of 4 \Multistart 2 of 4 |Multistart 2 of 4 |Multistart 2 of 4 /Multistart 3 of 4 |Multistart 3 of 4 |Multistart 3 of 4 /Multistart 3 of 4 -Multistart 3 of 4 \Multistart 3 of 4 |Multistart 3 of 4 |Multistart 3 of 4 |Multistart 4 of 4 |Multistart 4 of 4 |Multistart 4 of 4 /Multistart 4 of 4 -Multistart 4 of 4 \Multistart 4 of 4 |Multistart 4 of 4 |Multistart 4 of 4 |Multistart 4 of 4 /Multistart 4 of 4 -Multistart 4 of 4 \                   > all.equal( estResultAll$grad, estResultAll2$grad, tolerance = 1e-6 )
[1] TRUE
> all.equal( elas( estResultAll ), elas( estResultAll2 ), tolerance = 1e-6 )
[1] TRUE
> all.equal( elas( estResultAll, yObs = TRUE ),
+    elas( estResultAll2, yObs = TRUE ), tolerance = 1e-6 )
[1] TRUE
> 
> 
> # estimation with Epanechnikov kernel (restricted gradients)
> npseed( 123 )
> estResultEpa <- npregHom( "qVarInput",
+    xNames = c( "pOutput", "pVarInput", "pLabor", "land" ),
+    data = germanFarms, homWeights = weights, ckertype="epanechnikov" )
Multistart 1 of 3 |Multistart 1 of 3 |Multistart 1 of 3 |Multistart 1 of 3 /Multistart 1 of 3 -Multistart 1 of 3 \Multistart 1 of 3 |Multistart 1 of 3 |Multistart 2 of 3 |Multistart 2 of 3 |Multistart 2 of 3 /Multistart 2 of 3 |Multistart 2 of 3 |Multistart 3 of 3 |Multistart 3 of 3 |Multistart 3 of 3 /Multistart 3 of 3 |Multistart 3 of 3 |Multistart 3 of 3 /                   > print( estResultEpa )
$call
npregHom(yName = "qVarInput", xNames = c("pOutput", "pVarInput", 
    "pLabor", "land"), homWeights = weights, data = germanFarms, 
    ckertype = "epanechnikov")

$yName
[1] "qVarInput"

$xNames
[1] "pOutput"   "pVarInput" "pLabor"    "land"     

$homWeights
     pOutput    pVarInput       pLabor 
0.6723446781 0.3269168696 0.0007384522 

$restrictGrad
[1] TRUE

$est

Regression Data: 20 training points, in 3 variable(s)
                     r_2     r_3      r_4
Bandwidth(s): 0.01630222 21.3718 1.699412

Kernel Regression Estimator: Local-Constant
Bandwidth Type: Fixed

Continuous Kernel Type: Second-Order Epanechnikov
No. Continuous Explanatory Vars.: 3


$grad
         pOutput   pVarInput        pLabor        land
 [1,] -1.1479843  0.38360640  9.520206e-03  0.09743688
 [2,] -1.1393592  0.20703786  6.850352e-03  0.10179847
 [3,] -0.0579661  0.02558467  1.885318e-04  0.01580823
 [4,]  0.7253859 -0.78116754 -5.379664e-06  0.00000000
 [5,]  0.7024502 -0.73941060  6.856645e-06  0.00000000
 [6,]  4.1006848 -4.09389991 -4.013747e-05  0.19466313
 [7,]  5.2202281 -5.23177377 -7.435267e-05  0.13285615
 [8,]  2.8646694 -2.81181253  4.447016e-05  0.24941501
 [9,]  6.9406719 -6.73454853  2.420465e-04  0.15980084
[10,] -5.5308766  5.13481083  1.754435e-04 19.43192450
[11,] -1.8379614  1.33714446  1.941260e-03 13.07239449
[12,] -0.8462923  0.44026197  1.656515e-03 22.51412880
[13,] -2.5076579  2.22867300  4.035805e-04  1.09362478
[14,] -2.5905486  2.32466529  3.456191e-04  1.42246502
[15,] -2.7339886  2.49245634  3.819714e-04  0.89794785
[16,]  0.5384236 -0.43420068 -1.727941e-04 -1.25872439
[17,]  0.5183273 -0.41341936 -1.613216e-04 -1.25872439
[18,] -4.5864638  3.67070274 -1.609359e-05  2.17238371
[19,] -2.0002821  1.25979560  1.107406e-03  6.09546189
[20,]  2.8374824 -2.52621949  1.073063e-03  3.52724720

attr(,"class")
[1] "npregHom"
> all.equal( estResultEpa$grad[ , "pOutput" ] * germanFarms$pOutput +
+    estResultEpa$grad[ , "pVarInput" ] * germanFarms$pVarInput,
+    - estResultEpa$grad[ , "pLabor" ] * germanFarms$pLabor )
[1] TRUE
> estElaEpa <- elas( estResultEpa )
> print( estElaEpa )
        pOutput    pVarInput        pLabor          land
1  -0.198347605  0.056800405  0.1415471992  0.0040904455
2  -0.188672185  0.030078910  0.1585932754  0.0040633583
3  -0.009387896  0.003664802  0.0057230948  0.0006423547
4   0.105630860 -0.105499872 -0.0001309888  0.0000000000
5   0.106927094 -0.107099334  0.0001722406  0.0000000000
6   0.622227932 -0.621198411 -0.0010295208  0.0074523642
7   0.852143470 -0.850046159 -0.0020973115  0.0052049374
8   0.471440274 -0.472758394  0.0013181197  0.0099232175
9   1.155281564 -1.162174579  0.0068930149  0.0062339981
10 -0.877652869  0.872378125  0.0052747431  0.7687163679
11 -0.270030948  0.214598716  0.0554322321  0.5157146545
12 -0.104051670  0.058313133  0.0457385375  0.8761428353
13 -0.299464200  0.287997040  0.0114671602  0.0438219918
14 -0.323567252  0.313869440  0.0096978120  0.0589323818
15 -0.358749995  0.347612880  0.0111371157  0.0366539624
16  0.071562849 -0.065493797 -0.0060690521 -0.0564385691
17  0.071597546 -0.065445309 -0.0061522379 -0.0595903397
18 -0.579047892  0.579659425 -0.0006115328  0.1076705272
19 -0.233140738  0.190234526  0.0429062120  0.3080445750
20  0.334188666 -0.378523073  0.0443344068  0.1834373701
> all.equal( estElaEpa[[ "pOutput" ]] + estElaEpa[[ "pVarInput" ]],
+    - estElaEpa[[ "pLabor" ]] )
[1] TRUE
> estElaEpaObs <- elas( estResultEpa, yObs = TRUE )
> print( estElaEpaObs )
        pOutput    pVarInput        pLabor          land
1  -0.198652313  0.056887664  0.1417646488  0.0040967294
2  -0.188559643  0.030060968  0.1584986748  0.0040609346
3  -0.009383276  0.003662998  0.0057202779  0.0006420385
4   0.105236423 -0.105105923 -0.0001304997  0.0000000000
5   0.107330276 -0.107503166  0.0001728901  0.0000000000
6   0.624163195 -0.623130472 -0.0010327228  0.0074755427
7   0.836825770 -0.834766159 -0.0020596113  0.0051113761
8   0.474961302 -0.476289267  0.0013279643  0.0099973306
9   1.165175540 -1.172127588  0.0069520475  0.0062873869
10 -0.891904384  0.886543989  0.0053603955  0.7811989494
11 -0.268523678  0.213400860  0.0551228181  0.5128360166
12 -0.104954286  0.058818981  0.0461353049  0.8837430990
13 -0.290166014  0.279054903  0.0111111116  0.0424613449
14 -0.315120022  0.305675386  0.0094446354  0.0573938595
15 -0.375881590  0.364212637  0.0116689528  0.0384043201
16  0.070789464 -0.064786001 -0.0060034633 -0.0558286330
17  0.072391269 -0.066170828 -0.0062204410 -0.0602509517
18 -0.583656974  0.584273375 -0.0006164005  0.1085275588
19 -0.235378796  0.192060702  0.0433180946  0.3110016801
20  0.328653177 -0.372253230  0.0436000532  0.1803989199
> all.equal( estElaEpaObs[[ "pOutput" ]] + estElaEpaObs[[ "pVarInput" ]],
+    - estElaEpaObs[[ "pLabor" ]] )
[1] TRUE
> 
> # estimation with Epanechnikov kernel (gradients not restricted)
> npseed( 123 )
> estResultEpaAll <- npregHom( "qVarInput",
+    xNames = c( "pOutput", "pVarInput", "pLabor", "land" ),
+    data = germanFarms, homWeights = weights, restrictGrad = FALSE,
+    ckertype="epanechnikov" )
Multistart 1 of 4 |Multistart 1 of 4 |Multistart 1 of 4 |Multistart 1 of 4 /Multistart 1 of 4 -Multistart 1 of 4 \Multistart 1 of 4 |Multistart 1 of 4 |Multistart 2 of 4 |Multistart 2 of 4 |Multistart 2 of 4 /Multistart 2 of 4 |Multistart 2 of 4 |Multistart 2 of 4 /Multistart 3 of 4 |Multistart 3 of 4 |Multistart 3 of 4 /Multistart 3 of 4 -Multistart 3 of 4 |Multistart 3 of 4 |Multistart 3 of 4 /Multistart 4 of 4 |Multistart 4 of 4 |Multistart 4 of 4 /Multistart 4 of 4 -Multistart 4 of 4 |Multistart 4 of 4 |                   > print( estResultEpaAll )
$call
npregHom(yName = "qVarInput", xNames = c("pOutput", "pVarInput", 
    "pLabor", "land"), homWeights = weights, data = germanFarms, 
    restrictGrad = FALSE, ckertype = "epanechnikov")

$yName
[1] "qVarInput"

$xNames
[1] "pOutput"   "pVarInput" "pLabor"    "land"     

$homWeights
     pOutput    pVarInput       pLabor 
0.6723446781 0.3269168696 0.0007384522 

$restrictGrad
[1] FALSE

$est

Regression Data: 20 training points, in 4 variable(s)
                     r_1        r_2      r_3      r_4
Bandwidth(s): 0.01920081 0.01536006 23.29574 1.893435

Kernel Regression Estimator: Local-Constant
Bandwidth Type: Fixed

Continuous Kernel Type: Second-Order Epanechnikov
No. Continuous Explanatory Vars.: 4


$grad
            pOutput     pVarInput        pLabor          land
 [1,]  1.618834e-14 -2.920535e-14  1.027312e-16  5.569166e-15
 [2,] -3.192879e+00  3.471247e+00  1.054569e-03  5.741285e-01
 [3,]  5.441053e-02 -7.355179e-02  5.678120e-05  6.607127e-03
 [4,] -2.462913e+00  2.491236e+00  9.116728e-04  4.304087e-01
 [5,] -2.577405e+00  2.680272e+00  1.636580e-04  3.877953e-01
 [6,]  1.501184e+00 -1.500339e+00 -4.999187e-06  2.236435e-01
 [7,]  1.332031e+00 -1.338114e+00 -9.058957e-07  2.517239e-01
 [8,]  1.918005e+00 -1.905355e+00  1.587632e-04  1.907674e+00
 [9,]  1.038416e+00 -1.033497e+00  1.932815e-04  5.344562e-01
[10,] -2.174449e+00  1.876230e+00  8.742681e-04  7.330673e+00
[11,]  2.179399e+00 -2.262303e+00  1.501787e-03  5.630944e+00
[12,]  3.914736e+00 -3.904422e+00  1.297573e-03  1.122753e+01
[13,]  1.812754e+00 -1.498263e+00 -8.048269e-04 -8.922326e-01
[14,]  4.991684e-01 -3.167516e-01 -6.978365e-04  1.422018e-01
[15,] -2.631373e-01  2.331306e-01  6.909888e-05  5.753592e-01
[16,]  4.753440e+00 -3.649283e+00 -2.315830e-03 -3.424505e+00
[17,]  2.880559e+00 -2.134956e+00 -1.571416e-03 -3.649041e+00
[18,] -8.018474e-01  5.092838e-01  5.476745e-04  2.228806e+00
[19,]  3.986757e+00 -3.575912e+00  1.943636e-03  5.249225e+00
[20,]  4.561353e+00 -3.903779e+00  1.154849e-03  2.502714e+00

attr(,"class")
[1] "npregHom"
> all.equal( estResultEpaAll$grad[ , "pOutput" ] * germanFarms$pOutput +
+    estResultEpaAll$grad[ , "pVarInput" ] * germanFarms$pVarInput,
+    - estResultEpaAll$grad[ , "pLabor" ] * germanFarms$pLabor )
[1] TRUE
> estElaEpaAll <- elas( estResultEpaAll )
> print( estElaEpaAll )
         pOutput     pVarInput        pLabor          land
1   2.801302e-15 -4.331065e-15  1.529763e-15  2.341553e-16
2  -5.202565e-01  4.962331e-01  2.402342e-02  2.254970e-02
3   8.809645e-03 -1.053283e-02  1.723186e-03  2.684019e-04
4  -3.621933e-01  3.397758e-01  2.241753e-02  1.661873e-02
5  -3.893193e-01  3.852398e-01  4.079550e-03  1.474579e-02
6   2.289361e-01 -2.288072e-01 -1.288759e-04  8.605058e-03
7   2.189730e-01 -2.189472e-01 -2.573342e-05  9.931418e-03
8   3.148623e-01 -3.195564e-01  4.694126e-03  7.570993e-02
9   1.709188e-01 -1.763618e-01  5.442934e-03  2.061731e-02
10 -3.448571e-01  3.185865e-01  2.627057e-02  2.898379e-01
11  3.248781e-01 -3.683885e-01  4.351043e-02  2.253938e-01
12  4.844506e-01 -5.205116e-01  3.606093e-02  4.397666e-01
13  2.194743e-01 -1.962899e-01 -2.318443e-02 -3.624683e-02
14  6.297715e-02 -4.319868e-02 -1.977847e-02  5.950872e-03
15 -3.456867e-02  3.255162e-02  2.017056e-03  2.351332e-02
16  6.073831e-01 -5.291861e-01 -7.819694e-02 -1.476163e-01
17  3.913318e-01 -3.323923e-01 -5.893947e-02 -1.699019e-01
18 -1.007032e-01  8.000161e-02  2.070163e-02  1.098874e-01
19  4.680851e-01 -5.439440e-01  7.585889e-02  2.672269e-01
20  5.364694e-01 -5.841162e-01  4.764676e-02  1.299738e-01
> all.equal( estElaEpaAll[[ "pOutput" ]] + estElaEpaAll[[ "pVarInput" ]],
+    - estElaEpaAll[[ "pLabor" ]] )
[1] TRUE
> estElaEpaAllObs <- elas( estResultEpaAll, yObs = TRUE )
> print( estElaEpaAllObs )
         pOutput     pVarInput        pLabor          land
1   2.801302e-15 -4.331065e-15  1.529763e-15  2.341553e-16
2  -5.284094e-01  5.040095e-01  2.439989e-02  2.290308e-02
3   8.807716e-03 -1.053053e-02  1.722809e-03  2.683432e-04
4  -3.573106e-01  3.351953e-01  2.211532e-02  1.639470e-02
5  -3.938124e-01  3.896857e-01  4.126631e-03  1.491597e-02
6   2.284945e-01 -2.283658e-01 -1.286273e-04  8.588459e-03
7   2.135305e-01 -2.135054e-01 -2.509382e-05  9.684578e-03
8   3.180047e-01 -3.227457e-01  4.740974e-03  7.646553e-02
9   1.743256e-01 -1.798770e-01  5.551424e-03  2.102826e-02
10 -3.506498e-01  3.239379e-01  2.671185e-02  2.947065e-01
11  3.184073e-01 -3.610511e-01  4.264381e-02  2.209045e-01
12  4.854922e-01 -5.216307e-01  3.613846e-02  4.407121e-01
13  2.097574e-01 -1.875994e-01 -2.215796e-02 -3.464204e-02
14  6.071994e-02 -4.165036e-02 -1.906958e-02  5.737582e-03
15 -3.617735e-02  3.406643e-02  2.110921e-03  2.460753e-02
16  6.249604e-01 -5.445005e-01 -8.045992e-02 -1.518882e-01
17  4.023081e-01 -3.417155e-01 -6.059265e-02 -1.746675e-01
18 -1.020402e-01  8.106376e-02  2.097648e-02  1.113463e-01
19  4.691329e-01 -5.451616e-01  7.602869e-02  2.678251e-01
20  5.283216e-01 -5.752447e-01  4.692311e-02  1.279998e-01
> all.equal( estElaEpaAllObs[[ "pOutput" ]] + estElaEpaAllObs[[ "pVarInput" ]],
+    - estElaEpaAllObs[[ "pLabor" ]] )
[1] TRUE
> # different order of weights
> npseed( 123 )
> estResultEpaAll2 <- npregHom( "qVarInput",
+    xNames = c( "pOutput", "pVarInput", "pLabor", "land" ),
+    data = germanFarms, homWeights = weights[ c( 3, 2, 1 ) ],
+    restrictGrad = FALSE, ckertype="epanechnikov" )
Multistart 1 of 4 |Multistart 1 of 4 |Multistart 1 of 4 |Multistart 1 of 4 /Multistart 1 of 4 -Multistart 1 of 4 \Multistart 1 of 4 |Multistart 1 of 4 |Multistart 2 of 4 |Multistart 2 of 4 |Multistart 2 of 4 /Multistart 2 of 4 |Multistart 2 of 4 |Multistart 2 of 4 /Multistart 3 of 4 |Multistart 3 of 4 |Multistart 3 of 4 /Multistart 3 of 4 -Multistart 3 of 4 |Multistart 3 of 4 |Multistart 3 of 4 /Multistart 4 of 4 |Multistart 4 of 4 |Multistart 4 of 4 /Multistart 4 of 4 -Multistart 4 of 4 |Multistart 4 of 4 |                   > all.equal( estResultEpaAll$grad, estResultEpaAll2$grad, tolerance = 1e-6 )
[1] TRUE
> all.equal( elas( estResultEpaAll ), elas( estResultEpaAll2 ), tolerance = 1e-6 )
[1] TRUE
> all.equal( elas( estResultEpaAll, yObs = TRUE ),
+    elas( estResultEpaAll2, yObs = TRUE ), tolerance = 1e-6 )
[1] TRUE
> 
> 
> # estimation with manual bandwidth selection (restricted gradients)
> estResultMan <- npregHom( "qVarInput",
+    xNames = c( "pOutput", "pVarInput", "pLabor", "land" ),
+    data = germanFarms, homWeights = weights, bws = rep( 1, 3 ),
+    bwscaling = TRUE )
> print( estResultMan )
$call
npregHom(yName = "qVarInput", xNames = c("pOutput", "pVarInput", 
    "pLabor", "land"), homWeights = weights, data = germanFarms, 
    bws = rep(1, 3), bwscaling = TRUE)

$yName
[1] "qVarInput"

$xNames
[1] "pOutput"   "pVarInput" "pLabor"    "land"     

$homWeights
     pOutput    pVarInput       pLabor 
0.6723446781 0.3269168696 0.0007384522 

$restrictGrad
[1] TRUE

$est

Regression Data: 20 training points, in 3 variable(s)
                 r_2 r_3 r_4
Scale Factor(s):   1   1   1

Kernel Regression Estimator: Local-Constant
Bandwidth Type: Fixed

Continuous Kernel Type: Second-Order Gaussian
No. Continuous Explanatory Vars.: 3


$grad
          pOutput    pVarInput        pLabor       land
 [1,] -1.57635057  0.991422639  8.444994e-03  0.9427534
 [2,] -2.83857697  2.491356228  4.669516e-03  1.4129624
 [3,] -2.07453689  2.347574461 -9.551493e-06  1.1601769
 [4,] -1.88147604  1.874236024  8.566194e-04  1.3011841
 [5,] -1.56251489  1.490158221  8.760078e-04  1.3927804
 [6,] -1.19646306  0.987039251  1.238894e-03  2.1214829
 [7,] -1.32680288  1.064882689  1.544478e-03  2.8041318
 [8,] -1.41264728  0.985799886  2.251467e-03  4.1378024
 [9,] -0.98861116  0.699349589  1.540456e-03  2.7604051
[10,] -1.67048667  0.916369858  3.638438e-03  6.6809555
[11,] -2.16768322  1.034593211  5.338201e-03  9.1186278
[12,] -1.51283979  0.366407246  4.978857e-03  8.8944021
[13,]  0.19848637 -0.405148424  1.008374e-03  3.5072734
[14,]  0.26680945 -0.330454388  4.024227e-04  3.9637744
[15,] -0.47136333  0.004351884  2.100518e-03  6.2566045
[16,]  2.08861762 -1.221672685 -2.657166e-03 -1.5072291
[17,]  2.42360642 -1.319516978 -3.301160e-03 -2.5632617
[18,] -0.07368454 -0.151801658  8.756801e-04  2.0099016
[19,] -0.83611942  0.049025389  2.324182e-03  3.9817589
[20,] -0.44418364 -0.201890752  1.998397e-03  3.7651185

attr(,"class")
[1] "npregHom"
> all.equal( estResultMan$grad[ , "pOutput" ] * germanFarms$pOutput +
+    estResultMan$grad[ , "pVarInput" ] * germanFarms$pVarInput,
+    - estResultMan$grad[ , "pLabor" ] * germanFarms$pLabor )
[1] TRUE
> estElaMan <- elas( estResultMan )
> print( estElaMan )
        pOutput     pVarInput        pLabor        land
1  -0.266847248  0.1438279694  0.1230192789  0.03877611
2  -0.455438713  0.3506955137  0.1047431995  0.05464577
3  -0.321531669  0.3218091454 -0.0002774764  0.04511535
4  -0.277237991  0.2561323163  0.0211056750  0.05034058
5  -0.238645698  0.2165662011  0.0220794972  0.05354936
6  -0.182704829  0.1507249513  0.0319798773  0.08173489
7  -0.218169851  0.1742851592  0.0438846918  0.11066171
8  -0.229500057  0.1636208083  0.0658792485  0.16251616
9  -0.161399132  0.1183713416  0.0430277902  0.10562088
10 -0.260775830  0.1531604481  0.1076153821  0.26000662
11 -0.317754199  0.1656672800  0.1520869187  0.35892371
12 -0.192929924  0.0503381482  0.1425917756  0.35901658
13  0.024487127 -0.0540861833  0.0295990566  0.14518572
14  0.034333887 -0.0459673092  0.0116334218  0.16918828
15 -0.063569443  0.0006237966  0.0629456460  0.26248587
16  0.265712392 -0.1763818449 -0.0893305472 -0.06468655
17  0.323827575 -0.2020506976 -0.1217768773 -0.11738047
18 -0.009157153 -0.0235965087  0.0327536616  0.09805791
19 -0.097981138  0.0074431633  0.0905379752  0.20231550
20 -0.052988941 -0.0306409226  0.0836298633  0.19833288
> all.equal( estElaMan[[ "pOutput" ]] + estElaMan[[ "pVarInput" ]],
+    - estElaMan[[ "pLabor" ]] )
[1] TRUE
> estElaManObs <- elas( estResultMan, yObs = TRUE )
> print( estElaManObs )
        pOutput     pVarInput        pLabor        land
1  -0.272778711  0.1470249679  0.1257537432  0.03963803
2  -0.469773762  0.3617337442  0.1080400183  0.05636576
3  -0.335816113  0.3361059168 -0.0002898037  0.04711965
4  -0.272957888  0.2521780499  0.0207798377  0.04956340
5  -0.238743138  0.2166546253  0.0220885123  0.05357123
6  -0.182113049  0.1502367545  0.0318762947  0.08147016
7  -0.212692401  0.1699094935  0.0427829070  0.10788339
8  -0.234216485  0.1669833603  0.0672331252  0.16585601
9  -0.165964557  0.1217196585  0.0442448980  0.10860854
10 -0.269381238  0.1582146286  0.1111666093  0.26858664
11 -0.316695590  0.1651153541  0.1515802362  0.35772794
12 -0.187617235  0.0489519925  0.1386652423  0.34913038
13  0.022967247 -0.0507291352  0.0277618877  0.13617426
14  0.032455287 -0.0434521792  0.0109968919  0.15993104
15 -0.064805244  0.0006359233  0.0641693204  0.26758864
16  0.274601855 -0.1822827359 -0.0923191191 -0.06685065
17  0.338488728 -0.2111984556 -0.1272902728 -0.12269482
18 -0.009376832 -0.0241625850  0.0335394165  0.10041030
19 -0.098388514  0.0074741097  0.0909144041  0.20315666
20 -0.051447849 -0.0297497841  0.0811976328  0.19256471
> all.equal( estElaManObs[[ "pOutput" ]] + estElaManObs[[ "pVarInput" ]],
+    - estElaManObs[[ "pLabor" ]] )
[1] TRUE
> # different normalized variable omitted
> estResultMan2 <- npregHom( "qVarInput",
+    xNames = c( "pOutput", "pVarInput", "pLabor", "land" ),
+    data = germanFarms, homWeights = weights[ c( 3, 2, 1 ) ],
+    bws = rep( 1, 3 ), bwscaling = TRUE )
> print( estResultMan2 )
$call
npregHom(yName = "qVarInput", xNames = c("pOutput", "pVarInput", 
    "pLabor", "land"), homWeights = weights[c(3, 2, 1)], data = germanFarms, 
    bws = rep(1, 3), bwscaling = TRUE)

$yName
[1] "qVarInput"

$xNames
[1] "pOutput"   "pVarInput" "pLabor"    "land"     

$homWeights
      pLabor    pVarInput      pOutput 
0.0007384522 0.3269168696 0.6723446781 

$restrictGrad
[1] TRUE

$est

Regression Data: 20 training points, in 3 variable(s)
                 r_1 r_2 r_4
Scale Factor(s):   1   1   1

Kernel Regression Estimator: Local-Constant
Bandwidth Type: Fixed

Continuous Kernel Type: Second-Order Gaussian
No. Continuous Explanatory Vars.: 3


$grad
         pOutput   pVarInput        pLabor        land
 [1,] -0.3346884 -0.16425801  0.0055251735  0.33621380
 [2,] -0.4521373 -0.22115739  0.0046218903  1.29140243
 [3,] -0.3296662 -0.16102865  0.0025186722  4.35090056
 [4,] -0.1987278 -0.09712347  0.0017272135  1.63559747
 [5,] -0.1973915 -0.09648024  0.0017524333  1.47173270
 [6,] -0.2028850 -0.09916195  0.0017868264  1.60810292
 [7,] -0.2385393 -0.11657709  0.0020519292  2.15194813
 [8,] -0.2846660 -0.13910014  0.0023695569  2.81273632
 [9,] -0.1843323 -0.09009408  0.0016233456  1.59472959
[10,] -0.3904939 -0.19078525  0.0031391107  3.91699187
[11,] -0.6714398 -0.32802679  0.0052983172  5.75167024
[12,] -1.3702067 -0.66902722  0.0093106917  9.79732005
[13,]  0.1310055  0.06395225 -0.0008414572  2.00652032
[14,] -0.1091054 -0.05327333  0.0007420158  4.20519692
[15,] -0.4587158 -0.22398179  0.0031357844  6.03653634
[16,]  1.1869787  0.57928217 -0.0069794947 -2.61385366
[17,]  1.1183006  0.54569804 -0.0063156941 -2.77990043
[18,]  0.2089895  0.10196293 -0.0011181149  0.09287105
[19,] -0.9947068 -0.48520235  0.0048833544  4.12096811
[20,] -0.7239911 -0.35309920  0.0033444087  3.16663946

attr(,"class")
[1] "npregHom"
> all.equal( estResultMan2$grad[ , "pOutput" ] * germanFarms$pOutput +
+    estResultMan2$grad[ , "pVarInput" ] * germanFarms$pVarInput,
+    - estResultMan2$grad[ , "pLabor" ] * germanFarms$pLabor )
[1] TRUE
> estElaMan2 <- elas( estResultMan2 )
> print( estElaMan2 )
       pOutput    pVarInput      pLabor        land
1  -0.05754522 -0.024203031  0.08174825  0.01404560
2  -0.07075465 -0.030363457  0.10111811  0.04871278
3  -0.04964070 -0.021445841  0.07108654  0.16437666
4  -0.02901872 -0.013153152  0.04217187  0.06270778
5  -0.03009263 -0.013995840  0.04408847  0.05648107
6  -0.03121997 -0.015259055  0.04647902  0.06243292
7  -0.03949584 -0.019212103  0.05870794  0.08551333
8  -0.04678445 -0.023355771  0.07014022  0.11175648
9  -0.03047852 -0.015444193  0.04592271  0.06179890
10 -0.06225251 -0.032564092  0.09481660  0.15567427
11 -0.10125263 -0.054035622  0.15528825  0.23290047
12 -0.17433694 -0.091700910  0.26603785  0.39454971
13  0.01611640  0.008513326 -0.02462972  0.08282647
14 -0.01399777 -0.007388189  0.02138596  0.17895272
15 -0.06169056 -0.032015536  0.09370609  0.25254420
16  0.15138516  0.083844903 -0.23523006 -0.11246139
17  0.15059925  0.084219036 -0.23481828 -0.12830531
18  0.02600418  0.015868949 -0.04187313  0.00453652
19 -0.11677075 -0.073794539  0.19056529  0.20975788
20 -0.08603613 -0.053383508  0.13941964  0.16616504
> all.equal( estElaMan2[[ "pOutput" ]] + estElaMan2[[ "pVarInput" ]],
+    - estElaMan2[[ "pLabor" ]] )
[1] TRUE
> estElaMan2Obs <- elas( estResultMan2, yObs = TRUE )
> print( estElaMan2Obs )
       pOutput    pVarInput      pLabor         land
1  -0.05791596 -0.024358965  0.08227493  0.014136094
2  -0.07482702 -0.032111061  0.10693808  0.051516500
3  -0.05336479 -0.023054724  0.07641951  0.176708324
4  -0.02883073 -0.013067942  0.04189867  0.062301543
5  -0.03016026 -0.014027295  0.04418755  0.056608010
6  -0.03088102 -0.015093391  0.04597441  0.061755104
7  -0.03823891 -0.018600691  0.05683960  0.082791924
8  -0.04719753 -0.023561992  0.07075952  0.112743235
9  -0.03094506 -0.015680599  0.04662566  0.062744864
10 -0.06297070 -0.032939775  0.09591048  0.157470246
11 -0.09809646 -0.052351261  0.15044772  0.225640655
12 -0.16992836 -0.089382008  0.25931037  0.384572464
13  0.01515890  0.008007540 -0.02316644  0.077905652
14 -0.01327183 -0.007005028  0.02027685  0.169671997
15 -0.06306641 -0.032729559  0.09579596  0.258176546
16  0.15605851  0.086433248 -0.24249176 -0.115933144
17  0.15618549  0.087343009 -0.24352850 -0.133064591
18  0.02659526  0.016229652 -0.04282491  0.004639635
19 -0.11704993 -0.073970970  0.19102090  0.210259375
20 -0.08385672 -0.052031234  0.13588795  0.161955856
> all.equal( estElaMan2Obs[[ "pOutput" ]] + estElaMan2Obs[[ "pVarInput" ]],
+    - estElaMan2Obs[[ "pLabor" ]] )
[1] TRUE
> 
> # estimation with manual bandwidth selection (gradients not restricted)
> estResultManAll <- npregHom( "qVarInput",
+    xNames = c( "pOutput", "pVarInput", "pLabor", "land" ),
+    data = germanFarms, homWeights = weights, restrictGrad = FALSE,
+    bws = rep( 1, 4 ), bwscaling = TRUE )
> print( estResultManAll )
$call
npregHom(yName = "qVarInput", xNames = c("pOutput", "pVarInput", 
    "pLabor", "land"), homWeights = weights, data = germanFarms, 
    restrictGrad = FALSE, bws = rep(1, 4), bwscaling = TRUE)

$yName
[1] "qVarInput"

$xNames
[1] "pOutput"   "pVarInput" "pLabor"    "land"     

$homWeights
     pOutput    pVarInput       pLabor 
0.6723446781 0.3269168696 0.0007384522 

$restrictGrad
[1] FALSE

$est

Regression Data: 20 training points, in 4 variable(s)
                 r_1 r_2 r_3 r_4
Scale Factor(s):   1   1   1   1

Kernel Regression Estimator: Local-Constant
Bandwidth Type: Fixed

Continuous Kernel Type: Second-Order Gaussian
No. Continuous Explanatory Vars.: 4


$grad
          pOutput  pVarInput        pLabor       land
 [1,]  0.34834994 -0.8642949  0.0045593069  0.5745809
 [2,] -3.70641516  3.6167963  0.0038144081  0.9491543
 [3,] -4.37417241  5.0097219 -0.0003025467  0.2530275
 [4,] -5.16944274  5.3649943  0.0011586154  0.8182849
 [5,] -3.21017620  3.2014644  0.0009928279  0.9360419
 [6,] -0.65757961  0.4535162  0.0012071827  1.9010838
 [7,] -1.06085817  0.8006586  0.0015273908  2.5305005
 [8,] -0.80729418  0.3623389  0.0024269373  4.1901877
 [9,] -0.34619642  0.0750514  0.0015686874  2.6616786
[10,] -0.33120027 -0.3093311  0.0034960514  6.1612418
[11,]  0.44466963 -1.2031047  0.0044740813  7.4517976
[12,]  1.12027668 -1.9079057  0.0041637277  7.2835521
[13,]  1.61654307 -1.6304094  0.0006208271  2.4557501
[14,]  1.43550254 -1.4436977  0.0005568663  3.3261268
[15,]  0.68875524 -1.0476392  0.0019114690  4.9280135
[16,]  3.48917364 -2.5082975 -0.0024316441 -1.3988396
[17,]  3.58501496 -2.4524342 -0.0028051517 -2.1668603
[18,]  0.08011058 -0.4176700  0.0014695915  2.4549355
[19,]  1.12577801 -1.4404042  0.0022272236  3.3025005
[20,]  1.73656548 -1.9396437  0.0020840803  3.3271347

attr(,"class")
[1] "npregHom"
> all.equal( estResultManAll$grad[ , "pOutput" ] * germanFarms$pOutput +
+    estResultManAll$grad[ , "pVarInput" ] * germanFarms$pVarInput,
+    - estResultManAll$grad[ , "pLabor" ] * germanFarms$pLabor )
[1] TRUE
> estElaManAll <- elas( estResultManAll )
> print( estElaManAll )
        pOutput   pVarInput       pLabor        land
1   0.059440297 -0.12638681  0.066946516  0.02382170
2  -0.599667073  0.51338751  0.086279565  0.03701601
3  -0.696067689  0.70509171 -0.009024023  0.01010231
4  -0.762893305  0.73430314  0.028590165  0.03170663
5  -0.487818457  0.46292099  0.024897462  0.03580691
6  -0.099928249  0.06891802  0.031010231  0.07288840
7  -0.173569097  0.13038654  0.043182559  0.09936470
8  -0.130623181  0.05989687  0.070726311  0.16390781
9  -0.056415164  0.01267969  0.043735473  0.10165533
10 -0.051614215 -0.05161237  0.103226580  0.23936927
11  0.065292779 -0.19297576  0.127682979  0.29380955
12  0.142062243 -0.26063744  0.118575192  0.29233963
13  0.198573282 -0.21671813  0.018144848  0.10121965
14  0.184348759 -0.20041411  0.016065356  0.14168198
15  0.092527878 -0.14958654  0.057058665  0.20594639
16  0.444054078 -0.36227508 -0.081778997 -0.06005692
17  0.478718872 -0.37530173 -0.103417139 -0.09916802
18  0.009969622 -0.06501436  0.055044737  0.11993687
19  0.132198931 -0.21914012  0.086941185  0.16815048
20  0.206493825 -0.29342735  0.086933527  0.17469468
> all.equal( estElaManAll[[ "pOutput" ]] + estElaManAll[[ "pVarInput" ]],
+    - estElaManAll[[ "pLabor" ]] )
[1] TRUE
> estElaManAllObs <- elas( estResultManAll, yObs = TRUE )
> print( estElaManAllObs )
       pOutput   pVarInput       pLabor        land
1   0.06028002 -0.12817231  0.067892284  0.02415823
2  -0.61339770  0.52514259  0.088255116  0.03786357
3  -0.70807012  0.71724974 -0.009179626  0.01027651
4  -0.74996447  0.72185882  0.028105644  0.03116929
5  -0.49049615  0.46546202  0.025034127  0.03600346
6  -0.10008987  0.06902948  0.031060385  0.07300629
7  -0.17006028  0.12775069  0.042309594  0.09735597
8  -0.13384913  0.06137612  0.072473009  0.16795578
9  -0.05811824  0.01306247  0.045055768  0.10472412
10 -0.05340907 -0.05340716  0.106816227  0.24769320
11  0.06496563 -0.19200886  0.127043228  0.29233743
12  0.13893290 -0.25489611  0.115963218  0.28589998
13  0.18705337 -0.20414557  0.017092203  0.09534756
14  0.17461768 -0.18983501  0.015217326  0.13420313
15  0.09469330 -0.15308731  0.058394006  0.21076615
16  0.45874053 -0.37425681 -0.084483720 -0.06204321
17  0.50069481 -0.39253023 -0.108164578 -0.10372040
18  0.01019459 -0.06648140  0.056286814  0.12264323
19  0.13247345 -0.21959517  0.087121724  0.16849965
20  0.20113879 -0.28581785  0.084679065  0.17016429
> all.equal( estElaManAllObs[[ "pOutput" ]] + estElaManAllObs[[ "pVarInput" ]],
+    - estElaManAllObs[[ "pLabor" ]] )
[1] TRUE
> # different order of weights
> estResultManAll2 <- npregHom( "qVarInput",
+    xNames = c( "pOutput", "pVarInput", "pLabor", "land" ),
+    data = germanFarms, homWeights = weights[ c( 3, 2, 1 ) ],
+    restrictGrad = FALSE, bws = rep( 1, 4 ), bwscaling = TRUE )
> all.equal( estResultManAll$grad, estResultManAll2$grad )
[1] TRUE
> all.equal( elas( estResultManAll ), elas( estResultManAll2 ) )
[1] TRUE
> all.equal( elas( estResultManAll, yObs = TRUE ),
+    elas( estResultManAll2, yObs = TRUE ) )
[1] TRUE
> 
> 
> # local-linear estimation (restricted gradients)
> npseed( 123 )
> estResultLl <- npregHom( "qVarInput",
+    xNames = c( "pOutput", "pVarInput", "pLabor", "land" ),
+    data = germanFarms, homWeights = weights, regtype = "ll" )
Multistart 1 of 3 |Multistart 1 of 3 |Multistart 1 of 3 |Multistart 1 of 3 /Multistart 1 of 3 -Multistart 1 of 3 |Multistart 1 of 3 |Multistart 2 of 3 |Multistart 2 of 3 |Multistart 2 of 3 /Multistart 2 of 3 -Multistart 2 of 3 |Multistart 2 of 3 |Multistart 2 of 3 /Multistart 3 of 3 |Multistart 3 of 3 |Multistart 3 of 3 /Multistart 3 of 3 -Multistart 3 of 3 \Multistart 3 of 3 |Multistart 3 of 3 |Multistart 3 of 3 |Multistart 3 of 3 /Multistart 3 of 3 -Multistart 3 of 3 \                   > print( estResultLl )
$call
npregHom(yName = "qVarInput", xNames = c("pOutput", "pVarInput", 
    "pLabor", "land"), homWeights = weights, data = germanFarms, 
    regtype = "ll")

$yName
[1] "qVarInput"

$xNames
[1] "pOutput"   "pVarInput" "pLabor"    "land"     

$homWeights
     pOutput    pVarInput       pLabor 
0.6723446781 0.3269168696 0.0007384522 

$restrictGrad
[1] TRUE

$est

Regression Data: 20 training points, in 3 variable(s)
                  r_2      r_3       r_4
Bandwidth(s): 6322776 26.86981 141514664

Kernel Regression Estimator: Local-Linear
Bandwidth Type: Fixed

Continuous Kernel Type: Second-Order Gaussian
No. Continuous Explanatory Vars.: 3


$grad
          pOutput   pVarInput       pLabor     land
 [1,] -0.76446444  0.08646376  0.008022607 16.75335
 [2,] -0.93577040  0.46674077  0.003764389 16.69188
 [3,]  0.98726329  0.77241020 -0.008911999 24.62731
 [4,] -0.28484449  0.81864197 -0.002837167 20.72296
 [5,] -0.41435214  0.74977688 -0.001812405 20.14118
 [6,] -0.37261014  0.73133583 -0.002122122 20.36596
 [7,] -0.20229336  0.70107436 -0.002867551 21.01374
 [8,]  0.01721476  0.71225129 -0.004135753 21.92980
 [9,] -0.35399733  0.66684507 -0.001971820 20.37073
[10,]  0.29925110  0.71513171 -0.005620558 22.95124
[11,]  0.50010325  0.73419300 -0.006699596 23.53564
[12,]  3.21487208  0.32047217 -0.015852768 29.56320
[13,]  4.52863444 -0.01565951 -0.018962260 31.31578
[14,]  3.10575232  0.31656649 -0.015348224 29.52962
[15,]  2.87498256  0.32786318 -0.014506902 29.31902
[16,]  5.80293346 -0.48688574 -0.019868376 31.12919
[17,]  5.98642013 -0.69991363 -0.018777758 30.19978
[18,]  7.15001091 -1.23736642 -0.018613895 29.55206
[19,]  8.47071170 -2.18735354 -0.016956983 30.35265
[20,]  8.27050151 -2.26356290 -0.015367106 30.47398

attr(,"class")
[1] "npregHom"
> all.equal( estResultLl$grad[ , "pOutput" ] * germanFarms$pOutput +
+    estResultLl$grad[ , "pVarInput" ] * germanFarms$pVarInput,
+    - estResultLl$grad[ , "pLabor" ] * germanFarms$pLabor )
[1] TRUE
> estElaLl <- elas( estResultLl )
> print( estElaLl )
        pOutput    pVarInput      pLabor      land
1  -0.132288032  0.012822479  0.11946555 0.7044029
2  -0.153552255  0.067193575  0.08635868 0.6602200
3   0.158281361  0.109527001 -0.26780836 0.9906296
4  -0.042559026  0.113439395 -0.07088037 0.8129447
5  -0.064370504  0.110835330 -0.04646483 0.7876703
6  -0.057645165  0.113142314 -0.05549715 0.7949328
7  -0.033107517  0.114203490 -0.08109597 0.8253896
8   0.002799114  0.118318772 -0.12111789 0.8620494
9  -0.058728656  0.114696872 -0.05596822 0.7920596
10  0.047323889  0.121082734 -0.16840662 0.9048412
11  0.073819379  0.118383883 -0.19220326 0.9328546
12  0.423943531  0.045526175 -0.46946971 1.2339196
13  0.576052849 -0.002155452 -0.57389740 1.3366122
14  0.384341840  0.042347870 -0.42668971 1.2121275
15  0.379615282  0.046012329 -0.42562761 1.2042940
16  0.784127035 -0.074664135 -0.70946290 1.4190199
17  0.806033251 -0.108000025 -0.69803323 1.3936082
18  0.890316295 -0.192718369 -0.69759793 1.4446053
19  1.004673371 -0.336113772 -0.66855960 1.5609233
20  0.959609087 -0.334131797 -0.62547729 1.5612955
> all.equal( estElaLl[[ "pOutput" ]] + estElaLl[[ "pVarInput" ]],
+    - estElaLl[[ "pLabor" ]] )
[1] TRUE
> estElaLlObs <- elas( estResultLl, yObs = TRUE )
> print( estElaLlObs )
        pOutput    pVarInput      pLabor      land
1  -0.132286325  0.012822313  0.11946401 0.7043939
2  -0.154866465  0.067768666  0.08709780 0.6658707
3   0.159813462  0.110587179 -0.27040064 1.0002185
4  -0.041324232  0.110148099 -0.06882387 0.7893582
5  -0.063310584  0.109010323 -0.04569974 0.7747006
6  -0.056714805  0.111316263 -0.05460146 0.7821030
7  -0.032428525  0.111861326 -0.07943280 0.8084619
8   0.002854201  0.120647319 -0.12350152 0.8790148
9  -0.059427824  0.116062347 -0.05663452 0.8014891
10  0.048256974  0.123470122 -0.17172710 0.9226820
11  0.073064410  0.117173141 -0.19023755 0.9233140
12  0.398697479  0.042815068 -0.44151255 1.1604391
13  0.524017170 -0.001960747 -0.52205642 1.2158741
14  0.377790536  0.041626029 -0.41941656 1.1914662
15  0.395266101  0.047909331 -0.44317543 1.2539447
16  0.762943048 -0.072647007 -0.69029604 1.3806837
17  0.836082840 -0.112026356 -0.72405648 1.4455631
18  0.909884812 -0.196954181 -0.71293063 1.4763567
19  0.996772365 -0.333470488 -0.66330188 1.5486478
20  0.957936025 -0.333549244 -0.62438678 1.5585734
> all.equal( estElaLlObs[[ "pOutput" ]] + estElaLlObs[[ "pVarInput" ]],
+    - estElaLlObs[[ "pLabor" ]] )
[1] TRUE
> 
> # local-linear estimation (gradients not restricted)
> npseed( 123 )
> estResultLlAll <- npregHom( "qVarInput",
+    xNames = c( "pOutput", "pVarInput", "pLabor", "land" ),
+    data = germanFarms, homWeights = weights, restrictGrad = FALSE,
+    regtype = "ll" )
Multistart 1 of 4 |Multistart 1 of 4 |Multistart 1 of 4 |Multistart 1 of 4 /Multistart 1 of 4 -Multistart 1 of 4 |Multistart 1 of 4 |Multistart 2 of 4 |Multistart 2 of 4 |Multistart 2 of 4 /Multistart 2 of 4 -Multistart 2 of 4 \Multistart 2 of 4 |Multistart 2 of 4 /Multistart 2 of 4 -Multistart 2 of 4 |Multistart 2 of 4 |Multistart 3 of 4 |Multistart 3 of 4 |Multistart 3 of 4 /Multistart 3 of 4 -Multistart 3 of 4 |Multistart 3 of 4 |Multistart 4 of 4 |Multistart 4 of 4 |Multistart 4 of 4 /Multistart 4 of 4 -Multistart 4 of 4 |Multistart 4 of 4 |                   > print( estResultLlAll )
$call
npregHom(yName = "qVarInput", xNames = c("pOutput", "pVarInput", 
    "pLabor", "land"), homWeights = weights, data = germanFarms, 
    restrictGrad = FALSE, regtype = "ll")

$yName
[1] "qVarInput"

$xNames
[1] "pOutput"   "pVarInput" "pLabor"    "land"     

$homWeights
     pOutput    pVarInput       pLabor 
0.6723446781 0.3269168696 0.0007384522 

$restrictGrad
[1] FALSE

$est

Regression Data: 20 training points, in 4 variable(s)
                   r_1        r_2      r_3      r_4
Bandwidth(s): 0.905207 0.01821761 30.05129 1.162764

Kernel Regression Estimator: Local-Linear
Bandwidth Type: Fixed

Continuous Kernel Type: Second-Order Gaussian
No. Continuous Explanatory Vars.: 4


$grad
            pOutput   pVarInput       pLabor       land
 [1,]     -8.118521     5.74152   0.03716458  66.766063
 [2,]    -17.328440    25.91630  -0.03868814 160.378368
 [3,]   -273.049486   221.58926   0.41114619 156.083325
 [4,]     41.094514   -27.57060  -0.09284495  35.423779
 [5,]    -33.066238    22.19056   0.07241866  17.642699
 [6,]  -1204.067484   826.43317   2.23398058  35.194938
 [7,]    108.586635  -133.11149   0.13833470  39.321938
 [8,]    441.324551  -321.91396  -0.62430305  45.535685
 [9,]   -627.638638   438.80078   1.00946568  49.855884
[10,]     27.269596   -12.61388  -0.07264786  60.437422
[11,]    161.278937  -115.51569  -0.18055646  58.888481
[12,]    126.150830   -88.10911  -0.13907754  -3.013726
[13,]    659.139619  -428.93405  -0.81953783  -1.709375
[14,]    -25.878341    21.85440   0.01003468  -4.844760
[15,]   -110.627551   156.20561  -0.24930547  -2.773115
[16,]    288.464983  -172.43596  -0.35106789  -2.002414
[17,]    -29.561126    38.26005  -0.05174379   0.362697
[18,] -84539.093044 43366.16336 100.66215313  32.667403
[19,]   -163.767434    89.06990   0.14551116  11.566124
[20,]   4113.767896 -2061.13491  -4.25187221  11.594210

attr(,"class")
[1] "npregHom"
> all.equal( estResultLlAll$grad[ , "pOutput" ] * germanFarms$pOutput +
+    estResultLlAll$grad[ , "pVarInput" ] * germanFarms$pVarInput,
+    - estResultLlAll$grad[ , "pLabor" ] * germanFarms$pLabor )
[1] TRUE
> estElaLlAll <- elas( estResultLlAll )
> print( estElaLlAll )
        pOutput    pVarInput       pLabor          land
1     -1.189719     0.721056    0.4686630    2.37727545
2     -1.098254     1.441057   -0.3428038    2.45011014
3   1629.908976 -1169.895576 -460.0133999 -233.76311061
4      6.165367    -3.836254   -2.3291137    1.39538943
5     -5.052110     3.226155    1.8259559    0.67857098
6  -3735.079048  2563.638061 1171.4409869   27.54523116
7     11.939719   -14.568122    2.6284031    1.03767953
8     68.497327   -51.045335  -17.4519921    1.70861870
9   -107.032105    77.579745   29.4523599    1.99260905
10     5.660320    -2.803254   -2.8570653    3.12744505
11    67.325014   -52.675835  -14.6491789    6.60094816
12    39.083534   -29.407021   -9.6765124   -0.29552795
13    93.715753   -65.991919  -27.7238342   -0.08154921
14    -5.731735     5.232441    0.4992938   -0.35592744
15    -7.305799    10.964129   -3.6583300   -0.05697008
16    57.874660   -39.261722  -18.6129386   -0.13552866
17    -3.003836     4.455480   -1.4516438    0.01263137
18  -860.792423   552.305059  308.4873638    0.13058078
19   -18.690855    13.170278    5.5205772    0.57236032
20 -1582.496065  1008.723192  573.7728724   -1.96941561
> all.equal( estElaLlAll[[ "pOutput" ]] + estElaLlAll[[ "pVarInput" ]],
+    - estElaLlAll[[ "pLabor" ]] )
[1] TRUE
> estElaLlAllObs <- elas( estResultLlAll, yObs = TRUE )
> print( estElaLlAllObs )
         pOutput   pVarInput       pLabor        land
1      -1.404865    0.851450    0.5534149  2.80717621
2      -2.867791    3.762930   -0.8951391  6.39779817
3     -44.199945   31.725281   12.4746642  6.33919863
4       5.961847   -3.709618   -2.2522289  1.34932717
5      -5.052328    3.226293    1.8260344  0.67860017
6    -183.270514  125.790983   57.4795310  1.35157211
7      17.406920  -21.238870    3.8319498  1.51283337
8      73.171475  -54.528587  -18.6428883  1.82521211
9    -105.365762   76.371935   28.9938273  1.96158688
10      4.397472   -2.177833   -2.2196385  2.42969503
11     23.562635  -18.435666   -5.1269689  2.31022204
12     15.644796  -11.771373   -3.8734231 -0.11829725
13     76.270338  -53.707363  -22.5629750 -0.06636862
14     -3.147898    2.873684    0.2742147 -0.19547718
15    -15.209595   22.825698   -7.6161031 -0.11860330
16     37.926051  -25.728740  -12.1973117 -0.08881377
17     -4.128603    6.123805   -1.9952021  0.01736110
18 -10758.142576 6902.682242 3855.4603337  1.63199229
19    -19.270973   13.579050    5.6919221  0.59012495
20    476.479747 -303.720295 -172.7594520  0.59297882
> all.equal( estElaLlAllObs[[ "pOutput" ]] + estElaLlAllObs[[ "pVarInput" ]],
+    - estElaLlAllObs[[ "pLabor" ]] )
[1] TRUE
> 
> 
> # local-linear estimation with Epanechnikov kernel (restricted gradients)
> npseed( 123 )
> estResultLlEpa <- npregHom( "qVarInput",
+    xNames = c( "pOutput", "pVarInput", "pLabor", "land" ),
+    data = germanFarms, homWeights = weights, ckertype="epanechnikov",
+    regtype = "ll" )
Multistart 1 of 3 |Multistart 1 of 3 |Multistart 1 of 3 |Multistart 1 of 3 /Multistart 1 of 3 -Multistart 1 of 3 |Multistart 1 of 3 |Multistart 1 of 3 /Multistart 2 of 3 |Multistart 2 of 3 |Multistart 2 of 3 /Multistart 2 of 3 -Multistart 2 of 3 |Multistart 2 of 3 |Multistart 3 of 3 |Multistart 3 of 3 |Multistart 3 of 3 /Multistart 3 of 3 -Multistart 3 of 3 |Multistart 3 of 3 |                   > print( estResultLlEpa )
$call
npregHom(yName = "qVarInput", xNames = c("pOutput", "pVarInput", 
    "pLabor", "land"), homWeights = weights, data = germanFarms, 
    ckertype = "epanechnikov", regtype = "ll")

$yName
[1] "qVarInput"

$xNames
[1] "pOutput"   "pVarInput" "pLabor"    "land"     

$homWeights
     pOutput    pVarInput       pLabor 
0.6723446781 0.3269168696 0.0007384522 

$restrictGrad
[1] TRUE

$est

Regression Data: 20 training points, in 3 variable(s)
                   r_2      r_3      r_4
Bandwidth(s): 2085.976 30.83798 4.637605

Kernel Regression Estimator: Local-Linear
Bandwidth Type: Fixed

Continuous Kernel Type: Second-Order Epanechnikov
No. Continuous Explanatory Vars.: 3


$grad
          pOutput   pVarInput        pLabor      land
 [1,]  4.48354492 -4.61325884 -6.159475e-03 112.25432
 [2,] -1.09667656  0.65696342  3.721596e-03  17.19687
 [3,]  0.32552420  0.97654434 -6.344764e-03  23.37569
 [4,] -0.42506208  0.81914014 -2.001348e-03  21.34686
 [5,] -0.70580224  0.73455485  4.145426e-05  19.98298
 [6,] -0.62006559  0.72017492 -5.922192e-04  20.37063
 [7,] -0.16420076  0.73637010 -3.291301e-03  22.31446
 [8,] -0.02777302  0.79899264 -4.378003e-03  22.60066
 [9,] -0.58187371  0.65583741 -5.732058e-04  20.38686
[10,]  0.13897504  0.84439163 -5.505062e-03  23.00013
[11,]  0.37186822  0.88079802 -6.863791e-03  23.45404
[12,]  3.26507918  0.24704296 -1.572410e-02  29.24088
[13,]  4.99672223 -0.43929008 -1.900294e-02  31.94362
[14,]  3.95976935 -0.21041463 -1.661404e-02  30.34954
[15,]  3.45602690 -0.00372427 -1.553577e-02  29.88870
[16,]  5.94515031 -0.77922398 -1.915109e-02  31.53582
[17,]  6.11531991 -1.42805585 -1.622216e-02  27.28542
[18,]  7.50520423 -3.81089262 -9.098922e-03  20.67791
[19,]  8.57007733 -3.39192581 -1.256119e-02  26.25873
[20,]  7.77475732 -2.59792310 -1.274131e-02  28.31730

attr(,"class")
[1] "npregHom"
> all.equal( estResultLlEpa$grad[ , "pOutput" ] * germanFarms$pOutput +
+    estResultLlEpa$grad[ , "pVarInput" ] * germanFarms$pVarInput,
+    - estResultLlEpa$grad[ , "pLabor" ] * germanFarms$pLabor )
[1] TRUE
> estElaLlEpa <- elas( estResultLlEpa )
> print( estElaLlEpa )
        pOutput     pVarInput      pLabor      land
1   0.775951907 -0.6842198955 -0.09173201 4.7203325
2  -0.181129361  0.0951955385  0.08593382 0.6846309
3   0.052182339  0.1384549959 -0.19063733 0.9401610
4  -0.063641967  0.1137458318 -0.05010386 0.8391715
5  -0.110014404  0.1089480841  0.00106632 0.7840954
6  -0.096129241  0.1116492669 -0.01552003 0.7967820
7  -0.026851009  0.1198538269 -0.09300282 0.8757547
8  -0.004513832  0.1326678866 -0.12815405 0.8880168
9  -0.096695800  0.1129930223 -0.01629722 0.7940184
10  0.021947240  0.1427705180 -0.16471776 0.9055133
11  0.054829315  0.1418638422 -0.19669316 0.9285784
12  0.432850782  0.0352812126 -0.46813199 1.2269475
13  0.638166285 -0.0607106794 -0.57745561 1.3689257
14  0.491933295 -0.0282571298 -0.46367617 1.2506277
15  0.458234190 -0.0005248372 -0.45770935 1.2327982
16  0.803698601 -0.1195470403 -0.68415156 1.4381900
17  0.819366325 -0.2192793637 -0.60008696 1.2529700
18  0.940506410 -0.5973283476 -0.34317806 1.0172548
19  1.020663906 -0.5233674330 -0.49729647 1.3559751
20  0.902169372 -0.3835219831 -0.51864739 1.4509302
> all.equal( estElaLlEpa[[ "pOutput" ]] + estElaLlEpa[[ "pVarInput" ]],
+    - estElaLlEpa[[ "pLabor" ]] )
[1] TRUE
> estElaLlEpaObs <- elas( estResultLlEpa, yObs = TRUE )
> print( estElaLlEpaObs )
        pOutput     pVarInput       pLabor      land
1   0.775852549 -0.6841322828 -0.091720266 4.7197281
2  -0.181495826  0.0953881401  0.086107686 0.6860160
3   0.052694302  0.1398133843 -0.192507686 0.9493850
4  -0.061666502  0.1102151277 -0.048548626 0.8131234
5  -0.107842455  0.1067971873  0.001045268 0.7686155
6  -0.094379876  0.1096174673 -0.015237591 0.7822821
7  -0.026322112  0.1174930083 -0.091170896 0.8585046
8  -0.004604758  0.1353403242 -0.130735567 0.9059048
9  -0.097682907  0.1141464966 -0.016463590 0.8021240
10  0.022410995  0.1457873230 -0.168198318 0.9246472
11  0.054329445  0.1405704923 -0.194899937 0.9201127
12  0.404923992  0.0330049293 -0.437928921 1.1477870
13  0.578180526 -0.0550040536 -0.523176472 1.2402507
14  0.481675043 -0.0276678858 -0.454007158 1.2245484
15  0.475150806 -0.0005442126 -0.474606593 1.2783094
16  0.781641065 -0.1162660677 -0.665374997 1.3987188
17  0.854085400 -0.2285709059 -0.625514495 1.3060622
18  0.955085443 -0.6065876886 -0.348497754 1.0330235
19  1.008464997 -0.5171121792 -0.491352817 1.3397685
20  0.900516143 -0.3828191772 -0.517696965 1.4482713
> all.equal( estElaLlEpaObs[[ "pOutput" ]] + estElaLlEpaObs[[ "pVarInput" ]],
+    - estElaLlEpaObs[[ "pLabor" ]] )
[1] TRUE
> 
> # local linear estimation with Epanechnikov kernel (gradients not restricted)
> npseed( 123 )
> estResultLlEpaAll <- npregHom( "qVarInput",
+    xNames = c( "pOutput", "pVarInput", "pLabor", "land" ),
+    data = germanFarms, homWeights = weights, restrictGrad = FALSE,
+    ckertype = "epanechnikov", regtype = "ll" )
Multistart 1 of 4 |Multistart 1 of 4 |Multistart 1 of 4 |Multistart 1 of 4 /Multistart 1 of 4 -Multistart 1 of 4 |Multistart 1 of 4 |Multistart 2 of 4 |Multistart 2 of 4 |Multistart 2 of 4 /Multistart 2 of 4 -Multistart 2 of 4 \Multistart 2 of 4 |Multistart 2 of 4 |Multistart 2 of 4 |Multistart 3 of 4 |Multistart 3 of 4 |Multistart 3 of 4 /Multistart 3 of 4 |Multistart 3 of 4 |Multistart 4 of 4 |Multistart 4 of 4 |Multistart 4 of 4 /Multistart 4 of 4 -Multistart 4 of 4 \Multistart 4 of 4 |Multistart 4 of 4 |Multistart 4 of 4 /                   > print( estResultLlEpaAll )
$call
npregHom(yName = "qVarInput", xNames = c("pOutput", "pVarInput", 
    "pLabor", "land"), homWeights = weights, data = germanFarms, 
    restrictGrad = FALSE, ckertype = "epanechnikov", regtype = "ll")

$yName
[1] "qVarInput"

$xNames
[1] "pOutput"   "pVarInput" "pLabor"    "land"     

$homWeights
     pOutput    pVarInput       pLabor 
0.6723446781 0.3269168696 0.0007384522 

$restrictGrad
[1] FALSE

$est

Regression Data: 20 training points, in 4 variable(s)
                     r_1        r_2      r_3      r_4
Bandwidth(s): 0.04577748 0.02870788 30.60942 3.472585

Kernel Regression Estimator: Local-Linear
Bandwidth Type: Fixed

Continuous Kernel Type: Second-Order Epanechnikov
No. Continuous Explanatory Vars.: 4


$grad
            pOutput    pVarInput       pLabor       land
 [1,]   -62.2767980   66.1985544  0.064442574 113.018334
 [2,]   253.4080369 -289.4236766  0.003671409  26.558327
 [3,]   192.8811702 -171.1032441 -0.221664417 153.373303
 [4,]    -0.3268795   -0.1512922  0.002794087   9.443167
 [5,]   283.2239314 -230.4921004 -0.387215715  16.783899
 [6,]   433.5792243 -379.5080300 -0.319870293  17.360864
 [7,]    30.4364644  -20.7019850 -0.056892473  15.219215
 [8,]   -70.9655387   50.6225304  0.106864525  18.026019
 [9,]   -47.8839634   29.0126362  0.104067790  17.726721
[10,]   -20.9618683   16.6112933  0.016767103  20.512658
[11,]    32.8695428  -21.9165403 -0.045938365  23.425018
[12,]     8.8054528   -4.2580629 -0.018783838  25.495048
[13,]  -143.2628596   95.2885660  0.168754121  24.329477
[14,]    18.3061588   -7.7023430 -0.044425509  22.490487
[15,]   -78.4163618   54.0042357  0.094589046  24.888397
[16,]   297.7728200  -96.9437387 -0.710495521  19.490528
[17,]   -10.6861845   25.0492464 -0.065272258  17.145832
[18,]   -55.8464544   29.5341179  0.062813338  30.236443
[19,]  1855.0641285 -891.4631657 -2.106095549   5.564498
[20,] -9249.0996273 4502.9387017 10.035306429  -5.789438

attr(,"class")
[1] "npregHom"
> all.equal( estResultLlEpaAll$grad[ , "pOutput" ] * germanFarms$pOutput +
+    estResultLlEpaAll$grad[ , "pVarInput" ] * germanFarms$pVarInput,
+    - estResultLlEpaAll$grad[ , "pLabor" ] * germanFarms$pLabor )
[1] TRUE
> estElaLlEpaAll <- elas( estResultLlEpaAll )
> print( estElaLlEpaAll )
        pOutput     pVarInput        pLabor       land
1  -15.80428730   14.39699130    1.40729599  6.9687324
2   -5.34649876    5.35732821   -0.01082945 -0.1350661
3   18.05003211  -14.16194170   -3.88809040  3.6011018
4   -0.05056194   -0.02170394    0.07226588  0.3835122
5   56.58461107  -43.81807399  -12.76653708  0.8441186
6   73.93472085  -64.71440209   -9.22031876  0.7469105
7    4.11691804   -2.78714986   -1.32976818  0.4940614
8    9.63587106   -7.02243996   -2.61343110 -0.5917265
9   -3.67188236    2.30654759    1.36533477  0.3185872
10  -9.70231020    8.23190072    1.47040948  2.3669474
11   5.36648520   -3.90876811   -1.45771709  1.0269596
12   1.06654844   -0.55560672   -0.51094172  0.9774079
13 -25.14271844   18.09607804    7.04664040  1.4327108
14  -3.36885497    1.53222917    1.83662580 -1.3728514
15 -10.90214247    7.98005866    2.92208382  1.0764075
16 -66.76884463   24.66918022   42.09966441 -1.4743284
17  -4.27241809   11.47729065   -7.20487256  2.3494207
18 -11.12966560    7.36203170    3.76763390  2.3655983
19 220.44047983 -137.24551391  -83.19496592  0.2867071
20 417.27138464 -258.45081928 -158.82056536  0.1153318
> all.equal( estElaLlEpaAll[[ "pOutput" ]] + estElaLlEpaAll[[ "pVarInput" ]],
+    - estElaLlEpaAll[[ "pLabor" ]] )
[1] TRUE
> estElaLlEpaAllObs <- elas( estResultLlEpaAll, yObs = TRUE )
> print( estElaLlEpaAllObs )
         pOutput     pVarInput       pLabor       land
1  -1.077665e+01    9.81704466   0.95960936  4.7518510
2   4.193807e+01  -42.02301903   0.08494649  1.0594622
3   3.122268e+01  -24.49711975  -6.72556195  6.2291333
4  -4.742251e-02   -0.02035633   0.06777884  0.3596997
5   4.327496e+01  -33.51132715  -9.76363317  0.6455677
6   6.599488e+01  -57.76472886  -8.23014964  0.6666998
7   4.879101e+00   -3.30314675  -1.57595381  0.5855290
8  -1.176606e+01    8.57488457   3.19118000  0.7225390
9  -8.038591e+00    5.04956065   2.98903034  0.6974604
10 -3.380293e+00    2.86800092   0.51229186  0.8246464
11  4.802196e+00   -3.49775861  -1.30443720  0.9189742
12  1.092022e+00   -0.56887702  -0.52314523  1.0007526
13 -1.657723e+01   11.93119919   4.64602717  0.9446222
14  2.226801e+00   -1.01279814  -1.21400324  0.9074500
15 -1.078105e+01    7.89142212   2.88962749  1.0644515
16  3.914980e+01  -14.46473358 -24.68506955  0.8644700
17 -1.492467e+00    4.00931723  -2.51685006  0.8207140
18 -7.106820e+00    4.70100685   2.40581316  1.5105468
19  2.182906e+02 -135.90699984 -82.38359053  0.2839109
20 -1.071283e+03  663.53437747 407.74838812 -0.2960973
> all.equal( estElaLlEpaAllObs[[ "pOutput" ]] + estElaLlEpaAllObs[[ "pVarInput" ]],
+    - estElaLlEpaAllObs[[ "pLabor" ]] )
[1] TRUE
> 
> 
> # local-linear estimation with manual bandwidth selection (restricted gradients)
> estResultLlMan <- npregHom( "qVarInput",
+    xNames = c( "pOutput", "pVarInput", "pLabor", "land" ),
+    data = germanFarms, homWeights = weights, bws = rep( 1, 3 ),
+    bwscaling = TRUE, regtype = "ll" )
> print( estResultLlMan )
$call
npregHom(yName = "qVarInput", xNames = c("pOutput", "pVarInput", 
    "pLabor", "land"), homWeights = weights, data = germanFarms, 
    bws = rep(1, 3), bwscaling = TRUE, regtype = "ll")

$yName
[1] "qVarInput"

$xNames
[1] "pOutput"   "pVarInput" "pLabor"    "land"     

$homWeights
     pOutput    pVarInput       pLabor 
0.6723446781 0.3269168696 0.0007384522 

$restrictGrad
[1] TRUE

$est

Regression Data: 20 training points, in 3 variable(s)
                 r_2 r_3 r_4
Scale Factor(s):   1   1   1

Kernel Regression Estimator: Local-Linear
Bandwidth Type: Fixed

Continuous Kernel Type: Second-Order Gaussian
No. Continuous Explanatory Vars.: 3


$grad
           pOutput  pVarInput        pLabor      land
 [1,] -0.930010002  0.6904991  0.0039308612 35.874703
 [2,] -1.758550304  1.7546404  0.0015674911 27.445316
 [3,] -1.014810642  2.0635746 -0.0043232489 22.849104
 [4,] -0.569253236  1.1519215 -0.0029848162 23.469961
 [5,]  0.003515428  0.5613268 -0.0032579310 24.313357
 [6,]  1.259701577 -0.2115120 -0.0062008011 27.442840
 [7,]  1.151369986 -0.1212609 -0.0059645598 27.105993
 [8,]  1.370414877 -0.2962616 -0.0059283193 27.374572
 [9,]  1.544402455 -0.4307125 -0.0064168560 28.594173
[10,]  1.096819572 -0.6177639 -0.0022980414 24.187983
[11,]  0.844312265 -0.8355097  0.0003518126 21.363702
[12,]  4.138105567 -3.5627161 -0.0013362274 20.392204
[13,]  9.363266922 -8.9327152  0.0012725261 16.732990
[14,]  8.408819923 -7.8645644  0.0004121116 16.740515
[15,]  5.412852684 -4.9436546 -0.0007132085 18.726915
[16,]  7.837912143 -5.2355075 -0.0071759032 12.842848
[17,]  3.774438782  0.6594992 -0.0164087188 11.809784
[18,]  7.644679391 -2.6813263 -0.0142566095 28.644441
[19,]  3.779844787 -3.5056967  0.0022924220 14.568927
[20,]  2.155914057 -3.6919851  0.0072437976  9.491535

attr(,"class")
[1] "npregHom"
> all.equal( estResultLlMan$grad[ , "pOutput" ] * germanFarms$pOutput +
+    estResultLlMan$grad[ , "pVarInput" ] * germanFarms$pVarInput,
+    - estResultLlMan$grad[ , "pLabor" ] * germanFarms$pLabor )
[1] TRUE
> estElaLlMan <- elas( estResultLlMan )
> print( estElaLlMan )
         pOutput   pVarInput      pLabor      land
1  -0.1609060538  0.10238173  0.05852432 1.5080972
2  -0.2919450207  0.25556391  0.03638112 1.0982752
3  -0.1629424102  0.29305268 -0.13011027 0.9204830
4  -0.0848937146  0.15932318 -0.07442947 0.9189837
5   0.0005436001  0.08259352 -0.08313712 0.9464300
6   0.1943122947 -0.03262628 -0.16168602 1.0680189
7   0.1870151836 -0.01960439 -0.16741080 1.0566664
8   0.2227033498 -0.04918704 -0.17351630 1.0754736
9   0.2576786470 -0.07450441 -0.18317424 1.1181415
10  0.1743154858 -0.10511746 -0.06919803 0.9583451
11  0.1250970110 -0.13522811  0.01013110 0.8499581
12  0.5311325396 -0.49261665 -0.03851588 0.8284315
13  1.1448316959 -1.18185115  0.03701946 0.6864912
14  1.0517817808 -1.06336178  0.01158000 0.6945427
15  0.7078694170 -0.68714463 -0.02072479 0.7618471
16  1.0286309221 -0.77976568 -0.24886524 0.5685941
17  0.5138152642  0.10288748 -0.61670274 0.5509951
18  0.9652638268 -0.42347091 -0.54179291 1.4198776
19  0.4457536011 -0.53562097  0.08986737 0.7449524
20  0.2496931636 -0.54399872  0.29430556 0.4854059
> all.equal( estElaLlMan[[ "pOutput" ]] + estElaLlMan[[ "pVarInput" ]],
+    - estElaLlMan[[ "pLabor" ]] )
[1] TRUE
> estElaLlManObs <- elas( estResultLlMan, yObs = TRUE )
> print( estElaLlManObs )
         pOutput   pVarInput       pLabor      land
1  -0.1609330657  0.10239892  0.058534148 1.5083503
2  -0.2910334301  0.25476591  0.036267516 1.0948459
3  -0.1642726950  0.29544521 -0.131172511 0.9279980
4  -0.0825852456  0.15499079 -0.072405546 0.8939943
5   0.0005371368  0.08161150 -0.082148636 0.9351771
6   0.1917385518 -0.03219413 -0.159544422 1.0538725
7   0.1845697272 -0.01934803 -0.165221693 1.0428492
8   0.2272143668 -0.05018336 -0.177031003 1.0972581
9   0.2592688403 -0.07496420 -0.184304645 1.1250418
10  0.1768721774 -0.10665922 -0.070212959 0.9724012
11  0.1233528815 -0.13334273  0.009989851 0.8381078
12  0.5131937491 -0.47597872 -0.037215026 0.8004515
13  1.0834419731 -1.11847632  0.035034350 0.6496792
14  1.0228673302 -1.03412899  0.011261655 0.6754491
15  0.7441844023 -0.72239639 -0.021788008 0.8009312
16  1.0304927005 -0.78117703 -0.249315674 0.5696232
17  0.5271503544  0.10555772 -0.632708078 0.5652951
18  0.9728345535 -0.42679227 -0.546042287 1.4310139
19  0.4447849201 -0.53445699  0.089672073 0.7433335
20  0.2497100979 -0.54403562  0.294325521 0.4854388
> all.equal( estElaLlManObs[[ "pOutput" ]] + estElaLlManObs[[ "pVarInput" ]],
+    - estElaLlManObs[[ "pLabor" ]] )
[1] TRUE
> 
> # local-linear estimation with manual bandwidth selection (gradients not restricted)
> estResultLlManAll <- npregHom( "qVarInput",
+    xNames = c( "pOutput", "pVarInput", "pLabor", "land" ),
+    data = germanFarms, homWeights = weights, restrictGrad = FALSE,
+    bws = rep( 1, 4 ), bwscaling = TRUE, regtype = "ll" )
> print( estResultLlManAll )
$call
npregHom(yName = "qVarInput", xNames = c("pOutput", "pVarInput", 
    "pLabor", "land"), homWeights = weights, data = germanFarms, 
    restrictGrad = FALSE, bws = rep(1, 4), bwscaling = TRUE, 
    regtype = "ll")

$yName
[1] "qVarInput"

$xNames
[1] "pOutput"   "pVarInput" "pLabor"    "land"     

$homWeights
     pOutput    pVarInput       pLabor 
0.6723446781 0.3269168696 0.0007384522 

$restrictGrad
[1] FALSE

$est

Regression Data: 20 training points, in 4 variable(s)
                 r_1 r_2 r_3 r_4
Scale Factor(s):   1   1   1   1

Kernel Regression Estimator: Local-Linear
Bandwidth Type: Fixed

Continuous Kernel Type: Second-Order Gaussian
No. Continuous Explanatory Vars.: 4


$grad
            pOutput   pVarInput       pLabor      land
 [1,]     65.219466   -60.28928 -0.157488466 30.599706
 [2,]   -101.873345    70.53800  0.286025210 44.095084
 [3,]    -18.215207    18.86359  0.008169127 31.871544
 [4,]    135.702825  -111.18466 -0.194880943 17.267485
 [5,]    146.451102  -795.60805  3.700058158 18.230880
 [6,]    309.033873  -224.99860 -0.497129517 26.152766
 [7,]    647.573033  -464.84331 -1.070007973 24.244263
 [8,]    -13.634566    12.92067  0.002410807 22.317823
 [9,]   -241.224221   187.79636  0.271934498 27.439964
[10,]    176.898684  -140.78273 -0.138114702 22.473657
[11,]     90.331999   -62.04140 -0.116072371 23.253247
[12,]    122.078568   -78.45161 -0.167271082 18.619813
[13,]    202.881916  -150.37755 -0.168786000 14.605070
[14,]    506.740546  -358.11831 -0.532492248 16.072769
[15,]     85.364156   -58.24589 -0.105568010 16.944240
[16,]   5016.938972 -2940.73933 -6.355836292 11.163824
[17,]   -134.981479    93.79581  0.099567185  9.897343
[18,]    770.150909  -316.22246 -1.244690054 23.935566
[19,]     -9.442197    15.30070 -0.031228581  3.199730
[20,] -19763.305157  9629.39579 21.415696259  4.757866

attr(,"class")
[1] "npregHom"
> all.equal( estResultLlManAll$grad[ , "pOutput" ] * germanFarms$pOutput +
+    estResultLlManAll$grad[ , "pVarInput" ] * germanFarms$pVarInput,
+    - estResultLlManAll$grad[ , "pLabor" ] * germanFarms$pLabor )
[1] TRUE
> estElaLlManAll <- elas( estResultLlManAll )
> print( estElaLlManAll )
        pOutput    pVarInput        pLabor        land
1     6.8663451    -5.439552   -1.42679331  0.78274786
2    -7.9338434     4.819604    3.11423962  0.82777041
3    -3.2783545     3.002773    0.27558127  1.43920409
4    15.4583162   -11.746385   -3.71193142  0.51644942
5     1.5439069    -7.980985    6.43707796  0.04838139
6    45.2212597   -32.924288  -12.29697174  0.96554264
7    90.8823566   -64.933337  -25.94901915  0.81660199
8    -2.2073230     2.137029    0.07029444  0.87348237
9   -20.7205124    16.724121    3.99639154  0.55241366
10   40.7410757   -34.714330   -6.02674616  1.29033696
11   16.1088081   -12.085789   -4.02301905  1.11348038
12   26.4940642   -18.341614   -8.15245056  1.27901478
13   19.8731687   -15.939396   -3.93377311  0.48003684
14  -48.7859756    37.269335   11.51664055 -0.51326260
15   11.2747669    -8.176556   -3.09821118  0.69619150
16 2431.7358268 -1617.633943 -814.10188407  1.82546017
17  -21.0938979    16.798084    4.29581406  0.53009344
18   50.1005487   -25.730400  -24.37014886  0.61127148
19   -0.5607636     1.177281   -0.61651772  0.08239485
20  197.5917876  -122.481666  -75.11012183 -0.02100462
> all.equal( estElaLlManAll[[ "pOutput" ]] + estElaLlManAll[[ "pVarInput" ]],
+    - estElaLlManAll[[ "pLabor" ]] )
[1] TRUE
> estElaLlManAllObs <- elas( estResultLlManAll, yObs = TRUE )
> print( estElaLlManAllObs )
        pOutput   pVarInput        pLabor      land
1     11.285866   -8.940718   -2.34514849 1.2865633
2    -16.859654   10.241802    6.61785202 1.7590368
3     -2.948591    2.700730    0.24786103 1.2944371
4     19.687286  -14.959872   -4.72741363 0.6577358
5     22.376872 -115.673732   93.29686061 0.7012237
6     47.037892  -34.246926  -12.79096683 1.0043305
7    103.808836  -74.169007  -29.63982861 0.9327498
8     -2.260607    2.188616    0.07199132 0.8945679
9    -40.495872   32.685382    7.81049025 1.0796293
10    28.526529  -24.306656   -4.21987261 0.9034822
11    13.197383   -9.901464   -3.29591879 0.9122355
12    15.139768  -10.481132   -4.65863631 0.7308802
13    23.475864  -18.828959   -4.64690483 0.5670600
14    61.641033  -47.089769  -14.55126430 0.6485068
15    11.736265   -8.511238   -3.22502697 0.7246880
16   659.604101 -438.780385 -220.82371577 0.4951529
17   -18.851951   15.012714    3.83923711 0.4737529
18    98.006650  -50.333786  -47.67286396 1.1957687
19    -1.111090    2.332650   -1.22156027 0.1632561
20 -2289.097216 1418.947840  870.14937624 0.2433382
> all.equal( estElaLlManAllObs[[ "pOutput" ]] + estElaLlManAllObs[[ "pVarInput" ]],
+    - estElaLlManAllObs[[ "pLabor" ]] )
[1] TRUE
> # different order of weights
> estResultLlManAll2 <- npregHom( "qVarInput",
+    xNames = c( "pOutput", "pVarInput", "pLabor", "land" ),
+    data = germanFarms, homWeights = weights[ c( 3, 2, 1 ) ], restrictGrad = FALSE,
+    bws = rep( 1, 4 ), bwscaling = TRUE, regtype = "ll" )
> all.equal( estResultLlManAll$grad, estResultLlManAll2$grad )
[1] TRUE
> all.equal( estResultLlManAll$est, estResultLlManAll2$est, check.attributes = FALSE )
[1] TRUE
> 
> proc.time()
   user  system elapsed 
  2.656   0.032   2.676 
