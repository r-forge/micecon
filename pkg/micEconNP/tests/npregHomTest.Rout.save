
R version 3.0.1 (2013-05-16) -- "Good Sport"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # load the micEconNP package
> library( micEconNP )
Loading required package: np
Loading required package: boot
Loading required package: cubature
Nonparametric Kernel Methods for Mixed Datatypes (version 0.50-1)
[vignette("np_faq",package="np") provides answers to frequently asked questions]
Loading required package: micEcon
Loading required package: miscTools
> options( digits = 4 )
> 
> # load data
> data( germanFarms )
> # output quantity
> germanFarms$qOutput <- germanFarms$vOutput / germanFarms$pOutput
> # quantity of variable inputs
> germanFarms$qVarInput <- germanFarms$vVarInput / germanFarms$pVarInput
> # a time trend to account for technical progress:
> germanFarms$time <- c(1:20)
> 
> # weights to impose normalize prices
> weights <- c(
+    pOutput = mean( germanFarms$qOutput ),
+    pVarInput = mean( germanFarms$qVarInput ),
+    pLabor = mean( germanFarms$qLabor ) )
> weights <- weights / sum( weights )
> 
> # estimation (restricted gradients)
> npseed( 123 )
> estResult <- npregHom( "qVarInput",
+    xNames = c( "pOutput", "pVarInput", "pLabor", "land" ),
+    data = germanFarms, homWeights = weights )
Multistart 1 of 3 |Multistart 1 of 3 |Multistart 1 of 3 |Multistart 1 of 3 /Multistart 1 of 3 -Multistart 1 of 3 \Multistart 1 of 3 |Multistart 1 of 3 /Multistart 1 of 3 |Multistart 1 of 3 |Multistart 1 of 3 /Multistart 1 of 3 -Multistart 1 of 3 \Multistart 2 of 3 |Multistart 2 of 3 |Multistart 2 of 3 /Multistart 2 of 3 -Multistart 2 of 3 |Multistart 2 of 3 |Multistart 2 of 3 /Multistart 2 of 3 -Multistart 3 of 3 |Multistart 3 of 3 |Multistart 3 of 3 /Multistart 3 of 3 -Multistart 3 of 3 \Multistart 3 of 3 |Multistart 3 of 3 |Multistart 3 of 3 /Multistart 3 of 3 -                   > print( estResult )
$call
npregHom(yName = "qVarInput", xNames = c("pOutput", "pVarInput", 
    "pLabor", "land"), homWeights = weights, data = germanFarms)

$yName
[1] "qVarInput"

$xNames
[1] "pOutput"   "pVarInput" "pLabor"    "land"     

$homWeights
  pOutput pVarInput    pLabor 
0.6723447 0.3269169 0.0007385 

$restrictGrad
[1] TRUE

$est

Regression Data: 20 training points, in 3 variable(s)
                  r_2   r_3  r_4
Bandwidth(s): 0.01664 26.67 1.59

Kernel Regression Estimator: Local-Constant
Bandwidth Type: Fixed

Continuous Kernel Type: Second-Order Gaussian
No. Continuous Explanatory Vars.: 3


$grad
      pOutput pVarInput     pLabor    land
 [1,] -2.3490     2.546  1.945e-03  0.8427
 [2,] -2.4945     2.563  1.758e-03  0.8751
 [3,] -2.2761     2.552  1.015e-04  0.2673
 [4,] -1.7079     1.867 -1.423e-04  0.1995
 [5,] -0.4717     0.482  7.956e-05  0.3087
 [6,]  2.9975    -2.995 -1.775e-05  0.6789
 [7,]  2.1748    -2.182 -1.511e-05  0.7419
 [8,]  3.9803    -3.906  5.643e-05  0.5801
 [9,]  1.7326    -1.704  1.960e-04  0.7901
[10,] -6.1168     5.570  8.101e-04  6.1365
[11,] -3.5217     2.984  1.349e-03  9.0305
[12,] -2.7541     2.175  1.832e-03  9.6006
[13,] -3.2856     2.909  5.801e-04  3.0584
[14,] -3.8458     3.498  2.866e-04  2.2558
[15,] -5.8788     5.407  5.923e-04  1.8341
[16,]  6.8292    -5.862 -6.684e-04 -3.9806
[17,]  1.7757    -1.485 -2.667e-04 -2.8689
[18,] -2.0945     1.613  2.565e-04  2.7736
[19,]  1.4899    -1.474  1.265e-03  6.3116
[20,]  3.0109    -2.702  1.215e-03  5.4040

attr(,"class")
[1] "npregHom"
> all.equal( estResult$grad[ , "pOutput" ] * germanFarms$pOutput +
+    estResult$grad[ , "pVarInput" ] * germanFarms$pVarInput,
+    - estResult$grad[ , "pLabor" ] * germanFarms$pLabor )
[1] TRUE
> estEla <- elas( estResult )
> print( estEla )
    pOutput pVarInput     pLabor      land
1  -0.40445   0.37563  0.0288135  0.035254
2  -0.41396   0.37318  0.0407864  0.035003
3  -0.36755   0.36448  0.0030717  0.010830
4  -0.24914   0.25261 -0.0034717  0.007641
5  -0.07178   0.06978  0.0019978  0.011823
6   0.45418  -0.45373 -0.0004547  0.025953
7   0.35483  -0.35440 -0.0004259  0.029052
8   0.65629  -0.65797  0.0016759  0.023125
9   0.28817  -0.29374  0.0055763  0.030798
10 -0.96935   0.94503  0.0243248  0.242435
11 -0.51945   0.48078  0.0386654  0.357669
12 -0.33833   0.28779  0.0505396  0.373288
13 -0.39181   0.37535  0.0164585  0.122375
14 -0.47886   0.47084  0.0080167  0.093168
15 -0.77439   0.75706  0.0173373  0.075158
16  0.90026  -0.87698 -0.0232859 -0.177025
17  0.24572  -0.23553 -0.0101875 -0.136062
18 -0.26552   0.25574  0.0097854  0.138033
19  0.17422  -0.22338  0.0491578  0.320007
20  0.35205  -0.40190  0.0498504  0.279015
> all.equal( estEla[[ "pOutput" ]] + estEla[[ "pVarInput" ]],
+    - estEla[[ "pLabor" ]] )
[1] TRUE
> estElaObs <- elas( estResult, yObs = TRUE )
> print( estElaObs )
    pOutput pVarInput     pLabor      land
1  -0.40649   0.37753  0.0289588  0.035431
2  -0.41283   0.37216  0.0406750  0.034908
3  -0.36845   0.36537  0.0030792  0.010857
4  -0.24777   0.25122 -0.0034527  0.007599
5  -0.07208   0.07007  0.0020062  0.011873
6   0.45625  -0.45580 -0.0004567  0.026071
7   0.34864  -0.34822 -0.0004184  0.028545
8   0.65993  -0.66161  0.0016851  0.023253
9   0.29087  -0.29650  0.0056285  0.031086
10 -0.98640   0.96165  0.0247526  0.246699
11 -0.51451   0.47621  0.0382980  0.354270
12 -0.34156   0.29054  0.0510219  0.376850
13 -0.38018   0.36421  0.0159704  0.118745
14 -0.46781   0.45998  0.0078317  0.091018
15 -0.80824   0.79015  0.0180951  0.078443
16  0.89787  -0.87464 -0.0232240 -0.176554
17  0.24800  -0.23772 -0.0102820 -0.137326
18 -0.26654   0.25672  0.0098230  0.138563
19  0.17532  -0.22479  0.0494687  0.322031
20  0.34874  -0.39812  0.0493805  0.276385
> all.equal( estElaObs[[ "pOutput" ]] + estElaObs[[ "pVarInput" ]],
+    - estElaObs[[ "pLabor" ]] )
[1] TRUE
> # different normalized variable omitted
> npseed( 123 )
> estResult2 <- npregHom( "qVarInput",
+    xNames = c( "pOutput", "pVarInput", "pLabor", "land" ),
+    data = germanFarms, homWeights = weights[ c( 3, 2, 1 ) ] )
Multistart 1 of 3 |Multistart 1 of 3 |Multistart 1 of 3 |Multistart 1 of 3 /Multistart 1 of 3 -Multistart 1 of 3 \Multistart 1 of 3 |Multistart 1 of 3 |Multistart 1 of 3 |Multistart 1 of 3 /Multistart 1 of 3 -Multistart 1 of 3 \Multistart 2 of 3 |Multistart 2 of 3 |Multistart 2 of 3 /Multistart 2 of 3 -Multistart 2 of 3 |Multistart 2 of 3 |Multistart 2 of 3 /Multistart 2 of 3 -Multistart 2 of 3 \Multistart 3 of 3 |Multistart 3 of 3 |Multistart 3 of 3 /Multistart 3 of 3 |Multistart 3 of 3 |Multistart 3 of 3 /Multistart 3 of 3 -                   > print( estResult2 )
$call
npregHom(yName = "qVarInput", xNames = c("pOutput", "pVarInput", 
    "pLabor", "land"), homWeights = weights[c(3, 2, 1)], data = germanFarms)

$yName
[1] "qVarInput"

$xNames
[1] "pOutput"   "pVarInput" "pLabor"    "land"     

$homWeights
   pLabor pVarInput   pOutput 
0.0007385 0.3269169 0.6723447 

$restrictGrad
[1] TRUE

$est

Regression Data: 20 training points, in 3 variable(s)
              r_1   r_2   r_4
Bandwidth(s):  10 49.45 2.664

Kernel Regression Estimator: Local-Constant
Bandwidth Type: Fixed

Continuous Kernel Type: Second-Order Gaussian
No. Continuous Explanatory Vars.: 3


$grad
         pOutput  pVarInput     pLabor       land
 [1,] -0.0001431 -6.852e-05  2.346e-06  5.643e-05
 [2,] -1.8535098 -8.923e-01  1.886e-02  1.591e+00
 [3,]  0.5814507  2.806e-01 -4.426e-03  3.462e+00
 [4,] -0.1435946 -6.922e-02  1.243e-03  7.145e-01
 [5,] -0.3062709 -1.476e-01  2.707e-03  7.077e-01
 [6,] -0.2302591 -1.110e-01  2.019e-03  7.055e-01
 [7,] -0.0850803 -4.102e-02  7.286e-04  7.820e-01
 [8,]  0.0716721  3.456e-02 -5.940e-04  1.072e+00
 [9,] -0.2106181 -1.015e-01  1.846e-03  7.046e-01
[10,]  0.2033745  9.810e-02 -1.628e-03  1.777e+00
[11,] -0.0105217 -5.070e-03  8.263e-05  2.757e+00
[12,] -1.3036439 -6.295e-01  8.825e-03  2.951e+00
[13,]  0.7071376  3.416e-01 -4.525e-03 -8.669e-02
[14,] -0.5843249 -2.822e-01  3.959e-03  1.300e+00
[15,] -0.7336897 -3.543e-01  4.996e-03  1.715e+00
[16,]  3.5758346  1.728e+00 -2.095e-02 -3.433e+00
[17,]  1.0842233  5.241e-01 -6.102e-03 -1.678e+00
[18,] -0.5588916 -2.702e-01  2.980e-03  7.012e-01
[19,] -2.4018395 -1.162e+00  1.175e-02  3.414e+00
[20,] -1.4227930 -6.883e-01  6.552e-03  2.175e+00

attr(,"class")
[1] "npregHom"
> all.equal( estResult2$grad[ , "pOutput" ] * germanFarms$pOutput +
+    estResult2$grad[ , "pVarInput" ] * germanFarms$pVarInput,
+    - estResult2$grad[ , "pLabor" ] * germanFarms$pLabor )
[1] TRUE
> estEla2 <- elas( estResult2 )
> print( estEla2 )
      pOutput  pVarInput     pLabor       land
1  -2.477e-05 -1.016e-05  3.493e-05  2.373e-06
2  -2.978e-01 -1.258e-01  4.236e-01  6.164e-02
3   8.855e-02  3.779e-02 -1.263e-01  1.323e-01
4  -2.088e-02 -9.337e-03  3.022e-02  2.728e-02
5  -4.651e-02 -2.133e-02  6.783e-02  2.705e-02
6  -3.530e-02 -1.702e-02  5.232e-02  2.729e-02
7  -1.406e-02 -6.747e-03  2.081e-02  3.102e-02
8   1.178e-02  5.806e-03 -1.759e-02  4.262e-02
9  -3.470e-02 -1.734e-02  5.203e-02  2.720e-02
10  3.258e-02  1.683e-02 -4.941e-02  7.098e-02
11 -1.604e-03 -8.445e-04  2.449e-03  1.129e-01
12 -1.604e-01 -8.345e-02  2.439e-01  1.150e-01
13  8.494e-02  4.440e-02 -1.293e-01 -3.494e-03
14 -7.353e-02 -3.838e-02  1.119e-01  5.425e-02
15 -9.659e-02 -4.957e-02  1.462e-01  7.022e-02
16  4.655e-01  2.553e-01 -7.208e-01 -1.507e-01
17  1.497e-01  8.295e-02 -2.327e-01 -7.943e-02
18 -7.077e-02 -4.280e-02  1.136e-01  3.486e-02
19 -2.806e-01 -1.759e-01  4.565e-01  1.730e-01
20 -1.669e-01 -1.027e-01  2.696e-01  1.126e-01
> all.equal( estEla2[[ "pOutput" ]] + estEla2[[ "pVarInput" ]],
+    - estEla2[[ "pLabor" ]] )
[1] TRUE
> estEla2Obs <- elas( estResult2, yObs = TRUE )
> print( estEla2Obs )
      pOutput  pVarInput     pLabor       land
1  -2.477e-05 -1.016e-05  3.493e-05  2.373e-06
2  -3.067e-01 -1.296e-01  4.363e-01  6.348e-02
3   9.412e-02  4.017e-02 -1.343e-01  1.406e-01
4  -2.083e-02 -9.314e-03  3.015e-02  2.722e-02
5  -4.680e-02 -2.146e-02  6.826e-02  2.722e-02
6  -3.505e-02 -1.689e-02  5.194e-02  2.709e-02
7  -1.364e-02 -6.544e-03  2.018e-02  3.009e-02
8   1.188e-02  5.855e-03 -1.774e-02  4.298e-02
9  -3.536e-02 -1.767e-02  5.303e-02  2.772e-02
10  3.280e-02  1.694e-02 -4.973e-02  7.144e-02
11 -1.537e-03 -8.092e-04  2.346e-03  1.082e-01
12 -1.617e-01 -8.410e-02  2.458e-01  1.158e-01
13  8.182e-02  4.277e-02 -1.246e-01 -3.366e-03
14 -7.108e-02 -3.710e-02  1.082e-01  5.244e-02
15 -1.009e-01 -5.177e-02  1.526e-01  7.333e-02
16  4.701e-01  2.578e-01 -7.280e-01 -1.522e-01
17  1.514e-01  8.388e-02 -2.353e-01 -8.032e-02
18 -7.112e-02 -4.301e-02  1.141e-01  3.503e-02
19 -2.826e-01 -1.771e-01  4.597e-01  1.742e-01
20 -1.648e-01 -1.014e-01  2.662e-01  1.112e-01
> all.equal( estEla2Obs[[ "pOutput" ]] + estEla2Obs[[ "pVarInput" ]],
+    - estEla2Obs[[ "pLabor" ]] )
[1] TRUE
> 
> # estimation (gradients not restricted)
> npseed( 123 )
> estResultAll <- npregHom( "qVarInput",
+    xNames = c( "pOutput", "pVarInput", "pLabor", "land" ),
+    data = germanFarms, homWeights = weights, restrictGrad = FALSE )
Multistart 1 of 4 |Multistart 1 of 4 |Multistart 1 of 4 |Multistart 1 of 4 /Multistart 1 of 4 -Multistart 1 of 4 \Multistart 1 of 4 |Multistart 1 of 4 |Multistart 1 of 4 /Multistart 1 of 4 -Multistart 1 of 4 \Multistart 2 of 4 |Multistart 2 of 4 |Multistart 2 of 4 /Multistart 2 of 4 -Multistart 2 of 4 \Multistart 2 of 4 |Multistart 2 of 4 |Multistart 2 of 4 /Multistart 3 of 4 |Multistart 3 of 4 |Multistart 3 of 4 /Multistart 3 of 4 -Multistart 3 of 4 \Multistart 3 of 4 |Multistart 3 of 4 |Multistart 3 of 4 |Multistart 4 of 4 |Multistart 4 of 4 |Multistart 4 of 4 /Multistart 4 of 4 -Multistart 4 of 4 \Multistart 4 of 4 |Multistart 4 of 4 |Multistart 4 of 4 |Multistart 4 of 4 /Multistart 4 of 4 -Multistart 4 of 4 \                   > print( estResultAll )
$call
npregHom(yName = "qVarInput", xNames = c("pOutput", "pVarInput", 
    "pLabor", "land"), homWeights = weights, data = germanFarms, 
    restrictGrad = FALSE)

$yName
[1] "qVarInput"

$xNames
[1] "pOutput"   "pVarInput" "pLabor"    "land"     

$homWeights
  pOutput pVarInput    pLabor 
0.6723447 0.3269169 0.0007385 

$restrictGrad
[1] FALSE

$est

Regression Data: 20 training points, in 4 variable(s)
                  r_1     r_2      r_3   r_4
Bandwidth(s): 0.01328 0.01145 26961131 2.006

Kernel Regression Estimator: Local-Constant
Bandwidth Type: Fixed

Continuous Kernel Type: Second-Order Gaussian
No. Continuous Explanatory Vars.: 4


$grad
       pOutput pVarInput     pLabor      land
 [1,]  0.09399   -0.1086 -1.079e-05  0.015007
 [2,] -0.82215    0.9250  7.600e-05  0.149670
 [3,] -0.26610    0.2962  2.221e-05  0.007374
 [4,]  0.20061   -0.2145 -1.024e-05  0.105927
 [5,] -0.61194    0.6396  2.041e-05  0.222443
 [6,]  3.99300   -3.9930 -4.434e-17  0.353667
 [7,]  2.67467   -2.6858 -8.206e-06  0.422677
 [8,]  5.15148   -5.0549  7.136e-05  0.387650
 [9,]  2.01177   -1.9482  4.698e-05  0.582563
[10,] -5.08801    4.7911 -2.195e-04  3.049208
[11,] -4.12028    3.8123 -2.276e-04  2.419317
[12,]  0.16229   -0.1522  7.455e-06  3.376529
[13,] -0.87374    0.8167 -4.214e-05  1.127916
[14,] -2.81884    2.6358 -1.353e-04  1.843848
[15,] -4.11270    3.9020 -1.557e-04  1.181032
[16,]  4.99157   -4.4855  3.740e-04 -3.116586
[17,]  0.77458   -0.6908  6.191e-05 -2.055141
[18,] -0.85276    0.7076 -1.073e-04  1.977951
[19,]  3.58983   -2.9014  5.088e-04  3.225206
[20,]  5.18692   -4.2649  6.813e-04  2.006474

attr(,"class")
[1] "npregHom"
> all.equal( estResultAll$grad[ , "pOutput" ] * germanFarms$pOutput +
+    estResultAll$grad[ , "pVarInput" ] * germanFarms$pVarInput,
+    - estResultAll$grad[ , "pLabor" ] * germanFarms$pLabor )
[1] TRUE
> estElaAll <- elas( estResultAll )
> print( estElaAll )
    pOutput pVarInput     pLabor       land
1   0.01626  -0.01610 -1.607e-04  0.0006309
2  -0.13590   0.13415  1.756e-03  0.0059636
3  -0.04307   0.04239  6.738e-04  0.0002994
4   0.02920  -0.02895 -2.491e-04  0.0040481
5  -0.09314   0.09263  5.127e-04  0.0085230
6   0.60518  -0.60518 -1.136e-15  0.0135237
7   0.43625  -0.43602 -2.313e-04  0.0165456
8   0.84740  -0.84951  2.114e-03  0.0154160
9   0.33492  -0.33626  1.338e-03  0.0227302
10 -0.80777   0.81437 -6.601e-03  0.1206842
11 -0.61204   0.61861 -6.570e-03  0.0964988
12  0.01987  -0.02008  2.050e-04  0.1308751
13 -0.10434   0.10553 -1.197e-03  0.0451942
14 -0.35208   0.35587 -3.796e-03  0.0763889
15 -0.54179   0.54635 -4.557e-03  0.0483994
16  0.65703  -0.67004  1.301e-02 -0.1383908
17  0.10701  -0.10937  2.361e-03 -0.0973080
18 -0.10797   0.11206 -4.088e-03  0.0983125
19  0.42235  -0.44225  1.990e-02  0.1645278
20  0.60376  -0.63158  2.782e-02  0.1031290
> all.equal( estElaAll[[ "pOutput" ]] + estElaAll[[ "pVarInput" ]],
+    - estElaAll[[ "pLabor" ]] )
[1] TRUE
> estElaAllObs <- elas( estResultAll, yObs = TRUE )
> print( estElaAllObs )
    pOutput pVarInput     pLabor       land
1   0.01626  -0.01610 -1.607e-04  0.0006310
2  -0.13606   0.13430  1.758e-03  0.0059706
3  -0.04307   0.04240  6.739e-04  0.0002995
4   0.02910  -0.02886 -2.483e-04  0.0040349
5  -0.09350   0.09299  5.147e-04  0.0085560
6   0.60777  -0.60777 -1.141e-15  0.0135817
7   0.42876  -0.42853 -2.273e-04  0.0162617
8   0.85411  -0.85625  2.131e-03  0.0155382
9   0.33773  -0.33908  1.349e-03  0.0229210
10 -0.82049   0.82719 -6.705e-03  0.1225838
11 -0.60197   0.60843 -6.462e-03  0.0949109
12  0.02013  -0.02033  2.076e-04  0.1325383
13 -0.10110   0.10226 -1.160e-03  0.0437928
14 -0.34289   0.34659 -3.697e-03  0.0743959
15 -0.56543   0.57019 -4.756e-03  0.0505115
16  0.65627  -0.66926  1.299e-02 -0.1382310
17  0.10818  -0.11057  2.387e-03 -0.0983728
18 -0.10852   0.11263 -4.109e-03  0.0988141
19  0.42243  -0.44233  1.990e-02  0.1645560
20  0.60078  -0.62846  2.768e-02  0.1026199
> all.equal( estElaAllObs[[ "pOutput" ]] + estElaAllObs[[ "pVarInput" ]],
+    - estElaAllObs[[ "pLabor" ]] )
[1] TRUE
> # different order of weights
> npseed( 123 )
> estResultAll2 <- npregHom( "qVarInput",
+    xNames = c( "pOutput", "pVarInput", "pLabor", "land" ),
+    data = germanFarms, homWeights = weights[ c( 3, 2, 1 ) ],
+    restrictGrad = FALSE )
Multistart 1 of 4 |Multistart 1 of 4 |Multistart 1 of 4 |Multistart 1 of 4 /Multistart 1 of 4 -Multistart 1 of 4 \Multistart 1 of 4 |Multistart 1 of 4 |Multistart 1 of 4 /Multistart 1 of 4 -Multistart 1 of 4 \Multistart 2 of 4 |Multistart 2 of 4 |Multistart 2 of 4 /Multistart 2 of 4 -Multistart 2 of 4 \Multistart 2 of 4 |Multistart 2 of 4 |Multistart 2 of 4 /Multistart 3 of 4 |Multistart 3 of 4 |Multistart 3 of 4 /Multistart 3 of 4 -Multistart 3 of 4 \Multistart 3 of 4 |Multistart 3 of 4 |Multistart 3 of 4 |Multistart 4 of 4 |Multistart 4 of 4 |Multistart 4 of 4 /Multistart 4 of 4 -Multistart 4 of 4 \Multistart 4 of 4 |Multistart 4 of 4 |Multistart 4 of 4 |Multistart 4 of 4 /Multistart 4 of 4 -Multistart 4 of 4 \                   > all.equal( estResultAll$grad, estResultAll2$grad, tolerance = 1e-6 )
[1] TRUE
> all.equal( elas( estResultAll ), elas( estResultAll2 ), tolerance = 1e-6 )
[1] TRUE
> all.equal( elas( estResultAll, yObs = TRUE ),
+    elas( estResultAll2, yObs = TRUE ), tolerance = 1e-6 )
[1] TRUE
> 
> 
> # estimation with Epanechnikov kernel (restricted gradients)
> npseed( 123 )
> estResultEpa <- npregHom( "qVarInput",
+    xNames = c( "pOutput", "pVarInput", "pLabor", "land" ),
+    data = germanFarms, homWeights = weights, ckertype="epanechnikov" )
Multistart 1 of 3 |Multistart 1 of 3 |Multistart 1 of 3 |Multistart 1 of 3 /Multistart 1 of 3 -Multistart 1 of 3 \Multistart 1 of 3 |Multistart 1 of 3 |Multistart 2 of 3 |Multistart 2 of 3 |Multistart 2 of 3 /Multistart 2 of 3 |Multistart 2 of 3 |Multistart 3 of 3 |Multistart 3 of 3 |Multistart 3 of 3 /Multistart 3 of 3 |Multistart 3 of 3 |Multistart 3 of 3 /                   > print( estResultEpa )
$call
npregHom(yName = "qVarInput", xNames = c("pOutput", "pVarInput", 
    "pLabor", "land"), homWeights = weights, data = germanFarms, 
    ckertype = "epanechnikov")

$yName
[1] "qVarInput"

$xNames
[1] "pOutput"   "pVarInput" "pLabor"    "land"     

$homWeights
  pOutput pVarInput    pLabor 
0.6723447 0.3269169 0.0007385 

$restrictGrad
[1] TRUE

$est

Regression Data: 20 training points, in 3 variable(s)
                 r_2   r_3   r_4
Bandwidth(s): 0.0163 21.37 1.699

Kernel Regression Estimator: Local-Constant
Bandwidth Type: Fixed

Continuous Kernel Type: Second-Order Epanechnikov
No. Continuous Explanatory Vars.: 3


$grad
       pOutput pVarInput     pLabor     land
 [1,] -1.14798   0.38361  9.520e-03  0.09744
 [2,] -1.13936   0.20704  6.850e-03  0.10180
 [3,] -0.05797   0.02558  1.885e-04  0.01581
 [4,]  0.72539  -0.78117 -5.380e-06  0.00000
 [5,]  0.70245  -0.73941  6.857e-06  0.00000
 [6,]  4.10068  -4.09390 -4.014e-05  0.19466
 [7,]  5.22023  -5.23177 -7.435e-05  0.13286
 [8,]  2.86467  -2.81181  4.447e-05  0.24942
 [9,]  6.94067  -6.73455  2.420e-04  0.15980
[10,] -5.53088   5.13481  1.754e-04 19.43192
[11,] -1.83796   1.33714  1.941e-03 13.07239
[12,] -0.84629   0.44026  1.657e-03 22.51413
[13,] -2.50766   2.22867  4.036e-04  1.09362
[14,] -2.59055   2.32467  3.456e-04  1.42247
[15,] -2.73399   2.49246  3.820e-04  0.89795
[16,]  0.53842  -0.43420 -1.728e-04 -1.25872
[17,]  0.51833  -0.41342 -1.613e-04 -1.25872
[18,] -4.58646   3.67070 -1.609e-05  2.17238
[19,] -2.00028   1.25980  1.107e-03  6.09546
[20,]  2.83748  -2.52622  1.073e-03  3.52725

attr(,"class")
[1] "npregHom"
> all.equal( estResultEpa$grad[ , "pOutput" ] * germanFarms$pOutput +
+    estResultEpa$grad[ , "pVarInput" ] * germanFarms$pVarInput,
+    - estResultEpa$grad[ , "pLabor" ] * germanFarms$pLabor )
[1] TRUE
> estElaEpa <- elas( estResultEpa )
> print( estElaEpa )
     pOutput pVarInput     pLabor       land
1  -0.198348  0.056800  0.1415472  0.0040904
2  -0.188672  0.030079  0.1585933  0.0040634
3  -0.009388  0.003665  0.0057231  0.0006424
4   0.105631 -0.105500 -0.0001310  0.0000000
5   0.106927 -0.107099  0.0001722  0.0000000
6   0.622228 -0.621198 -0.0010295  0.0074524
7   0.852143 -0.850046 -0.0020973  0.0052049
8   0.471440 -0.472758  0.0013181  0.0099232
9   1.155282 -1.162175  0.0068930  0.0062340
10 -0.877653  0.872378  0.0052747  0.7687164
11 -0.270031  0.214599  0.0554322  0.5157147
12 -0.104052  0.058313  0.0457385  0.8761428
13 -0.299464  0.287997  0.0114672  0.0438220
14 -0.323567  0.313869  0.0096978  0.0589324
15 -0.358750  0.347613  0.0111371  0.0366540
16  0.071563 -0.065494 -0.0060691 -0.0564386
17  0.071598 -0.065445 -0.0061522 -0.0595903
18 -0.579048  0.579659 -0.0006115  0.1076705
19 -0.233141  0.190235  0.0429062  0.3080446
20  0.334189 -0.378523  0.0443344  0.1834374
> all.equal( estElaEpa[[ "pOutput" ]] + estElaEpa[[ "pVarInput" ]],
+    - estElaEpa[[ "pLabor" ]] )
[1] TRUE
> estElaEpaObs <- elas( estResultEpa, yObs = TRUE )
> print( estElaEpaObs )
     pOutput pVarInput     pLabor      land
1  -0.198652  0.056888  0.1417646  0.004097
2  -0.188560  0.030061  0.1584987  0.004061
3  -0.009383  0.003663  0.0057203  0.000642
4   0.105236 -0.105106 -0.0001305  0.000000
5   0.107330 -0.107503  0.0001729  0.000000
6   0.624163 -0.623130 -0.0010327  0.007476
7   0.836826 -0.834766 -0.0020596  0.005111
8   0.474961 -0.476289  0.0013280  0.009997
9   1.165176 -1.172128  0.0069520  0.006287
10 -0.891904  0.886544  0.0053604  0.781199
11 -0.268524  0.213401  0.0551228  0.512836
12 -0.104954  0.058819  0.0461353  0.883743
13 -0.290166  0.279055  0.0111111  0.042461
14 -0.315120  0.305675  0.0094446  0.057394
15 -0.375882  0.364213  0.0116690  0.038404
16  0.070789 -0.064786 -0.0060035 -0.055829
17  0.072391 -0.066171 -0.0062204 -0.060251
18 -0.583657  0.584273 -0.0006164  0.108528
19 -0.235379  0.192061  0.0433181  0.311002
20  0.328653 -0.372253  0.0436001  0.180399
> all.equal( estElaEpaObs[[ "pOutput" ]] + estElaEpaObs[[ "pVarInput" ]],
+    - estElaEpaObs[[ "pLabor" ]] )
[1] TRUE
> 
> # estimation with Epanechnikov kernel (gradients not restricted)
> npseed( 123 )
> estResultEpaAll <- npregHom( "qVarInput",
+    xNames = c( "pOutput", "pVarInput", "pLabor", "land" ),
+    data = germanFarms, homWeights = weights, restrictGrad = FALSE,
+    ckertype="epanechnikov" )
Multistart 1 of 4 |Multistart 1 of 4 |Multistart 1 of 4 |Multistart 1 of 4 /Multistart 1 of 4 -Multistart 1 of 4 \Multistart 1 of 4 |Multistart 1 of 4 |Multistart 2 of 4 |Multistart 2 of 4 |Multistart 2 of 4 /Multistart 2 of 4 |Multistart 2 of 4 |Multistart 2 of 4 /Multistart 3 of 4 |Multistart 3 of 4 |Multistart 3 of 4 /Multistart 3 of 4 -Multistart 3 of 4 |Multistart 3 of 4 |Multistart 3 of 4 /Multistart 4 of 4 |Multistart 4 of 4 |Multistart 4 of 4 /Multistart 4 of 4 -Multistart 4 of 4 |Multistart 4 of 4 |                   > print( estResultEpaAll )
$call
npregHom(yName = "qVarInput", xNames = c("pOutput", "pVarInput", 
    "pLabor", "land"), homWeights = weights, data = germanFarms, 
    restrictGrad = FALSE, ckertype = "epanechnikov")

$yName
[1] "qVarInput"

$xNames
[1] "pOutput"   "pVarInput" "pLabor"    "land"     

$homWeights
  pOutput pVarInput    pLabor 
0.6723447 0.3269169 0.0007385 

$restrictGrad
[1] FALSE

$est

Regression Data: 20 training points, in 4 variable(s)
                 r_1     r_2  r_3   r_4
Bandwidth(s): 0.0192 0.01536 23.3 1.893

Kernel Regression Estimator: Local-Constant
Bandwidth Type: Fixed

Continuous Kernel Type: Second-Order Epanechnikov
No. Continuous Explanatory Vars.: 4


$grad
         pOutput  pVarInput     pLabor       land
 [1,]  1.619e-14 -2.921e-14  1.027e-16  5.569e-15
 [2,] -3.193e+00  3.471e+00  1.055e-03  5.741e-01
 [3,]  5.441e-02 -7.355e-02  5.678e-05  6.607e-03
 [4,] -2.463e+00  2.491e+00  9.117e-04  4.304e-01
 [5,] -2.577e+00  2.680e+00  1.637e-04  3.878e-01
 [6,]  1.501e+00 -1.500e+00 -4.999e-06  2.236e-01
 [7,]  1.332e+00 -1.338e+00 -9.059e-07  2.517e-01
 [8,]  1.918e+00 -1.905e+00  1.588e-04  1.908e+00
 [9,]  1.038e+00 -1.033e+00  1.933e-04  5.345e-01
[10,] -2.174e+00  1.876e+00  8.743e-04  7.331e+00
[11,]  2.179e+00 -2.262e+00  1.502e-03  5.631e+00
[12,]  3.915e+00 -3.904e+00  1.298e-03  1.123e+01
[13,]  1.813e+00 -1.498e+00 -8.048e-04 -8.922e-01
[14,]  4.992e-01 -3.168e-01 -6.978e-04  1.422e-01
[15,] -2.631e-01  2.331e-01  6.910e-05  5.754e-01
[16,]  4.753e+00 -3.649e+00 -2.316e-03 -3.425e+00
[17,]  2.881e+00 -2.135e+00 -1.571e-03 -3.649e+00
[18,] -8.018e-01  5.093e-01  5.477e-04  2.229e+00
[19,]  3.987e+00 -3.576e+00  1.944e-03  5.249e+00
[20,]  4.561e+00 -3.904e+00  1.155e-03  2.503e+00

attr(,"class")
[1] "npregHom"
> all.equal( estResultEpaAll$grad[ , "pOutput" ] * germanFarms$pOutput +
+    estResultEpaAll$grad[ , "pVarInput" ] * germanFarms$pVarInput,
+    - estResultEpaAll$grad[ , "pLabor" ] * germanFarms$pLabor )
[1] TRUE
> estElaEpaAll <- elas( estResultEpaAll )
> print( estElaEpaAll )
      pOutput  pVarInput     pLabor       land
1   2.801e-15 -4.331e-15  1.530e-15  2.342e-16
2  -5.203e-01  4.962e-01  2.402e-02  2.255e-02
3   8.810e-03 -1.053e-02  1.723e-03  2.684e-04
4  -3.622e-01  3.398e-01  2.242e-02  1.662e-02
5  -3.893e-01  3.852e-01  4.080e-03  1.475e-02
6   2.289e-01 -2.288e-01 -1.289e-04  8.605e-03
7   2.190e-01 -2.189e-01 -2.573e-05  9.931e-03
8   3.149e-01 -3.196e-01  4.694e-03  7.571e-02
9   1.709e-01 -1.764e-01  5.443e-03  2.062e-02
10 -3.449e-01  3.186e-01  2.627e-02  2.898e-01
11  3.249e-01 -3.684e-01  4.351e-02  2.254e-01
12  4.845e-01 -5.205e-01  3.606e-02  4.398e-01
13  2.195e-01 -1.963e-01 -2.318e-02 -3.625e-02
14  6.298e-02 -4.320e-02 -1.978e-02  5.951e-03
15 -3.457e-02  3.255e-02  2.017e-03  2.351e-02
16  6.074e-01 -5.292e-01 -7.820e-02 -1.476e-01
17  3.913e-01 -3.324e-01 -5.894e-02 -1.699e-01
18 -1.007e-01  8.000e-02  2.070e-02  1.099e-01
19  4.681e-01 -5.439e-01  7.586e-02  2.672e-01
20  5.365e-01 -5.841e-01  4.765e-02  1.300e-01
> all.equal( estElaEpaAll[[ "pOutput" ]] + estElaEpaAll[[ "pVarInput" ]],
+    - estElaEpaAll[[ "pLabor" ]] )
[1] TRUE
> estElaEpaAllObs <- elas( estResultEpaAll, yObs = TRUE )
> print( estElaEpaAllObs )
      pOutput  pVarInput     pLabor       land
1   2.801e-15 -4.331e-15  1.530e-15  2.342e-16
2  -5.284e-01  5.040e-01  2.440e-02  2.290e-02
3   8.808e-03 -1.053e-02  1.723e-03  2.683e-04
4  -3.573e-01  3.352e-01  2.212e-02  1.639e-02
5  -3.938e-01  3.897e-01  4.127e-03  1.492e-02
6   2.285e-01 -2.284e-01 -1.286e-04  8.588e-03
7   2.135e-01 -2.135e-01 -2.509e-05  9.685e-03
8   3.180e-01 -3.227e-01  4.741e-03  7.647e-02
9   1.743e-01 -1.799e-01  5.551e-03  2.103e-02
10 -3.506e-01  3.239e-01  2.671e-02  2.947e-01
11  3.184e-01 -3.611e-01  4.264e-02  2.209e-01
12  4.855e-01 -5.216e-01  3.614e-02  4.407e-01
13  2.098e-01 -1.876e-01 -2.216e-02 -3.464e-02
14  6.072e-02 -4.165e-02 -1.907e-02  5.738e-03
15 -3.618e-02  3.407e-02  2.111e-03  2.461e-02
16  6.250e-01 -5.445e-01 -8.046e-02 -1.519e-01
17  4.023e-01 -3.417e-01 -6.059e-02 -1.747e-01
18 -1.020e-01  8.106e-02  2.098e-02  1.113e-01
19  4.691e-01 -5.452e-01  7.603e-02  2.678e-01
20  5.283e-01 -5.752e-01  4.692e-02  1.280e-01
> all.equal( estElaEpaAllObs[[ "pOutput" ]] + estElaEpaAllObs[[ "pVarInput" ]],
+    - estElaEpaAllObs[[ "pLabor" ]] )
[1] TRUE
> # different order of weights
> npseed( 123 )
> estResultEpaAll2 <- npregHom( "qVarInput",
+    xNames = c( "pOutput", "pVarInput", "pLabor", "land" ),
+    data = germanFarms, homWeights = weights[ c( 3, 2, 1 ) ],
+    restrictGrad = FALSE, ckertype="epanechnikov" )
Multistart 1 of 4 |Multistart 1 of 4 |Multistart 1 of 4 |Multistart 1 of 4 /Multistart 1 of 4 -Multistart 1 of 4 \Multistart 1 of 4 |Multistart 1 of 4 |Multistart 2 of 4 |Multistart 2 of 4 |Multistart 2 of 4 /Multistart 2 of 4 |Multistart 2 of 4 |Multistart 2 of 4 /Multistart 3 of 4 |Multistart 3 of 4 |Multistart 3 of 4 /Multistart 3 of 4 -Multistart 3 of 4 |Multistart 3 of 4 |Multistart 3 of 4 /Multistart 4 of 4 |Multistart 4 of 4 |Multistart 4 of 4 /Multistart 4 of 4 -Multistart 4 of 4 |Multistart 4 of 4 |                   > all.equal( estResultEpaAll$grad, estResultEpaAll2$grad, tolerance = 1e-6 )
[1] TRUE
> all.equal( elas( estResultEpaAll ), elas( estResultEpaAll2 ), tolerance = 1e-6 )
[1] TRUE
> all.equal( elas( estResultEpaAll, yObs = TRUE ),
+    elas( estResultEpaAll2, yObs = TRUE ), tolerance = 1e-6 )
[1] TRUE
> 
> 
> # estimation with manual bandwidth selection (restricted gradients)
> estResultMan <- npregHom( "qVarInput",
+    xNames = c( "pOutput", "pVarInput", "pLabor", "land" ),
+    data = germanFarms, homWeights = weights, bws = rep( 1, 3 ),
+    bwscaling = TRUE )
> print( estResultMan )
$call
npregHom(yName = "qVarInput", xNames = c("pOutput", "pVarInput", 
    "pLabor", "land"), homWeights = weights, data = germanFarms, 
    bws = rep(1, 3), bwscaling = TRUE)

$yName
[1] "qVarInput"

$xNames
[1] "pOutput"   "pVarInput" "pLabor"    "land"     

$homWeights
  pOutput pVarInput    pLabor 
0.6723447 0.3269169 0.0007385 

$restrictGrad
[1] TRUE

$est

Regression Data: 20 training points, in 3 variable(s)
                 r_2 r_3 r_4
Scale Factor(s):   1   1   1

Kernel Regression Estimator: Local-Constant
Bandwidth Type: Fixed

Continuous Kernel Type: Second-Order Gaussian
No. Continuous Explanatory Vars.: 3


$grad
       pOutput pVarInput     pLabor    land
 [1,] -1.57635  0.991423  8.445e-03  0.9428
 [2,] -2.83858  2.491356  4.670e-03  1.4130
 [3,] -2.07454  2.347574 -9.551e-06  1.1602
 [4,] -1.88148  1.874236  8.566e-04  1.3012
 [5,] -1.56251  1.490158  8.760e-04  1.3928
 [6,] -1.19646  0.987039  1.239e-03  2.1215
 [7,] -1.32680  1.064883  1.544e-03  2.8041
 [8,] -1.41265  0.985800  2.251e-03  4.1378
 [9,] -0.98861  0.699350  1.540e-03  2.7604
[10,] -1.67049  0.916370  3.638e-03  6.6810
[11,] -2.16768  1.034593  5.338e-03  9.1186
[12,] -1.51284  0.366407  4.979e-03  8.8944
[13,]  0.19849 -0.405148  1.008e-03  3.5073
[14,]  0.26681 -0.330454  4.024e-04  3.9638
[15,] -0.47136  0.004352  2.101e-03  6.2566
[16,]  2.08862 -1.221673 -2.657e-03 -1.5072
[17,]  2.42361 -1.319517 -3.301e-03 -2.5633
[18,] -0.07368 -0.151802  8.757e-04  2.0099
[19,] -0.83612  0.049025  2.324e-03  3.9818
[20,] -0.44418 -0.201891  1.998e-03  3.7651

attr(,"class")
[1] "npregHom"
> all.equal( estResultMan$grad[ , "pOutput" ] * germanFarms$pOutput +
+    estResultMan$grad[ , "pVarInput" ] * germanFarms$pVarInput,
+    - estResultMan$grad[ , "pLabor" ] * germanFarms$pLabor )
[1] TRUE
> estElaMan <- elas( estResultMan )
> print( estElaMan )
     pOutput  pVarInput     pLabor     land
1  -0.266847  0.1438280  0.1230193  0.03878
2  -0.455439  0.3506955  0.1047432  0.05465
3  -0.321532  0.3218091 -0.0002775  0.04512
4  -0.277238  0.2561323  0.0211057  0.05034
5  -0.238646  0.2165662  0.0220795  0.05355
6  -0.182705  0.1507250  0.0319799  0.08173
7  -0.218170  0.1742852  0.0438847  0.11066
8  -0.229500  0.1636208  0.0658792  0.16252
9  -0.161399  0.1183713  0.0430278  0.10562
10 -0.260776  0.1531604  0.1076154  0.26001
11 -0.317754  0.1656673  0.1520869  0.35892
12 -0.192930  0.0503381  0.1425918  0.35902
13  0.024487 -0.0540862  0.0295991  0.14519
14  0.034334 -0.0459673  0.0116334  0.16919
15 -0.063569  0.0006238  0.0629456  0.26249
16  0.265712 -0.1763818 -0.0893305 -0.06469
17  0.323828 -0.2020507 -0.1217769 -0.11738
18 -0.009157 -0.0235965  0.0327537  0.09806
19 -0.097981  0.0074432  0.0905380  0.20232
20 -0.052989 -0.0306409  0.0836299  0.19833
> all.equal( estElaMan[[ "pOutput" ]] + estElaMan[[ "pVarInput" ]],
+    - estElaMan[[ "pLabor" ]] )
[1] TRUE
> estElaManObs <- elas( estResultMan, yObs = TRUE )
> print( estElaManObs )
     pOutput  pVarInput     pLabor     land
1  -0.272779  0.1470250  0.1257537  0.03964
2  -0.469774  0.3617337  0.1080400  0.05637
3  -0.335816  0.3361059 -0.0002898  0.04712
4  -0.272958  0.2521780  0.0207798  0.04956
5  -0.238743  0.2166546  0.0220885  0.05357
6  -0.182113  0.1502368  0.0318763  0.08147
7  -0.212692  0.1699095  0.0427829  0.10788
8  -0.234216  0.1669834  0.0672331  0.16586
9  -0.165965  0.1217197  0.0442449  0.10861
10 -0.269381  0.1582146  0.1111666  0.26859
11 -0.316696  0.1651154  0.1515802  0.35773
12 -0.187617  0.0489520  0.1386652  0.34913
13  0.022967 -0.0507291  0.0277619  0.13617
14  0.032455 -0.0434522  0.0109969  0.15993
15 -0.064805  0.0006359  0.0641693  0.26759
16  0.274602 -0.1822827 -0.0923191 -0.06685
17  0.338489 -0.2111985 -0.1272903 -0.12269
18 -0.009377 -0.0241626  0.0335394  0.10041
19 -0.098389  0.0074741  0.0909144  0.20316
20 -0.051448 -0.0297498  0.0811976  0.19256
> all.equal( estElaManObs[[ "pOutput" ]] + estElaManObs[[ "pVarInput" ]],
+    - estElaManObs[[ "pLabor" ]] )
[1] TRUE
> # different normalized variable omitted
> estResultMan2 <- npregHom( "qVarInput",
+    xNames = c( "pOutput", "pVarInput", "pLabor", "land" ),
+    data = germanFarms, homWeights = weights[ c( 3, 2, 1 ) ],
+    bws = rep( 1, 3 ), bwscaling = TRUE )
> print( estResultMan2 )
$call
npregHom(yName = "qVarInput", xNames = c("pOutput", "pVarInput", 
    "pLabor", "land"), homWeights = weights[c(3, 2, 1)], data = germanFarms, 
    bws = rep(1, 3), bwscaling = TRUE)

$yName
[1] "qVarInput"

$xNames
[1] "pOutput"   "pVarInput" "pLabor"    "land"     

$homWeights
   pLabor pVarInput   pOutput 
0.0007385 0.3269169 0.6723447 

$restrictGrad
[1] TRUE

$est

Regression Data: 20 training points, in 3 variable(s)
                 r_1 r_2 r_4
Scale Factor(s):   1   1   1

Kernel Regression Estimator: Local-Constant
Bandwidth Type: Fixed

Continuous Kernel Type: Second-Order Gaussian
No. Continuous Explanatory Vars.: 3


$grad
      pOutput pVarInput     pLabor     land
 [1,] -0.3347  -0.16426  0.0055252  0.33621
 [2,] -0.4521  -0.22116  0.0046219  1.29140
 [3,] -0.3297  -0.16103  0.0025187  4.35090
 [4,] -0.1987  -0.09712  0.0017272  1.63560
 [5,] -0.1974  -0.09648  0.0017524  1.47173
 [6,] -0.2029  -0.09916  0.0017868  1.60810
 [7,] -0.2385  -0.11658  0.0020519  2.15195
 [8,] -0.2847  -0.13910  0.0023696  2.81274
 [9,] -0.1843  -0.09009  0.0016233  1.59473
[10,] -0.3905  -0.19079  0.0031391  3.91699
[11,] -0.6714  -0.32803  0.0052983  5.75167
[12,] -1.3702  -0.66903  0.0093107  9.79732
[13,]  0.1310   0.06395 -0.0008415  2.00652
[14,] -0.1091  -0.05327  0.0007420  4.20520
[15,] -0.4587  -0.22398  0.0031358  6.03654
[16,]  1.1870   0.57928 -0.0069795 -2.61385
[17,]  1.1183   0.54570 -0.0063157 -2.77990
[18,]  0.2090   0.10196 -0.0011181  0.09287
[19,] -0.9947  -0.48520  0.0048834  4.12097
[20,] -0.7240  -0.35310  0.0033444  3.16664

attr(,"class")
[1] "npregHom"
> all.equal( estResultMan2$grad[ , "pOutput" ] * germanFarms$pOutput +
+    estResultMan2$grad[ , "pVarInput" ] * germanFarms$pVarInput,
+    - estResultMan2$grad[ , "pLabor" ] * germanFarms$pLabor )
[1] TRUE
> estElaMan2 <- elas( estResultMan2 )
> print( estElaMan2 )
    pOutput pVarInput   pLabor      land
1  -0.05755 -0.024203  0.08175  0.014046
2  -0.07075 -0.030363  0.10112  0.048713
3  -0.04964 -0.021446  0.07109  0.164377
4  -0.02902 -0.013153  0.04217  0.062708
5  -0.03009 -0.013996  0.04409  0.056481
6  -0.03122 -0.015259  0.04648  0.062433
7  -0.03950 -0.019212  0.05871  0.085513
8  -0.04678 -0.023356  0.07014  0.111756
9  -0.03048 -0.015444  0.04592  0.061799
10 -0.06225 -0.032564  0.09482  0.155674
11 -0.10125 -0.054036  0.15529  0.232900
12 -0.17434 -0.091701  0.26604  0.394550
13  0.01612  0.008513 -0.02463  0.082826
14 -0.01400 -0.007388  0.02139  0.178953
15 -0.06169 -0.032016  0.09371  0.252544
16  0.15139  0.083845 -0.23523 -0.112461
17  0.15060  0.084219 -0.23482 -0.128305
18  0.02600  0.015869 -0.04187  0.004537
19 -0.11677 -0.073795  0.19057  0.209758
20 -0.08604 -0.053384  0.13942  0.166165
> all.equal( estElaMan2[[ "pOutput" ]] + estElaMan2[[ "pVarInput" ]],
+    - estElaMan2[[ "pLabor" ]] )
[1] TRUE
> estElaMan2Obs <- elas( estResultMan2, yObs = TRUE )
> print( estElaMan2Obs )
    pOutput pVarInput   pLabor     land
1  -0.05792 -0.024359  0.08227  0.01414
2  -0.07483 -0.032111  0.10694  0.05152
3  -0.05336 -0.023055  0.07642  0.17671
4  -0.02883 -0.013068  0.04190  0.06230
5  -0.03016 -0.014027  0.04419  0.05661
6  -0.03088 -0.015093  0.04597  0.06176
7  -0.03824 -0.018601  0.05684  0.08279
8  -0.04720 -0.023562  0.07076  0.11274
9  -0.03095 -0.015681  0.04663  0.06274
10 -0.06297 -0.032940  0.09591  0.15747
11 -0.09810 -0.052351  0.15045  0.22564
12 -0.16993 -0.089382  0.25931  0.38457
13  0.01516  0.008008 -0.02317  0.07791
14 -0.01327 -0.007005  0.02028  0.16967
15 -0.06307 -0.032730  0.09580  0.25818
16  0.15606  0.086433 -0.24249 -0.11593
17  0.15619  0.087343 -0.24353 -0.13306
18  0.02660  0.016230 -0.04282  0.00464
19 -0.11705 -0.073971  0.19102  0.21026
20 -0.08386 -0.052031  0.13589  0.16196
> all.equal( estElaMan2Obs[[ "pOutput" ]] + estElaMan2Obs[[ "pVarInput" ]],
+    - estElaMan2Obs[[ "pLabor" ]] )
[1] TRUE
> 
> # estimation with manual bandwidth selection (gradients not restricted)
> estResultManAll <- npregHom( "qVarInput",
+    xNames = c( "pOutput", "pVarInput", "pLabor", "land" ),
+    data = germanFarms, homWeights = weights, restrictGrad = FALSE,
+    bws = rep( 1, 4 ), bwscaling = TRUE )
> print( estResultManAll )
$call
npregHom(yName = "qVarInput", xNames = c("pOutput", "pVarInput", 
    "pLabor", "land"), homWeights = weights, data = germanFarms, 
    restrictGrad = FALSE, bws = rep(1, 4), bwscaling = TRUE)

$yName
[1] "qVarInput"

$xNames
[1] "pOutput"   "pVarInput" "pLabor"    "land"     

$homWeights
  pOutput pVarInput    pLabor 
0.6723447 0.3269169 0.0007385 

$restrictGrad
[1] FALSE

$est

Regression Data: 20 training points, in 4 variable(s)
                 r_1 r_2 r_3 r_4
Scale Factor(s):   1   1   1   1

Kernel Regression Estimator: Local-Constant
Bandwidth Type: Fixed

Continuous Kernel Type: Second-Order Gaussian
No. Continuous Explanatory Vars.: 4


$grad
       pOutput pVarInput     pLabor    land
 [1,]  0.34835  -0.86429  0.0045593  0.5746
 [2,] -3.70642   3.61680  0.0038144  0.9492
 [3,] -4.37417   5.00972 -0.0003025  0.2530
 [4,] -5.16944   5.36499  0.0011586  0.8183
 [5,] -3.21018   3.20146  0.0009928  0.9360
 [6,] -0.65758   0.45352  0.0012072  1.9011
 [7,] -1.06086   0.80066  0.0015274  2.5305
 [8,] -0.80729   0.36234  0.0024269  4.1902
 [9,] -0.34620   0.07505  0.0015687  2.6617
[10,] -0.33120  -0.30933  0.0034961  6.1612
[11,]  0.44467  -1.20310  0.0044741  7.4518
[12,]  1.12028  -1.90791  0.0041637  7.2836
[13,]  1.61654  -1.63041  0.0006208  2.4558
[14,]  1.43550  -1.44370  0.0005569  3.3261
[15,]  0.68876  -1.04764  0.0019115  4.9280
[16,]  3.48917  -2.50830 -0.0024316 -1.3988
[17,]  3.58501  -2.45243 -0.0028052 -2.1669
[18,]  0.08011  -0.41767  0.0014696  2.4549
[19,]  1.12578  -1.44040  0.0022272  3.3025
[20,]  1.73657  -1.93964  0.0020841  3.3271

attr(,"class")
[1] "npregHom"
> all.equal( estResultManAll$grad[ , "pOutput" ] * germanFarms$pOutput +
+    estResultManAll$grad[ , "pVarInput" ] * germanFarms$pVarInput,
+    - estResultManAll$grad[ , "pLabor" ] * germanFarms$pLabor )
[1] TRUE
> estElaManAll <- elas( estResultManAll )
> print( estElaManAll )
    pOutput pVarInput    pLabor     land
1   0.05944  -0.12639  0.066947  0.02382
2  -0.59967   0.51339  0.086280  0.03702
3  -0.69607   0.70509 -0.009024  0.01010
4  -0.76289   0.73430  0.028590  0.03171
5  -0.48782   0.46292  0.024897  0.03581
6  -0.09993   0.06892  0.031010  0.07289
7  -0.17357   0.13039  0.043183  0.09936
8  -0.13062   0.05990  0.070726  0.16391
9  -0.05642   0.01268  0.043735  0.10166
10 -0.05161  -0.05161  0.103227  0.23937
11  0.06529  -0.19298  0.127683  0.29381
12  0.14206  -0.26064  0.118575  0.29234
13  0.19857  -0.21672  0.018145  0.10122
14  0.18435  -0.20041  0.016065  0.14168
15  0.09253  -0.14959  0.057059  0.20595
16  0.44405  -0.36228 -0.081779 -0.06006
17  0.47872  -0.37530 -0.103417 -0.09917
18  0.00997  -0.06501  0.055045  0.11994
19  0.13220  -0.21914  0.086941  0.16815
20  0.20649  -0.29343  0.086934  0.17469
> all.equal( estElaManAll[[ "pOutput" ]] + estElaManAll[[ "pVarInput" ]],
+    - estElaManAll[[ "pLabor" ]] )
[1] TRUE
> estElaManAllObs <- elas( estResultManAll, yObs = TRUE )
> print( estElaManAllObs )
    pOutput pVarInput   pLabor     land
1   0.06028  -0.12817  0.06789  0.02416
2  -0.61340   0.52514  0.08826  0.03786
3  -0.70807   0.71725 -0.00918  0.01028
4  -0.74996   0.72186  0.02811  0.03117
5  -0.49050   0.46546  0.02503  0.03600
6  -0.10009   0.06903  0.03106  0.07301
7  -0.17006   0.12775  0.04231  0.09736
8  -0.13385   0.06138  0.07247  0.16796
9  -0.05812   0.01306  0.04506  0.10472
10 -0.05341  -0.05341  0.10682  0.24769
11  0.06497  -0.19201  0.12704  0.29234
12  0.13893  -0.25490  0.11596  0.28590
13  0.18705  -0.20415  0.01709  0.09535
14  0.17462  -0.18984  0.01522  0.13420
15  0.09469  -0.15309  0.05839  0.21077
16  0.45874  -0.37426 -0.08448 -0.06204
17  0.50069  -0.39253 -0.10816 -0.10372
18  0.01019  -0.06648  0.05629  0.12264
19  0.13247  -0.21960  0.08712  0.16850
20  0.20114  -0.28582  0.08468  0.17016
> all.equal( estElaManAllObs[[ "pOutput" ]] + estElaManAllObs[[ "pVarInput" ]],
+    - estElaManAllObs[[ "pLabor" ]] )
[1] TRUE
> # different order of weights
> estResultManAll2 <- npregHom( "qVarInput",
+    xNames = c( "pOutput", "pVarInput", "pLabor", "land" ),
+    data = germanFarms, homWeights = weights[ c( 3, 2, 1 ) ],
+    restrictGrad = FALSE, bws = rep( 1, 4 ), bwscaling = TRUE )
> all.equal( estResultManAll$grad, estResultManAll2$grad )
[1] TRUE
> all.equal( elas( estResultManAll ), elas( estResultManAll2 ) )
[1] TRUE
> all.equal( elas( estResultManAll, yObs = TRUE ),
+    elas( estResultManAll2, yObs = TRUE ) )
[1] TRUE
> 
> 
> # local-linear estimation (restricted gradients)
> npseed( 123 )
> estResultLl <- npregHom( "qVarInput",
+    xNames = c( "pOutput", "pVarInput", "pLabor", "land" ),
+    data = germanFarms, homWeights = weights, regtype = "ll" )
Multistart 1 of 3 |Multistart 1 of 3 |Multistart 1 of 3 |Multistart 1 of 3 /Multistart 1 of 3 -Multistart 1 of 3 |Multistart 1 of 3 |Multistart 2 of 3 |Multistart 2 of 3 |Multistart 2 of 3 /Multistart 2 of 3 -Multistart 2 of 3 |Multistart 2 of 3 |Multistart 2 of 3 /Multistart 3 of 3 |Multistart 3 of 3 |Multistart 3 of 3 /Multistart 3 of 3 -Multistart 3 of 3 \Multistart 3 of 3 |Multistart 3 of 3 |Multistart 3 of 3 |Multistart 3 of 3 /Multistart 3 of 3 -Multistart 3 of 3 \                   > print( estResultLl )
$call
npregHom(yName = "qVarInput", xNames = c("pOutput", "pVarInput", 
    "pLabor", "land"), homWeights = weights, data = germanFarms, 
    regtype = "ll")

$yName
[1] "qVarInput"

$xNames
[1] "pOutput"   "pVarInput" "pLabor"    "land"     

$homWeights
  pOutput pVarInput    pLabor 
0.6723447 0.3269169 0.0007385 

$restrictGrad
[1] TRUE

$est

Regression Data: 20 training points, in 3 variable(s)
                  r_2   r_3       r_4
Bandwidth(s): 6322776 26.87 141514664

Kernel Regression Estimator: Local-Linear
Bandwidth Type: Fixed

Continuous Kernel Type: Second-Order Gaussian
No. Continuous Explanatory Vars.: 3


$grad
       pOutput pVarInput    pLabor  land
 [1,] -0.76446   0.08646  0.008023 16.75
 [2,] -0.93577   0.46674  0.003764 16.69
 [3,]  0.98726   0.77241 -0.008912 24.63
 [4,] -0.28484   0.81864 -0.002837 20.72
 [5,] -0.41435   0.74978 -0.001812 20.14
 [6,] -0.37261   0.73134 -0.002122 20.37
 [7,] -0.20229   0.70107 -0.002868 21.01
 [8,]  0.01721   0.71225 -0.004136 21.93
 [9,] -0.35400   0.66685 -0.001972 20.37
[10,]  0.29925   0.71513 -0.005621 22.95
[11,]  0.50010   0.73419 -0.006700 23.54
[12,]  3.21487   0.32047 -0.015853 29.56
[13,]  4.52863  -0.01566 -0.018962 31.32
[14,]  3.10575   0.31657 -0.015348 29.53
[15,]  2.87498   0.32786 -0.014507 29.32
[16,]  5.80293  -0.48689 -0.019868 31.13
[17,]  5.98642  -0.69991 -0.018778 30.20
[18,]  7.15001  -1.23737 -0.018614 29.55
[19,]  8.47071  -2.18735 -0.016957 30.35
[20,]  8.27050  -2.26356 -0.015367 30.47

attr(,"class")
[1] "npregHom"
> all.equal( estResultLl$grad[ , "pOutput" ] * germanFarms$pOutput +
+    estResultLl$grad[ , "pVarInput" ] * germanFarms$pVarInput,
+    - estResultLl$grad[ , "pLabor" ] * germanFarms$pLabor )
[1] TRUE
> estElaLl <- elas( estResultLl )
> print( estElaLl )
     pOutput pVarInput   pLabor   land
1  -0.132288  0.012822  0.11947 0.7044
2  -0.153552  0.067194  0.08636 0.6602
3   0.158281  0.109527 -0.26781 0.9906
4  -0.042559  0.113439 -0.07088 0.8129
5  -0.064371  0.110835 -0.04646 0.7877
6  -0.057645  0.113142 -0.05550 0.7949
7  -0.033108  0.114203 -0.08110 0.8254
8   0.002799  0.118319 -0.12112 0.8620
9  -0.058729  0.114697 -0.05597 0.7921
10  0.047324  0.121083 -0.16841 0.9048
11  0.073819  0.118384 -0.19220 0.9329
12  0.423944  0.045526 -0.46947 1.2339
13  0.576053 -0.002155 -0.57390 1.3366
14  0.384342  0.042348 -0.42669 1.2121
15  0.379615  0.046012 -0.42563 1.2043
16  0.784127 -0.074664 -0.70946 1.4190
17  0.806033 -0.108000 -0.69803 1.3936
18  0.890316 -0.192718 -0.69760 1.4446
19  1.004673 -0.336114 -0.66856 1.5609
20  0.959609 -0.334132 -0.62548 1.5613
> all.equal( estElaLl[[ "pOutput" ]] + estElaLl[[ "pVarInput" ]],
+    - estElaLl[[ "pLabor" ]] )
[1] TRUE
> estElaLlObs <- elas( estResultLl, yObs = TRUE )
> print( estElaLlObs )
     pOutput pVarInput   pLabor   land
1  -0.132286  0.012822  0.11946 0.7044
2  -0.154866  0.067769  0.08710 0.6659
3   0.159813  0.110587 -0.27040 1.0002
4  -0.041324  0.110148 -0.06882 0.7894
5  -0.063311  0.109010 -0.04570 0.7747
6  -0.056715  0.111316 -0.05460 0.7821
7  -0.032429  0.111861 -0.07943 0.8085
8   0.002854  0.120647 -0.12350 0.8790
9  -0.059428  0.116062 -0.05663 0.8015
10  0.048257  0.123470 -0.17173 0.9227
11  0.073064  0.117173 -0.19024 0.9233
12  0.398697  0.042815 -0.44151 1.1604
13  0.524017 -0.001961 -0.52206 1.2159
14  0.377791  0.041626 -0.41942 1.1915
15  0.395266  0.047909 -0.44318 1.2539
16  0.762943 -0.072647 -0.69030 1.3807
17  0.836083 -0.112026 -0.72406 1.4456
18  0.909885 -0.196954 -0.71293 1.4764
19  0.996772 -0.333470 -0.66330 1.5486
20  0.957936 -0.333549 -0.62439 1.5586
> all.equal( estElaLlObs[[ "pOutput" ]] + estElaLlObs[[ "pVarInput" ]],
+    - estElaLlObs[[ "pLabor" ]] )
[1] TRUE
> 
> # local-linear estimation (gradients not restricted)
> npseed( 123 )
> estResultLlAll <- npregHom( "qVarInput",
+    xNames = c( "pOutput", "pVarInput", "pLabor", "land" ),
+    data = germanFarms, homWeights = weights, restrictGrad = FALSE,
+    regtype = "ll" )
Multistart 1 of 4 |Multistart 1 of 4 |Multistart 1 of 4 |Multistart 1 of 4 /Multistart 1 of 4 -Multistart 1 of 4 |Multistart 1 of 4 |Multistart 2 of 4 |Multistart 2 of 4 |Multistart 2 of 4 /Multistart 2 of 4 -Multistart 2 of 4 \Multistart 2 of 4 |Multistart 2 of 4 /Multistart 2 of 4 -Multistart 2 of 4 |Multistart 2 of 4 |Multistart 3 of 4 |Multistart 3 of 4 |Multistart 3 of 4 /Multistart 3 of 4 -Multistart 3 of 4 |Multistart 3 of 4 |Multistart 4 of 4 |Multistart 4 of 4 |Multistart 4 of 4 /Multistart 4 of 4 -Multistart 4 of 4 |Multistart 4 of 4 |                   > print( estResultLlAll )
$call
npregHom(yName = "qVarInput", xNames = c("pOutput", "pVarInput", 
    "pLabor", "land"), homWeights = weights, data = germanFarms, 
    restrictGrad = FALSE, regtype = "ll")

$yName
[1] "qVarInput"

$xNames
[1] "pOutput"   "pVarInput" "pLabor"    "land"     

$homWeights
  pOutput pVarInput    pLabor 
0.6723447 0.3269169 0.0007385 

$restrictGrad
[1] FALSE

$est

Regression Data: 20 training points, in 4 variable(s)
                 r_1     r_2   r_3   r_4
Bandwidth(s): 0.9052 0.01822 30.05 1.163

Kernel Regression Estimator: Local-Linear
Bandwidth Type: Fixed

Continuous Kernel Type: Second-Order Gaussian
No. Continuous Explanatory Vars.: 4


$grad
         pOutput pVarInput    pLabor     land
 [1,]     -8.119     5.742   0.03716  66.7661
 [2,]    -17.328    25.916  -0.03869 160.3784
 [3,]   -273.049   221.589   0.41115 156.0833
 [4,]     41.095   -27.571  -0.09284  35.4238
 [5,]    -33.066    22.191   0.07242  17.6427
 [6,]  -1204.067   826.433   2.23398  35.1949
 [7,]    108.587  -133.111   0.13833  39.3219
 [8,]    441.325  -321.914  -0.62430  45.5357
 [9,]   -627.639   438.801   1.00947  49.8559
[10,]     27.270   -12.614  -0.07265  60.4374
[11,]    161.279  -115.516  -0.18056  58.8885
[12,]    126.151   -88.109  -0.13908  -3.0137
[13,]    659.140  -428.934  -0.81954  -1.7094
[14,]    -25.878    21.854   0.01003  -4.8448
[15,]   -110.628   156.206  -0.24931  -2.7731
[16,]    288.465  -172.436  -0.35107  -2.0024
[17,]    -29.561    38.260  -0.05174   0.3627
[18,] -84539.093 43366.163 100.66215  32.6674
[19,]   -163.767    89.070   0.14551  11.5661
[20,]   4113.768 -2061.135  -4.25187  11.5942

attr(,"class")
[1] "npregHom"
> all.equal( estResultLlAll$grad[ , "pOutput" ] * germanFarms$pOutput +
+    estResultLlAll$grad[ , "pVarInput" ] * germanFarms$pVarInput,
+    - estResultLlAll$grad[ , "pLabor" ] * germanFarms$pLabor )
[1] TRUE
> estElaLlAll <- elas( estResultLlAll )
> print( estElaLlAll )
     pOutput  pVarInput    pLabor       land
1     -1.190     0.7211    0.4687    2.37728
2     -1.098     1.4411   -0.3428    2.45011
3   1629.909 -1169.8956 -460.0134 -233.76311
4      6.165    -3.8363   -2.3291    1.39539
5     -5.052     3.2262    1.8260    0.67857
6  -3735.079  2563.6381 1171.4410   27.54523
7     11.940   -14.5681    2.6284    1.03768
8     68.497   -51.0453  -17.4520    1.70862
9   -107.032    77.5797   29.4524    1.99261
10     5.660    -2.8033   -2.8571    3.12745
11    67.325   -52.6758  -14.6492    6.60095
12    39.084   -29.4070   -9.6765   -0.29553
13    93.716   -65.9919  -27.7238   -0.08155
14    -5.732     5.2324    0.4993   -0.35593
15    -7.306    10.9641   -3.6583   -0.05697
16    57.875   -39.2617  -18.6129   -0.13553
17    -3.004     4.4555   -1.4516    0.01263
18  -860.792   552.3051  308.4874    0.13058
19   -18.691    13.1703    5.5206    0.57236
20 -1582.496  1008.7232  573.7729   -1.96942
> all.equal( estElaLlAll[[ "pOutput" ]] + estElaLlAll[[ "pVarInput" ]],
+    - estElaLlAll[[ "pLabor" ]] )
[1] TRUE
> estElaLlAllObs <- elas( estResultLlAll, yObs = TRUE )
> print( estElaLlAllObs )
      pOutput pVarInput    pLabor     land
1      -1.405    0.8515    0.5534  2.80718
2      -2.868    3.7629   -0.8951  6.39780
3     -44.200   31.7253   12.4747  6.33920
4       5.962   -3.7096   -2.2522  1.34933
5      -5.052    3.2263    1.8260  0.67860
6    -183.271  125.7910   57.4795  1.35157
7      17.407  -21.2389    3.8319  1.51283
8      73.171  -54.5286  -18.6429  1.82521
9    -105.366   76.3719   28.9938  1.96159
10      4.397   -2.1778   -2.2196  2.42970
11     23.563  -18.4357   -5.1270  2.31022
12     15.645  -11.7714   -3.8734 -0.11830
13     76.270  -53.7074  -22.5630 -0.06637
14     -3.148    2.8737    0.2742 -0.19548
15    -15.210   22.8257   -7.6161 -0.11860
16     37.926  -25.7287  -12.1973 -0.08881
17     -4.129    6.1238   -1.9952  0.01736
18 -10758.143 6902.6822 3855.4603  1.63199
19    -19.271   13.5791    5.6919  0.59012
20    476.480 -303.7203 -172.7595  0.59298
> all.equal( estElaLlAllObs[[ "pOutput" ]] + estElaLlAllObs[[ "pVarInput" ]],
+    - estElaLlAllObs[[ "pLabor" ]] )
[1] TRUE
> 
> 
> # local-linear estimation with Epanechnikov kernel (restricted gradients)
> npseed( 123 )
> estResultLlEpa <- npregHom( "qVarInput",
+    xNames = c( "pOutput", "pVarInput", "pLabor", "land" ),
+    data = germanFarms, homWeights = weights, ckertype="epanechnikov",
+    regtype = "ll" )
Multistart 1 of 3 |Multistart 1 of 3 |Multistart 1 of 3 |Multistart 1 of 3 /Multistart 1 of 3 -Multistart 1 of 3 |Multistart 1 of 3 |Multistart 1 of 3 /Multistart 2 of 3 |Multistart 2 of 3 |Multistart 2 of 3 /Multistart 2 of 3 -Multistart 2 of 3 |Multistart 2 of 3 |Multistart 3 of 3 |Multistart 3 of 3 |Multistart 3 of 3 /Multistart 3 of 3 -Multistart 3 of 3 |Multistart 3 of 3 |                   > print( estResultLlEpa )
$call
npregHom(yName = "qVarInput", xNames = c("pOutput", "pVarInput", 
    "pLabor", "land"), homWeights = weights, data = germanFarms, 
    ckertype = "epanechnikov", regtype = "ll")

$yName
[1] "qVarInput"

$xNames
[1] "pOutput"   "pVarInput" "pLabor"    "land"     

$homWeights
  pOutput pVarInput    pLabor 
0.6723447 0.3269169 0.0007385 

$restrictGrad
[1] TRUE

$est

Regression Data: 20 training points, in 3 variable(s)
               r_2   r_3   r_4
Bandwidth(s): 2086 30.84 4.638

Kernel Regression Estimator: Local-Linear
Bandwidth Type: Fixed

Continuous Kernel Type: Second-Order Epanechnikov
No. Continuous Explanatory Vars.: 3


$grad
       pOutput pVarInput     pLabor   land
 [1,]  4.48354 -4.613259 -6.159e-03 112.25
 [2,] -1.09668  0.656963  3.722e-03  17.20
 [3,]  0.32552  0.976544 -6.345e-03  23.38
 [4,] -0.42506  0.819140 -2.001e-03  21.35
 [5,] -0.70580  0.734555  4.145e-05  19.98
 [6,] -0.62007  0.720175 -5.922e-04  20.37
 [7,] -0.16420  0.736370 -3.291e-03  22.31
 [8,] -0.02777  0.798993 -4.378e-03  22.60
 [9,] -0.58187  0.655837 -5.732e-04  20.39
[10,]  0.13898  0.844392 -5.505e-03  23.00
[11,]  0.37187  0.880798 -6.864e-03  23.45
[12,]  3.26508  0.247043 -1.572e-02  29.24
[13,]  4.99672 -0.439290 -1.900e-02  31.94
[14,]  3.95977 -0.210415 -1.661e-02  30.35
[15,]  3.45603 -0.003724 -1.554e-02  29.89
[16,]  5.94515 -0.779224 -1.915e-02  31.54
[17,]  6.11532 -1.428056 -1.622e-02  27.29
[18,]  7.50520 -3.810893 -9.099e-03  20.68
[19,]  8.57008 -3.391926 -1.256e-02  26.26
[20,]  7.77476 -2.597923 -1.274e-02  28.32

attr(,"class")
[1] "npregHom"
> all.equal( estResultLlEpa$grad[ , "pOutput" ] * germanFarms$pOutput +
+    estResultLlEpa$grad[ , "pVarInput" ] * germanFarms$pVarInput,
+    - estResultLlEpa$grad[ , "pLabor" ] * germanFarms$pLabor )
[1] TRUE
> estElaLlEpa <- elas( estResultLlEpa )
> print( estElaLlEpa )
     pOutput  pVarInput    pLabor   land
1   0.775952 -0.6842199 -0.091732 4.7203
2  -0.181129  0.0951955  0.085934 0.6846
3   0.052182  0.1384550 -0.190637 0.9402
4  -0.063642  0.1137458 -0.050104 0.8392
5  -0.110014  0.1089481  0.001066 0.7841
6  -0.096129  0.1116493 -0.015520 0.7968
7  -0.026851  0.1198538 -0.093003 0.8758
8  -0.004514  0.1326679 -0.128154 0.8880
9  -0.096696  0.1129930 -0.016297 0.7940
10  0.021947  0.1427705 -0.164718 0.9055
11  0.054829  0.1418638 -0.196693 0.9286
12  0.432851  0.0352812 -0.468132 1.2269
13  0.638166 -0.0607107 -0.577456 1.3689
14  0.491933 -0.0282571 -0.463676 1.2506
15  0.458234 -0.0005248 -0.457709 1.2328
16  0.803699 -0.1195470 -0.684152 1.4382
17  0.819366 -0.2192794 -0.600087 1.2530
18  0.940506 -0.5973283 -0.343178 1.0173
19  1.020664 -0.5233674 -0.497296 1.3560
20  0.902169 -0.3835220 -0.518647 1.4509
> all.equal( estElaLlEpa[[ "pOutput" ]] + estElaLlEpa[[ "pVarInput" ]],
+    - estElaLlEpa[[ "pLabor" ]] )
[1] TRUE
> estElaLlEpaObs <- elas( estResultLlEpa, yObs = TRUE )
> print( estElaLlEpaObs )
     pOutput  pVarInput    pLabor   land
1   0.775853 -0.6841323 -0.091720 4.7197
2  -0.181496  0.0953881  0.086108 0.6860
3   0.052694  0.1398134 -0.192508 0.9494
4  -0.061667  0.1102151 -0.048549 0.8131
5  -0.107842  0.1067972  0.001045 0.7686
6  -0.094380  0.1096175 -0.015238 0.7823
7  -0.026322  0.1174930 -0.091171 0.8585
8  -0.004605  0.1353403 -0.130736 0.9059
9  -0.097683  0.1141465 -0.016464 0.8021
10  0.022411  0.1457873 -0.168198 0.9246
11  0.054329  0.1405705 -0.194900 0.9201
12  0.404924  0.0330049 -0.437929 1.1478
13  0.578181 -0.0550041 -0.523176 1.2403
14  0.481675 -0.0276679 -0.454007 1.2245
15  0.475151 -0.0005442 -0.474607 1.2783
16  0.781641 -0.1162661 -0.665375 1.3987
17  0.854085 -0.2285709 -0.625514 1.3061
18  0.955085 -0.6065877 -0.348498 1.0330
19  1.008465 -0.5171122 -0.491353 1.3398
20  0.900516 -0.3828192 -0.517697 1.4483
> all.equal( estElaLlEpaObs[[ "pOutput" ]] + estElaLlEpaObs[[ "pVarInput" ]],
+    - estElaLlEpaObs[[ "pLabor" ]] )
[1] TRUE
> 
> # local linear estimation with Epanechnikov kernel (gradients not restricted)
> npseed( 123 )
> estResultLlEpaAll <- npregHom( "qVarInput",
+    xNames = c( "pOutput", "pVarInput", "pLabor", "land" ),
+    data = germanFarms, homWeights = weights, restrictGrad = FALSE,
+    ckertype = "epanechnikov", regtype = "ll" )
Multistart 1 of 4 |Multistart 1 of 4 |Multistart 1 of 4 |Multistart 1 of 4 /Multistart 1 of 4 -Multistart 1 of 4 |Multistart 1 of 4 |Multistart 2 of 4 |Multistart 2 of 4 |Multistart 2 of 4 /Multistart 2 of 4 -Multistart 2 of 4 \Multistart 2 of 4 |Multistart 2 of 4 |Multistart 2 of 4 |Multistart 3 of 4 |Multistart 3 of 4 |Multistart 3 of 4 /Multistart 3 of 4 |Multistart 3 of 4 |Multistart 4 of 4 |Multistart 4 of 4 |Multistart 4 of 4 /Multistart 4 of 4 -Multistart 4 of 4 \Multistart 4 of 4 |Multistart 4 of 4 |Multistart 4 of 4 /                   > print( estResultLlEpaAll )
$call
npregHom(yName = "qVarInput", xNames = c("pOutput", "pVarInput", 
    "pLabor", "land"), homWeights = weights, data = germanFarms, 
    restrictGrad = FALSE, ckertype = "epanechnikov", regtype = "ll")

$yName
[1] "qVarInput"

$xNames
[1] "pOutput"   "pVarInput" "pLabor"    "land"     

$homWeights
  pOutput pVarInput    pLabor 
0.6723447 0.3269169 0.0007385 

$restrictGrad
[1] FALSE

$est

Regression Data: 20 training points, in 4 variable(s)
                  r_1     r_2   r_3   r_4
Bandwidth(s): 0.04578 0.02871 30.61 3.473

Kernel Regression Estimator: Local-Linear
Bandwidth Type: Fixed

Continuous Kernel Type: Second-Order Epanechnikov
No. Continuous Explanatory Vars.: 4


$grad
         pOutput pVarInput    pLabor    land
 [1,]   -62.2768   66.1986  0.064443 113.018
 [2,]   253.4080 -289.4237  0.003671  26.558
 [3,]   192.8812 -171.1032 -0.221664 153.373
 [4,]    -0.3269   -0.1513  0.002794   9.443
 [5,]   283.2239 -230.4921 -0.387216  16.784
 [6,]   433.5792 -379.5080 -0.319870  17.361
 [7,]    30.4365  -20.7020 -0.056892  15.219
 [8,]   -70.9655   50.6225  0.106865  18.026
 [9,]   -47.8840   29.0126  0.104068  17.727
[10,]   -20.9619   16.6113  0.016767  20.513
[11,]    32.8695  -21.9165 -0.045938  23.425
[12,]     8.8055   -4.2581 -0.018784  25.495
[13,]  -143.2629   95.2886  0.168754  24.329
[14,]    18.3062   -7.7023 -0.044426  22.490
[15,]   -78.4164   54.0042  0.094589  24.888
[16,]   297.7728  -96.9437 -0.710496  19.491
[17,]   -10.6862   25.0492 -0.065272  17.146
[18,]   -55.8465   29.5341  0.062813  30.236
[19,]  1855.0641 -891.4632 -2.106096   5.564
[20,] -9249.0996 4502.9387 10.035306  -5.789

attr(,"class")
[1] "npregHom"
> all.equal( estResultLlEpaAll$grad[ , "pOutput" ] * germanFarms$pOutput +
+    estResultLlEpaAll$grad[ , "pVarInput" ] * germanFarms$pVarInput,
+    - estResultLlEpaAll$grad[ , "pLabor" ] * germanFarms$pLabor )
[1] TRUE
> estElaLlEpaAll <- elas( estResultLlEpaAll )
> print( estElaLlEpaAll )
     pOutput pVarInput     pLabor    land
1  -15.80429   14.3970    1.40730  6.9687
2   -5.34650    5.3573   -0.01083 -0.1351
3   18.05003  -14.1619   -3.88809  3.6011
4   -0.05056   -0.0217    0.07227  0.3835
5   56.58461  -43.8181  -12.76654  0.8441
6   73.93472  -64.7144   -9.22032  0.7469
7    4.11692   -2.7871   -1.32977  0.4941
8    9.63587   -7.0224   -2.61343 -0.5917
9   -3.67188    2.3065    1.36533  0.3186
10  -9.70231    8.2319    1.47041  2.3669
11   5.36649   -3.9088   -1.45772  1.0270
12   1.06655   -0.5556   -0.51094  0.9774
13 -25.14272   18.0961    7.04664  1.4327
14  -3.36885    1.5322    1.83663 -1.3729
15 -10.90214    7.9801    2.92208  1.0764
16 -66.76884   24.6692   42.09966 -1.4743
17  -4.27242   11.4773   -7.20487  2.3494
18 -11.12967    7.3620    3.76763  2.3656
19 220.44048 -137.2455  -83.19497  0.2867
20 417.27138 -258.4508 -158.82057  0.1153
> all.equal( estElaLlEpaAll[[ "pOutput" ]] + estElaLlEpaAll[[ "pVarInput" ]],
+    - estElaLlEpaAll[[ "pLabor" ]] )
[1] TRUE
> estElaLlEpaAllObs <- elas( estResultLlEpaAll, yObs = TRUE )
> print( estElaLlEpaAllObs )
      pOutput  pVarInput    pLabor    land
1  -1.078e+01    9.81704   0.95961  4.7519
2   4.194e+01  -42.02302   0.08495  1.0595
3   3.122e+01  -24.49712  -6.72556  6.2291
4  -4.742e-02   -0.02036   0.06778  0.3597
5   4.327e+01  -33.51133  -9.76363  0.6456
6   6.599e+01  -57.76473  -8.23015  0.6667
7   4.879e+00   -3.30315  -1.57595  0.5855
8  -1.177e+01    8.57488   3.19118  0.7225
9  -8.039e+00    5.04956   2.98903  0.6975
10 -3.380e+00    2.86800   0.51229  0.8246
11  4.802e+00   -3.49776  -1.30444  0.9190
12  1.092e+00   -0.56888  -0.52315  1.0008
13 -1.658e+01   11.93120   4.64603  0.9446
14  2.227e+00   -1.01280  -1.21400  0.9074
15 -1.078e+01    7.89142   2.88963  1.0645
16  3.915e+01  -14.46473 -24.68507  0.8645
17 -1.492e+00    4.00932  -2.51685  0.8207
18 -7.107e+00    4.70101   2.40581  1.5105
19  2.183e+02 -135.90700 -82.38359  0.2839
20 -1.071e+03  663.53438 407.74839 -0.2961
> all.equal( estElaLlEpaAllObs[[ "pOutput" ]] + estElaLlEpaAllObs[[ "pVarInput" ]],
+    - estElaLlEpaAllObs[[ "pLabor" ]] )
[1] TRUE
> 
> 
> # local-linear estimation with manual bandwidth selection (restricted gradients)
> estResultLlMan <- npregHom( "qVarInput",
+    xNames = c( "pOutput", "pVarInput", "pLabor", "land" ),
+    data = germanFarms, homWeights = weights, bws = rep( 1, 3 ),
+    bwscaling = TRUE, regtype = "ll" )
> print( estResultLlMan )
$call
npregHom(yName = "qVarInput", xNames = c("pOutput", "pVarInput", 
    "pLabor", "land"), homWeights = weights, data = germanFarms, 
    bws = rep(1, 3), bwscaling = TRUE, regtype = "ll")

$yName
[1] "qVarInput"

$xNames
[1] "pOutput"   "pVarInput" "pLabor"    "land"     

$homWeights
  pOutput pVarInput    pLabor 
0.6723447 0.3269169 0.0007385 

$restrictGrad
[1] TRUE

$est

Regression Data: 20 training points, in 3 variable(s)
                 r_2 r_3 r_4
Scale Factor(s):   1   1   1

Kernel Regression Estimator: Local-Linear
Bandwidth Type: Fixed

Continuous Kernel Type: Second-Order Gaussian
No. Continuous Explanatory Vars.: 3


$grad
        pOutput pVarInput     pLabor   land
 [1,] -0.930010    0.6905  0.0039309 35.875
 [2,] -1.758550    1.7546  0.0015675 27.445
 [3,] -1.014811    2.0636 -0.0043232 22.849
 [4,] -0.569253    1.1519 -0.0029848 23.470
 [5,]  0.003515    0.5613 -0.0032579 24.313
 [6,]  1.259702   -0.2115 -0.0062008 27.443
 [7,]  1.151370   -0.1213 -0.0059646 27.106
 [8,]  1.370415   -0.2963 -0.0059283 27.375
 [9,]  1.544402   -0.4307 -0.0064169 28.594
[10,]  1.096820   -0.6178 -0.0022980 24.188
[11,]  0.844312   -0.8355  0.0003518 21.364
[12,]  4.138106   -3.5627 -0.0013362 20.392
[13,]  9.363267   -8.9327  0.0012725 16.733
[14,]  8.408820   -7.8646  0.0004121 16.741
[15,]  5.412853   -4.9437 -0.0007132 18.727
[16,]  7.837912   -5.2355 -0.0071759 12.843
[17,]  3.774439    0.6595 -0.0164087 11.810
[18,]  7.644679   -2.6813 -0.0142566 28.644
[19,]  3.779845   -3.5057  0.0022924 14.569
[20,]  2.155914   -3.6920  0.0072438  9.492

attr(,"class")
[1] "npregHom"
> all.equal( estResultLlMan$grad[ , "pOutput" ] * germanFarms$pOutput +
+    estResultLlMan$grad[ , "pVarInput" ] * germanFarms$pVarInput,
+    - estResultLlMan$grad[ , "pLabor" ] * germanFarms$pLabor )
[1] TRUE
> estElaLlMan <- elas( estResultLlMan )
> print( estElaLlMan )
      pOutput pVarInput   pLabor   land
1  -0.1609061   0.10238  0.05852 1.5081
2  -0.2919450   0.25556  0.03638 1.0983
3  -0.1629424   0.29305 -0.13011 0.9205
4  -0.0848937   0.15932 -0.07443 0.9190
5   0.0005436   0.08259 -0.08314 0.9464
6   0.1943123  -0.03263 -0.16169 1.0680
7   0.1870152  -0.01960 -0.16741 1.0567
8   0.2227033  -0.04919 -0.17352 1.0755
9   0.2576786  -0.07450 -0.18317 1.1181
10  0.1743155  -0.10512 -0.06920 0.9583
11  0.1250970  -0.13523  0.01013 0.8500
12  0.5311325  -0.49262 -0.03852 0.8284
13  1.1448317  -1.18185  0.03702 0.6865
14  1.0517818  -1.06336  0.01158 0.6945
15  0.7078694  -0.68714 -0.02072 0.7618
16  1.0286309  -0.77977 -0.24887 0.5686
17  0.5138153   0.10289 -0.61670 0.5510
18  0.9652638  -0.42347 -0.54179 1.4199
19  0.4457536  -0.53562  0.08987 0.7450
20  0.2496932  -0.54400  0.29431 0.4854
> all.equal( estElaLlMan[[ "pOutput" ]] + estElaLlMan[[ "pVarInput" ]],
+    - estElaLlMan[[ "pLabor" ]] )
[1] TRUE
> estElaLlManObs <- elas( estResultLlMan, yObs = TRUE )
> print( estElaLlManObs )
      pOutput pVarInput   pLabor   land
1  -0.1609331   0.10240  0.05853 1.5084
2  -0.2910334   0.25477  0.03627 1.0948
3  -0.1642727   0.29545 -0.13117 0.9280
4  -0.0825852   0.15499 -0.07241 0.8940
5   0.0005371   0.08161 -0.08215 0.9352
6   0.1917386  -0.03219 -0.15954 1.0539
7   0.1845697  -0.01935 -0.16522 1.0428
8   0.2272144  -0.05018 -0.17703 1.0973
9   0.2592688  -0.07496 -0.18430 1.1250
10  0.1768722  -0.10666 -0.07021 0.9724
11  0.1233529  -0.13334  0.00999 0.8381
12  0.5131937  -0.47598 -0.03722 0.8005
13  1.0834420  -1.11848  0.03503 0.6497
14  1.0228673  -1.03413  0.01126 0.6754
15  0.7441844  -0.72240 -0.02179 0.8009
16  1.0304927  -0.78118 -0.24932 0.5696
17  0.5271504   0.10556 -0.63271 0.5653
18  0.9728346  -0.42679 -0.54604 1.4310
19  0.4447849  -0.53446  0.08967 0.7433
20  0.2497101  -0.54404  0.29433 0.4854
> all.equal( estElaLlManObs[[ "pOutput" ]] + estElaLlManObs[[ "pVarInput" ]],
+    - estElaLlManObs[[ "pLabor" ]] )
[1] TRUE
> 
> # local-linear estimation with manual bandwidth selection (gradients not restricted)
> estResultLlManAll <- npregHom( "qVarInput",
+    xNames = c( "pOutput", "pVarInput", "pLabor", "land" ),
+    data = germanFarms, homWeights = weights, restrictGrad = FALSE,
+    bws = rep( 1, 4 ), bwscaling = TRUE, regtype = "ll" )
> print( estResultLlManAll )
$call
npregHom(yName = "qVarInput", xNames = c("pOutput", "pVarInput", 
    "pLabor", "land"), homWeights = weights, data = germanFarms, 
    restrictGrad = FALSE, bws = rep(1, 4), bwscaling = TRUE, 
    regtype = "ll")

$yName
[1] "qVarInput"

$xNames
[1] "pOutput"   "pVarInput" "pLabor"    "land"     

$homWeights
  pOutput pVarInput    pLabor 
0.6723447 0.3269169 0.0007385 

$restrictGrad
[1] FALSE

$est

Regression Data: 20 training points, in 4 variable(s)
                 r_1 r_2 r_3 r_4
Scale Factor(s):   1   1   1   1

Kernel Regression Estimator: Local-Linear
Bandwidth Type: Fixed

Continuous Kernel Type: Second-Order Gaussian
No. Continuous Explanatory Vars.: 4


$grad
         pOutput pVarInput    pLabor   land
 [1,]     65.219    -60.29 -0.157488 30.600
 [2,]   -101.873     70.54  0.286025 44.095
 [3,]    -18.215     18.86  0.008169 31.872
 [4,]    135.703   -111.18 -0.194881 17.267
 [5,]    146.451   -795.61  3.700058 18.231
 [6,]    309.034   -225.00 -0.497130 26.153
 [7,]    647.573   -464.84 -1.070008 24.244
 [8,]    -13.635     12.92  0.002411 22.318
 [9,]   -241.224    187.80  0.271934 27.440
[10,]    176.899   -140.78 -0.138115 22.474
[11,]     90.332    -62.04 -0.116072 23.253
[12,]    122.079    -78.45 -0.167271 18.620
[13,]    202.882   -150.38 -0.168786 14.605
[14,]    506.741   -358.12 -0.532492 16.073
[15,]     85.364    -58.25 -0.105568 16.944
[16,]   5016.939  -2940.74 -6.355836 11.164
[17,]   -134.981     93.80  0.099567  9.897
[18,]    770.151   -316.22 -1.244690 23.936
[19,]     -9.442     15.30 -0.031229  3.200
[20,] -19763.305   9629.40 21.415696  4.758

attr(,"class")
[1] "npregHom"
> all.equal( estResultLlManAll$grad[ , "pOutput" ] * germanFarms$pOutput +
+    estResultLlManAll$grad[ , "pVarInput" ] * germanFarms$pVarInput,
+    - estResultLlManAll$grad[ , "pLabor" ] * germanFarms$pLabor )
[1] TRUE
> estElaLlManAll <- elas( estResultLlManAll )
> print( estElaLlManAll )
     pOutput pVarInput     pLabor     land
1     6.8663    -5.440   -1.42679  0.78275
2    -7.9338     4.820    3.11424  0.82777
3    -3.2784     3.003    0.27558  1.43920
4    15.4583   -11.746   -3.71193  0.51645
5     1.5439    -7.981    6.43708  0.04838
6    45.2213   -32.924  -12.29697  0.96554
7    90.8824   -64.933  -25.94902  0.81660
8    -2.2073     2.137    0.07029  0.87348
9   -20.7205    16.724    3.99639  0.55241
10   40.7411   -34.714   -6.02675  1.29034
11   16.1088   -12.086   -4.02302  1.11348
12   26.4941   -18.342   -8.15245  1.27901
13   19.8732   -15.939   -3.93377  0.48004
14  -48.7860    37.269   11.51664 -0.51326
15   11.2748    -8.177   -3.09821  0.69619
16 2431.7358 -1617.634 -814.10188  1.82546
17  -21.0939    16.798    4.29581  0.53009
18   50.1005   -25.730  -24.37015  0.61127
19   -0.5608     1.177   -0.61652  0.08239
20  197.5918  -122.482  -75.11012 -0.02100
> all.equal( estElaLlManAll[[ "pOutput" ]] + estElaLlManAll[[ "pVarInput" ]],
+    - estElaLlManAll[[ "pLabor" ]] )
[1] TRUE
> estElaLlManAllObs <- elas( estResultLlManAll, yObs = TRUE )
> print( estElaLlManAllObs )
     pOutput pVarInput     pLabor   land
1     11.286    -8.941   -2.34515 1.2866
2    -16.860    10.242    6.61785 1.7590
3     -2.949     2.701    0.24786 1.2944
4     19.687   -14.960   -4.72741 0.6577
5     22.377  -115.674   93.29686 0.7012
6     47.038   -34.247  -12.79097 1.0043
7    103.809   -74.169  -29.63983 0.9327
8     -2.261     2.189    0.07199 0.8946
9    -40.496    32.685    7.81049 1.0796
10    28.527   -24.307   -4.21987 0.9035
11    13.197    -9.901   -3.29592 0.9122
12    15.140   -10.481   -4.65864 0.7309
13    23.476   -18.829   -4.64690 0.5671
14    61.641   -47.090  -14.55126 0.6485
15    11.736    -8.511   -3.22503 0.7247
16   659.604  -438.780 -220.82372 0.4952
17   -18.852    15.013    3.83924 0.4738
18    98.007   -50.334  -47.67286 1.1958
19    -1.111     2.333   -1.22156 0.1633
20 -2289.097  1418.948  870.14938 0.2433
> all.equal( estElaLlManAllObs[[ "pOutput" ]] + estElaLlManAllObs[[ "pVarInput" ]],
+    - estElaLlManAllObs[[ "pLabor" ]] )
[1] TRUE
> # different order of weights
> estResultLlManAll2 <- npregHom( "qVarInput",
+    xNames = c( "pOutput", "pVarInput", "pLabor", "land" ),
+    data = germanFarms, homWeights = weights[ c( 3, 2, 1 ) ], restrictGrad = FALSE,
+    bws = rep( 1, 4 ), bwscaling = TRUE, regtype = "ll" )
> all.equal( estResultLlManAll$grad, estResultLlManAll2$grad )
[1] TRUE
> all.equal( estResultLlManAll$est, estResultLlManAll2$est, check.attributes = FALSE )
[1] TRUE
> 
> proc.time()
   user  system elapsed 
  2.652   0.032   2.674 
