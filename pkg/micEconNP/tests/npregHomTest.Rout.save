
R version 3.1.1 (2014-07-10) -- "Sock it to Me"
Copyright (C) 2014 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # load the micEconNP package
> library( micEconNP )
Loading required package: np
Nonparametric Kernel Methods for Mixed Datatypes (version 0.60-2)
[vignette("np_faq",package="np") provides answers to frequently asked questions]
Loading required package: crs
Categorical Regression Splines (version 0.15-22)
[vignette("crs_faq") provides answers to frequently asked questions]
Loading required package: micEcon

If you have questions, suggestions, or comments regarding one of the 'micEcon' packages, please use a forum or 'tracker' at micEcon's R-Forge site:
https://r-forge.r-project.org/projects/micecon/
> options( digits = 4 )
> 
> # load data
> data( germanFarms )
> # output quantity
> germanFarms$qOutput <- germanFarms$vOutput / germanFarms$pOutput
> # quantity of variable inputs
> germanFarms$qVarInput <- germanFarms$vVarInput / germanFarms$pVarInput
> # a time trend to account for technical progress:
> germanFarms$time <- c(1:20)
> 
> # weights to impose normalize prices
> weights <- c(
+    pOutput = mean( germanFarms$qOutput ),
+    pVarInput = mean( germanFarms$qVarInput ),
+    pLabor = mean( germanFarms$qLabor ) )
> weights <- weights / sum( weights )
> 
> # estimation (restricted gradients)
> npseed( 123 )
> estResult <- npregHom( "qVarInput",
+    xNames = c( "pOutput", "pVarInput", "pLabor", "land" ),
+    data = germanFarms, homWeights = weights )
Multistart 1 of 3 |Multistart 1 of 3 |Multistart 1 of 3 |Multistart 1 of 3 /Multistart 1 of 3 -Multistart 1 of 3 \Multistart 1 of 3 |Multistart 1 of 3 /Multistart 1 of 3 -Multistart 1 of 3 |Multistart 1 of 3 |Multistart 1 of 3 /Multistart 1 of 3 -Multistart 2 of 3 |Multistart 2 of 3 |Multistart 2 of 3 /Multistart 2 of 3 -Multistart 2 of 3 \Multistart 2 of 3 |Multistart 2 of 3 |Multistart 2 of 3 /Multistart 2 of 3 -Multistart 3 of 3 |Multistart 3 of 3 |Multistart 3 of 3 /Multistart 3 of 3 -Multistart 3 of 3 \Multistart 3 of 3 |Multistart 3 of 3 /Multistart 3 of 3 |Multistart 3 of 3 |Multistart 3 of 3 /Multistart 3 of 3 -Multistart 3 of 3 \                   > print( estResult )
$call
npregHom(yName = "qVarInput", xNames = c("pOutput", "pVarInput", 
    "pLabor", "land"), homWeights = weights, data = germanFarms)

$yName
[1] "qVarInput"

$xNames
[1] "pOutput"   "pVarInput" "pLabor"    "land"     

$homWeights
  pOutput pVarInput    pLabor 
0.6723447 0.3269169 0.0007385 

$restrictGrad
[1] TRUE

$est

Regression Data: 20 training points, in 3 variable(s)
                  r_2   r_3   r_4
Bandwidth(s): 0.01662 26.63 1.586

Kernel Regression Estimator: Local-Constant
Bandwidth Type: Fixed

Continuous Kernel Type: Second-Order Gaussian
No. Continuous Explanatory Vars.: 3


$grad
      pOutput pVarInput     pLabor    land
 [1,] -2.3391    2.5350  1.936e-03  0.8404
 [2,] -2.4824    2.5506  1.751e-03  0.8727
 [3,] -2.2655    2.5400  1.009e-04  0.2664
 [4,] -1.6915    1.8494 -1.421e-04  0.1985
 [5,] -0.4628    0.4726  7.930e-05  0.3077
 [6,]  3.0022   -2.9992 -1.776e-05  0.6816
 [7,]  2.1787   -2.1863 -1.508e-05  0.7450
 [8,]  3.9897   -3.9151  5.625e-05  0.5804
 [9,]  1.7356   -1.7065  1.960e-04  0.7904
[10,] -6.1205    5.5745  8.030e-04  6.1113
[11,] -3.5355    2.9986  1.337e-03  8.9902
[12,] -2.7664    2.1872  1.826e-03  9.5746
[13,] -3.3081    2.9294  5.809e-04  3.0601
[14,] -3.8698    3.5201  2.876e-04  2.2621
[15,] -5.9011    5.4282  5.929e-04  1.8311
[16,]  6.7993   -5.8362 -6.659e-04 -3.9827
[17,]  1.7684   -1.4790 -2.662e-04 -2.8754
[18,] -2.0830    1.6043  2.535e-04  2.7545
[19,]  1.4966   -1.4792  1.263e-03  6.3075
[20,]  3.0125   -2.7023  1.213e-03  5.3970

attr(,"class")
[1] "npregHom"
> all.equal( estResult$grad[ , "pOutput" ] * germanFarms$pOutput +
+    estResult$grad[ , "pVarInput" ] * germanFarms$pVarInput,
+    - estResult$grad[ , "pLabor" ] * germanFarms$pLabor )
[1] TRUE
> estEla <- elas( estResult )
> print( estEla )
    pOutput pVarInput     pLabor      land
1  -0.40275   0.37407  0.0286839  0.035158
2  -0.41195   0.37134  0.0406126  0.034908
3  -0.36583   0.36278  0.0030550  0.010795
4  -0.24674   0.25021 -0.0034671  0.007603
5  -0.07042   0.06842  0.0019911  0.011786
6   0.45489  -0.45443 -0.0004548  0.026056
7   0.35545  -0.35503 -0.0004250  0.029170
8   0.65786  -0.65953  0.0016704  0.023135
9   0.28868  -0.29425  0.0055782  0.030812
10 -0.96999   0.94588  0.0241107  0.241454
11 -0.52151   0.48317  0.0383383  0.356094
12 -0.33982   0.28944  0.0503791  0.372260
13 -0.39448   0.37800  0.0164821  0.122438
14 -0.48183   0.47379  0.0080445  0.093426
15 -0.77735   0.75999  0.0173547  0.075037
16  0.89636  -0.87316 -0.0231984 -0.177122
17  0.24472  -0.23455 -0.0101684 -0.136372
18 -0.26407   0.25440  0.0096734  0.137085
19  0.17501  -0.22410  0.0490875  0.319805
20  0.35222  -0.40197  0.0497440  0.278639
> all.equal( estEla[[ "pOutput" ]] + estEla[[ "pVarInput" ]],
+    - estEla[[ "pLabor" ]] )
[1] TRUE
> estElaObs <- elas( estResult, yObs = TRUE )
> print( estElaObs )
    pOutput pVarInput     pLabor      land
1  -0.40477   0.37594  0.0288275  0.035334
2  -0.41083   0.37033  0.0405023  0.034813
3  -0.36672   0.36366  0.0030624  0.010821
4  -0.24539   0.24884 -0.0034482  0.007562
5  -0.07071   0.06871  0.0019995  0.011835
6   0.45697  -0.45651 -0.0004569  0.026176
7   0.34926  -0.34884 -0.0004176  0.028662
8   0.66150  -0.66318  0.0016796  0.023263
9   0.29137  -0.29700  0.0056303  0.031100
10 -0.98699   0.96246  0.0245334  0.245687
11 -0.51653   0.47856  0.0379719  0.352691
12 -0.34308   0.29221  0.0508623  0.375830
13 -0.38279   0.36680  0.0159939  0.118811
14 -0.47073   0.46287  0.0078592  0.091273
15 -0.81131   0.79320  0.0181130  0.078316
16  0.89394  -0.87081 -0.0231358 -0.176645
17  0.24698  -0.23672 -0.0102626 -0.137634
18 -0.26508   0.25537  0.0097101  0.137607
19  0.17611  -0.22551  0.0493970  0.321821
20  0.34892  -0.39820  0.0492779  0.276028
> all.equal( estElaObs[[ "pOutput" ]] + estElaObs[[ "pVarInput" ]],
+    - estElaObs[[ "pLabor" ]] )
[1] TRUE
> # different normalized variable omitted
> npseed( 123 )
> estResult2 <- npregHom( "qVarInput",
+    xNames = c( "pOutput", "pVarInput", "pLabor", "land" ),
+    data = germanFarms, homWeights = weights[ c( 3, 2, 1 ) ] )
Multistart 1 of 3 |Multistart 1 of 3 |Multistart 1 of 3 |Multistart 1 of 3 /Multistart 1 of 3 -Multistart 1 of 3 |Multistart 1 of 3 |Multistart 1 of 3 /Multistart 1 of 3 -Multistart 2 of 3 |Multistart 2 of 3 |Multistart 2 of 3 /Multistart 2 of 3 -Multistart 2 of 3 \Multistart 2 of 3 |Multistart 2 of 3 |Multistart 2 of 3 /Multistart 2 of 3 -Multistart 2 of 3 \Multistart 3 of 3 |Multistart 3 of 3 |Multistart 3 of 3 /Multistart 3 of 3 -Multistart 3 of 3 \Multistart 3 of 3 |Multistart 3 of 3 |Multistart 3 of 3 /Multistart 3 of 3 -Multistart 3 of 3 \                   > print( estResult2 )
$call
npregHom(yName = "qVarInput", xNames = c("pOutput", "pVarInput", 
    "pLabor", "land"), homWeights = weights[c(3, 2, 1)], data = germanFarms)

$yName
[1] "qVarInput"

$xNames
[1] "pOutput"   "pVarInput" "pLabor"    "land"     

$homWeights
   pLabor pVarInput   pOutput 
0.0007385 0.3269169 0.6723447 

$restrictGrad
[1] TRUE

$est

Regression Data: 20 training points, in 3 variable(s)
                r_1   r_2   r_4
Bandwidth(s): 10.44 28.12 2.649

Kernel Regression Estimator: Local-Constant
Bandwidth Type: Fixed

Continuous Kernel Type: Second-Order Gaussian
No. Continuous Explanatory Vars.: 3


$grad
         pOutput  pVarInput     pLabor       land
 [1,] -0.0001389 -6.681e-05  2.280e-06  5.534e-05
 [2,] -1.8538386 -8.950e-01  1.888e-02  1.607e+00
 [3,]  0.5966849  2.886e-01 -4.545e-03  3.483e+00
 [4,] -0.1433325 -6.926e-02  1.241e-03  7.209e-01
 [5,] -0.3062298 -1.480e-01  2.709e-03  7.141e-01
 [6,] -0.2303660 -1.113e-01  2.021e-03  7.118e-01
 [7,] -0.0852502 -4.120e-02  7.306e-04  7.892e-01
 [8,]  0.0718365  3.473e-02 -5.958e-04  1.082e+00
 [9,] -0.2108566 -1.019e-01  1.850e-03  7.109e-01
[10,]  0.2059275  9.957e-02 -1.650e-03  1.790e+00
[11,] -0.0044521 -2.137e-03  3.492e-05  2.770e+00
[12,] -1.2943670 -6.262e-01  8.768e-03  2.945e+00
[13,]  0.7032070  3.403e-01 -4.503e-03 -8.746e-02
[14,] -0.5815370 -2.814e-01  3.943e-03  1.301e+00
[15,] -0.7279871 -3.522e-01  4.961e-03  1.710e+00
[16,]  3.5737555  1.730e+00 -2.095e-02 -3.463e+00
[17,]  1.0798219  5.228e-01 -6.081e-03 -1.691e+00
[18,] -0.5571937 -2.698e-01  2.973e-03  7.058e-01
[19,] -2.3953746 -1.160e+00  1.173e-02  3.438e+00
[20,] -1.4207064 -6.883e-01  6.546e-03  2.192e+00

attr(,"class")
[1] "npregHom"
> all.equal( estResult2$grad[ , "pOutput" ] * germanFarms$pOutput +
+    estResult2$grad[ , "pVarInput" ] * germanFarms$pVarInput,
+    - estResult2$grad[ , "pLabor" ] * germanFarms$pLabor )
[1] TRUE
> estEla2 <- elas( estResult2 )
> print( estEla2 )
      pOutput  pVarInput     pLabor       land
1  -2.404e-05 -9.907e-06  3.395e-05  2.327e-06
2  -2.979e-01 -1.262e-01  4.241e-01  6.225e-02
3   9.089e-02  3.888e-02 -1.298e-01  1.331e-01
4  -2.085e-02 -9.342e-03  3.019e-02  2.753e-02
5  -4.650e-02 -2.138e-02  6.788e-02  2.730e-02
6  -3.532e-02 -1.707e-02  5.239e-02  2.754e-02
7  -1.409e-02 -6.776e-03  2.086e-02  3.130e-02
8   1.181e-02  5.834e-03 -1.764e-02  4.299e-02
9  -3.473e-02 -1.740e-02  5.214e-02  2.745e-02
10  3.299e-02  1.708e-02 -5.007e-02  7.149e-02
11 -6.788e-04 -3.559e-04  1.035e-03  1.134e-01
12 -1.593e-01 -8.302e-02  2.423e-01  1.147e-01
13  8.446e-02  4.423e-02 -1.287e-01 -3.525e-03
14 -7.318e-02 -3.827e-02  1.115e-01  5.430e-02
15 -9.583e-02 -4.928e-02  1.451e-01  7.002e-02
16  4.652e-01  2.556e-01 -7.208e-01 -1.521e-01
17  1.491e-01  8.276e-02 -2.319e-01 -8.004e-02
18 -7.056e-02 -4.274e-02  1.133e-01  3.509e-02
19 -2.799e-01 -1.756e-01  4.555e-01  1.742e-01
20 -1.666e-01 -1.027e-01  2.693e-01  1.135e-01
> all.equal( estEla2[[ "pOutput" ]] + estEla2[[ "pVarInput" ]],
+    - estEla2[[ "pLabor" ]] )
[1] TRUE
> estEla2Obs <- elas( estResult2, yObs = TRUE )
> print( estEla2Obs )
      pOutput  pVarInput     pLabor       land
1  -2.404e-05 -9.907e-06  3.395e-05  2.327e-06
2  -3.068e-01 -1.299e-01  4.368e-01  6.411e-02
3   9.659e-02  4.131e-02 -1.379e-01  1.415e-01
4  -2.079e-02 -9.319e-03  3.011e-02  2.746e-02
5  -4.679e-02 -2.151e-02  6.830e-02  2.747e-02
6  -3.506e-02 -1.694e-02  5.201e-02  2.734e-02
7  -1.367e-02 -6.573e-03  2.024e-02  3.036e-02
8   1.191e-02  5.883e-03 -1.779e-02  4.336e-02
9  -3.540e-02 -1.773e-02  5.313e-02  2.797e-02
10  3.321e-02  1.719e-02 -5.040e-02  7.195e-02
11 -6.504e-04 -3.410e-04  9.915e-04  1.087e-01
12 -1.605e-01 -8.367e-02  2.442e-01  1.156e-01
13  8.137e-02  4.261e-02 -1.240e-01 -3.396e-03
14 -7.074e-02 -3.700e-02  1.077e-01  5.249e-02
15 -1.001e-01 -5.147e-02  1.516e-01  7.313e-02
16  4.699e-01  2.581e-01 -7.280e-01 -1.536e-01
17  1.508e-01  8.368e-02 -2.345e-01 -8.093e-02
18 -7.091e-02 -4.295e-02  1.139e-01  3.526e-02
19 -2.819e-01 -1.769e-01  4.588e-01  1.754e-01
20 -1.646e-01 -1.014e-01  2.660e-01  1.121e-01
> all.equal( estEla2Obs[[ "pOutput" ]] + estEla2Obs[[ "pVarInput" ]],
+    - estEla2Obs[[ "pLabor" ]] )
[1] TRUE
> 
> # estimation (gradients not restricted)
> npseed( 123 )
> estResultAll <- npregHom( "qVarInput",
+    xNames = c( "pOutput", "pVarInput", "pLabor", "land" ),
+    data = germanFarms, homWeights = weights, restrictGrad = FALSE )
Multistart 1 of 4 |Multistart 1 of 4 |Multistart 1 of 4 |Multistart 1 of 4 /Multistart 1 of 4 -Multistart 1 of 4 \Multistart 1 of 4 |Multistart 1 of 4 /Multistart 1 of 4 -Multistart 1 of 4 |Multistart 1 of 4 |Multistart 1 of 4 /Multistart 1 of 4 -Multistart 2 of 4 |Multistart 2 of 4 |Multistart 2 of 4 /Multistart 2 of 4 -Multistart 2 of 4 \Multistart 2 of 4 |Multistart 2 of 4 |Multistart 2 of 4 |Multistart 3 of 4 |Multistart 3 of 4 |Multistart 3 of 4 /Multistart 3 of 4 -Multistart 3 of 4 \Multistart 3 of 4 |Multistart 3 of 4 |Multistart 3 of 4 |Multistart 3 of 4 /Multistart 4 of 4 |Multistart 4 of 4 |Multistart 4 of 4 /Multistart 4 of 4 -Multistart 4 of 4 \Multistart 4 of 4 |Multistart 4 of 4 |Multistart 4 of 4 |Multistart 4 of 4 /Multistart 4 of 4 -Multistart 4 of 4 \                   > print( estResultAll )
$call
npregHom(yName = "qVarInput", xNames = c("pOutput", "pVarInput", 
    "pLabor", "land"), homWeights = weights, data = germanFarms, 
    restrictGrad = FALSE)

$yName
[1] "qVarInput"

$xNames
[1] "pOutput"   "pVarInput" "pLabor"    "land"     

$homWeights
  pOutput pVarInput    pLabor 
0.6723447 0.3269169 0.0007385 

$restrictGrad
[1] FALSE

$est

Regression Data: 20 training points, in 4 variable(s)
                  r_1     r_2      r_3   r_4
Bandwidth(s): 0.01328 0.01145 64693377 2.006

Kernel Regression Estimator: Local-Constant
Bandwidth Type: Fixed

Continuous Kernel Type: Second-Order Gaussian
No. Continuous Explanatory Vars.: 4


$grad
       pOutput pVarInput     pLabor      land
 [1,]  0.09398   -0.1086 -1.079e-05  0.015003
 [2,] -0.82213    0.9250  7.600e-05  0.149636
 [3,] -0.26625    0.2963  2.222e-05  0.007376
 [4,]  0.20046   -0.2143 -1.023e-05  0.105904
 [5,] -0.61220    0.6398  2.042e-05  0.222421
 [6,]  3.99272   -3.9927 -7.713e-18  0.353584
 [7,]  2.67442   -2.6855 -8.206e-06  0.422567
 [8,]  5.15107   -5.0545  7.136e-05  0.387676
 [9,]  2.01184   -1.9483  4.698e-05  0.582466
[10,] -5.08659    4.7897 -2.194e-04  3.049259
[11,] -4.11880    3.8110 -2.275e-04  2.419401
[12,]  0.16300   -0.1529  7.487e-06  3.376447
[13,] -0.87341    0.8164 -4.212e-05  1.127723
[14,] -2.81821    2.6352 -1.352e-04  1.843583
[15,] -4.11203    3.9014 -1.557e-04  1.180999
[16,]  4.99111   -4.4850  3.740e-04 -3.115824
[17,]  0.77459   -0.6908  6.191e-05 -2.054621
[18,] -0.85251    0.7074 -1.073e-04  1.977838
[19,]  3.59070   -2.9021  5.089e-04  3.224950
[20,]  5.18796   -4.2658  6.815e-04  2.006612

attr(,"class")
[1] "npregHom"
> all.equal( estResultAll$grad[ , "pOutput" ] * germanFarms$pOutput +
+    estResultAll$grad[ , "pVarInput" ] * germanFarms$pVarInput,
+    - estResultAll$grad[ , "pLabor" ] * germanFarms$pLabor )
[1] TRUE
> estElaAll <- elas( estResultAll )
> print( estElaAll )
    pOutput pVarInput     pLabor       land
1   0.01626  -0.01610 -1.606e-04  0.0006307
2  -0.13590   0.13414  1.756e-03  0.0059623
3  -0.04309   0.04242  6.742e-04  0.0002995
4   0.02918  -0.02893 -2.489e-04  0.0040472
5  -0.09318   0.09267  5.129e-04  0.0085222
6   0.60514  -0.60514 -1.976e-16  0.0135205
7   0.43621  -0.43598 -2.313e-04  0.0165414
8   0.84733  -0.84944  2.114e-03  0.0154170
9   0.33493  -0.33627  1.338e-03  0.0227264
10 -0.80755   0.81415 -6.599e-03  0.1206860
11 -0.61182   0.61839 -6.568e-03  0.0965021
12  0.01996  -0.02017  2.059e-04  0.1308719
13 -0.10430   0.10550 -1.197e-03  0.0451865
14 -0.35200   0.35579 -3.795e-03  0.0763780
15 -0.54170   0.54626 -4.556e-03  0.0483981
16  0.65697  -0.66998  1.301e-02 -0.1383570
17  0.10701  -0.10937  2.362e-03 -0.0972833
18 -0.10794   0.11202 -4.087e-03  0.0983068
19  0.42245  -0.44236  1.990e-02  0.1645145
20  0.60388  -0.63171  2.783e-02  0.1031363
> all.equal( estElaAll[[ "pOutput" ]] + estElaAll[[ "pVarInput" ]],
+    - estElaAll[[ "pLabor" ]] )
[1] TRUE
> estElaAllObs <- elas( estResultAll, yObs = TRUE )
> print( estElaAllObs )
    pOutput pVarInput     pLabor       land
1   0.01626  -0.01610 -1.607e-04  0.0006308
2  -0.13606   0.13430  1.758e-03  0.0059692
3  -0.04310   0.04243  6.743e-04  0.0002996
4   0.02908  -0.02883 -2.481e-04  0.0040340
5  -0.09354   0.09303  5.149e-04  0.0085551
6   0.60773  -0.60773 -1.985e-16  0.0135785
7   0.42872  -0.42849 -2.273e-04  0.0162574
8   0.85405  -0.85618  2.131e-03  0.0155392
9   0.33774  -0.33909  1.349e-03  0.0229172
10 -0.82026   0.82696 -6.703e-03  0.1225858
11 -0.60175   0.60821 -6.459e-03  0.0949142
12  0.02022  -0.02042  2.085e-04  0.1325351
13 -0.10106   0.10222 -1.160e-03  0.0437853
14 -0.34281   0.34651 -3.696e-03  0.0743852
15 -0.56534   0.57010 -4.755e-03  0.0505101
16  0.65621  -0.66920  1.299e-02 -0.1381972
17  0.10818  -0.11057  2.387e-03 -0.0983479
18 -0.10849   0.11259 -4.108e-03  0.0988085
19  0.42253  -0.44243  1.991e-02  0.1645429
20  0.60090  -0.62859  2.769e-02  0.1026270
> all.equal( estElaAllObs[[ "pOutput" ]] + estElaAllObs[[ "pVarInput" ]],
+    - estElaAllObs[[ "pLabor" ]] )
[1] TRUE
> # different order of weights
> npseed( 123 )
> estResultAll2 <- npregHom( "qVarInput",
+    xNames = c( "pOutput", "pVarInput", "pLabor", "land" ),
+    data = germanFarms, homWeights = weights[ c( 3, 2, 1 ) ],
+    restrictGrad = FALSE )
Multistart 1 of 4 |Multistart 1 of 4 |Multistart 1 of 4 |Multistart 1 of 4 /Multistart 1 of 4 -Multistart 1 of 4 \Multistart 1 of 4 |Multistart 1 of 4 /Multistart 1 of 4 -Multistart 1 of 4 |Multistart 1 of 4 |Multistart 1 of 4 /Multistart 1 of 4 -Multistart 2 of 4 |Multistart 2 of 4 |Multistart 2 of 4 /Multistart 2 of 4 -Multistart 2 of 4 \Multistart 2 of 4 |Multistart 2 of 4 |Multistart 2 of 4 |Multistart 3 of 4 |Multistart 3 of 4 |Multistart 3 of 4 /Multistart 3 of 4 -Multistart 3 of 4 \Multistart 3 of 4 |Multistart 3 of 4 |Multistart 3 of 4 |Multistart 3 of 4 /Multistart 4 of 4 |Multistart 4 of 4 |Multistart 4 of 4 /Multistart 4 of 4 -Multistart 4 of 4 \Multistart 4 of 4 |Multistart 4 of 4 |Multistart 4 of 4 |Multistart 4 of 4 /Multistart 4 of 4 -Multistart 4 of 4 \                   > all.equal( estResultAll$grad, estResultAll2$grad, tolerance = 1e-6 )
[1] TRUE
> all.equal( elas( estResultAll ), elas( estResultAll2 ), tolerance = 1e-6 )
[1] TRUE
> all.equal( elas( estResultAll, yObs = TRUE ),
+    elas( estResultAll2, yObs = TRUE ), tolerance = 1e-6 )
[1] TRUE
> 
> 
> # estimation with Epanechnikov kernel (restricted gradients)
> npseed( 123 )
> estResultEpa <- npregHom( "qVarInput",
+    xNames = c( "pOutput", "pVarInput", "pLabor", "land" ),
+    data = germanFarms, homWeights = weights, ckertype="epanechnikov" )
Multistart 1 of 3 |Multistart 1 of 3 |Multistart 1 of 3 |Multistart 1 of 3 /Multistart 1 of 3 -Multistart 1 of 3 \Multistart 1 of 3 |Multistart 1 of 3 |Multistart 2 of 3 |Multistart 2 of 3 |Multistart 2 of 3 /Multistart 2 of 3 -Multistart 2 of 3 |Multistart 2 of 3 |Multistart 2 of 3 /Multistart 2 of 3 -Multistart 3 of 3 |Multistart 3 of 3 |Multistart 3 of 3 /Multistart 3 of 3 |Multistart 3 of 3 |                   > print( estResultEpa )
$call
npregHom(yName = "qVarInput", xNames = c("pOutput", "pVarInput", 
    "pLabor", "land"), homWeights = weights, data = germanFarms, 
    ckertype = "epanechnikov")

$yName
[1] "qVarInput"

$xNames
[1] "pOutput"   "pVarInput" "pLabor"    "land"     

$homWeights
  pOutput pVarInput    pLabor 
0.6723447 0.3269169 0.0007385 

$restrictGrad
[1] TRUE

$est

Regression Data: 20 training points, in 3 variable(s)
                 r_2   r_3   r_4
Bandwidth(s): 0.0163 21.37 1.699

Kernel Regression Estimator: Local-Constant
Bandwidth Type: Fixed

Continuous Kernel Type: Second-Order Epanechnikov
No. Continuous Explanatory Vars.: 3


$grad
       pOutput pVarInput     pLabor     land
 [1,] -1.14797   0.38353  9.521e-03  0.09744
 [2,] -1.13936   0.20697  6.851e-03  0.10180
 [3,] -0.05796   0.02558  1.885e-04  0.01581
 [4,]  0.72531  -0.78108 -5.375e-06  0.00000
 [5,]  0.70237  -0.73933  6.859e-06  0.00000
 [6,]  4.10017  -4.09339 -4.013e-05  0.19468
 [7,]  5.21941  -5.23096 -7.434e-05  0.13288
 [8,]  2.86438  -2.81153  4.447e-05  0.24942
 [9,]  6.93930  -6.73322  2.420e-04  0.15981
[10,] -5.53037   5.13430  1.756e-04 19.43095
[11,] -1.83779   1.33697  1.941e-03 13.07214
[12,] -0.84625   0.44019  1.657e-03 22.51358
[13,] -2.50746   2.22849  4.036e-04  1.09360
[14,] -2.59034   2.32447  3.456e-04  1.42242
[15,] -2.73374   2.49222  3.820e-04  0.89794
[16,]  0.53839  -0.43417 -1.728e-04 -1.25870
[17,]  0.51829  -0.41339 -1.613e-04 -1.25870
[18,] -4.58599   3.67030 -1.599e-05  2.17248
[19,] -2.00008   1.25962  1.107e-03  6.09557
[20,]  2.83722  -2.52601  1.073e-03  3.52720

attr(,"class")
[1] "npregHom"
> all.equal( estResultEpa$grad[ , "pOutput" ] * germanFarms$pOutput +
+    estResultEpa$grad[ , "pVarInput" ] * germanFarms$pVarInput,
+    - estResultEpa$grad[ , "pLabor" ] * germanFarms$pLabor )
[1] TRUE
> estElaEpa <- elas( estResultEpa )
> print( estElaEpa )
     pOutput pVarInput     pLabor       land
1  -0.198346  0.056789  0.1415566  0.0040906
2  -0.188673  0.030069  0.1586034  0.0040635
3  -0.009387  0.003664  0.0057231  0.0006423
4   0.105620 -0.105489 -0.0001309  0.0000000
5   0.106916 -0.107088  0.0001723  0.0000000
6   0.622151 -0.621121 -0.0010294  0.0074529
7   0.852011 -0.849914 -0.0020970  0.0052060
8   0.471393 -0.472711  0.0013180  0.0099233
9   1.155051 -1.161943  0.0068915  0.0062345
10 -0.877571  0.872291  0.0052802  0.7686773
11 -0.270005  0.214571  0.0554342  0.5157047
12 -0.104046  0.058304  0.0457424  0.8761221
13 -0.299441  0.287973  0.0114675  0.0438208
14 -0.323541  0.313843  0.0096981  0.0589305
15 -0.358717  0.347580  0.0111374  0.0366537
16  0.071558 -0.065489 -0.0060692 -0.0564375
17  0.071592 -0.065440 -0.0061524 -0.0595892
18 -0.578987  0.579595 -0.0006077  0.1076753
19 -0.233117  0.190208  0.0429098  0.3080499
20  0.334158 -0.378491  0.0443333  0.1834350
> all.equal( estElaEpa[[ "pOutput" ]] + estElaEpa[[ "pVarInput" ]],
+    - estElaEpa[[ "pLabor" ]] )
[1] TRUE
> estElaEpaObs <- elas( estResultEpa, yObs = TRUE )
> print( estElaEpaObs )
     pOutput pVarInput     pLabor      land
1  -0.198650  0.056876  0.1417741  0.004097
2  -0.188560  0.030051  0.1585088  0.004061
3  -0.009383  0.003663  0.0057203  0.000642
4   0.105225 -0.105095 -0.0001304  0.000000
5   0.107319 -0.107492  0.0001730  0.000000
6   0.624085 -0.623053 -0.0010326  0.007476
7   0.836695 -0.834636 -0.0020593  0.005112
8   0.474914 -0.476242  0.0013279  0.009997
9   1.164946 -1.171896  0.0069506  0.006288
10 -0.891822  0.886456  0.0053659  0.781160
11 -0.268498  0.213373  0.0551248  0.512826
12 -0.104949  0.058810  0.0461391  0.883721
13 -0.290143  0.279032  0.0111114  0.042460
14 -0.315095  0.305650  0.0094450  0.057392
15 -0.375847  0.364178  0.0116692  0.038404
16  0.070784 -0.064781 -0.0060036 -0.055828
17  0.072386 -0.066166 -0.0062206 -0.060250
18 -0.583596  0.584209 -0.0006126  0.108532
19 -0.235355  0.192033  0.0433217  0.311007
20  0.328623 -0.372222  0.0435990  0.180397
> all.equal( estElaEpaObs[[ "pOutput" ]] + estElaEpaObs[[ "pVarInput" ]],
+    - estElaEpaObs[[ "pLabor" ]] )
[1] TRUE
> 
> # estimation with Epanechnikov kernel (gradients not restricted)
> npseed( 123 )
> estResultEpaAll <- npregHom( "qVarInput",
+    xNames = c( "pOutput", "pVarInput", "pLabor", "land" ),
+    data = germanFarms, homWeights = weights, restrictGrad = FALSE,
+    ckertype="epanechnikov" )
Multistart 1 of 4 |Multistart 1 of 4 |Multistart 1 of 4 |Multistart 1 of 4 /Multistart 1 of 4 -Multistart 1 of 4 |Multistart 1 of 4 |Multistart 1 of 4 /Multistart 1 of 4 -Multistart 2 of 4 |Multistart 2 of 4 |Multistart 2 of 4 /Multistart 2 of 4 -Multistart 2 of 4 \Multistart 2 of 4 |Multistart 2 of 4 |Multistart 3 of 4 |Multistart 3 of 4 |Multistart 3 of 4 /Multistart 3 of 4 -Multistart 3 of 4 \Multistart 3 of 4 |Multistart 3 of 4 |Multistart 3 of 4 /Multistart 3 of 4 -Multistart 3 of 4 \Multistart 3 of 4 |Multistart 4 of 4 |Multistart 4 of 4 |Multistart 4 of 4 /Multistart 4 of 4 -Multistart 4 of 4 \Multistart 4 of 4 |Multistart 4 of 4 |Multistart 4 of 4 |Multistart 4 of 4 /                   > print( estResultEpaAll )
$call
npregHom(yName = "qVarInput", xNames = c("pOutput", "pVarInput", 
    "pLabor", "land"), homWeights = weights, data = germanFarms, 
    restrictGrad = FALSE, ckertype = "epanechnikov")

$yName
[1] "qVarInput"

$xNames
[1] "pOutput"   "pVarInput" "pLabor"    "land"     

$homWeights
  pOutput pVarInput    pLabor 
0.6723447 0.3269169 0.0007385 

$restrictGrad
[1] FALSE

$est

Regression Data: 20 training points, in 4 variable(s)
                  r_1     r_2   r_3   r_4
Bandwidth(s): 0.01937 0.03593 52.01 1.745

Kernel Regression Estimator: Local-Constant
Bandwidth Type: Fixed

Continuous Kernel Type: Second-Order Epanechnikov
No. Continuous Explanatory Vars.: 4


$grad
       pOutput pVarInput     pLabor     land
 [1,]  0.03167  -0.04178  4.810e-05  0.07198
 [2,] -0.83247   0.91270  2.270e-04  0.84165
 [3,] -1.90942   2.14568  6.220e-05  0.51724
 [4,] -1.96285   2.10583  5.872e-05  1.10121
 [5,] -1.60597   1.68476  1.727e-05  0.85679
 [6,]  0.04019  -0.04228  1.239e-05  0.40082
 [7,]  0.01192  -0.01409  1.219e-05  0.40579
 [8,] -0.09535   0.08889  2.519e-05  2.74171
 [9,] -0.05976   0.05323  2.674e-05  0.66390
[10,] -0.14875   0.12602  7.298e-05  9.25323
[11,] -0.13334   0.06783  3.048e-04 10.20941
[12,]  0.60010  -0.60194  2.153e-04 21.04409
[13,]  0.31947  -0.25307 -1.918e-04 -1.57647
[14,]  0.16068  -0.12036 -1.361e-04 -0.28203
[15,] -0.01593   0.01658 -7.598e-06  0.58919
[16,]  0.82925  -0.63354 -4.173e-04 -4.49141
[17,]  0.89268  -0.71042 -2.844e-04 -6.00279
[18,] -0.35812   0.26811  7.565e-05  2.70395
[19,]  0.52707  -0.49983  3.625e-04  7.42152
[20,]  0.60797  -0.53321  2.006e-04  3.55031

attr(,"class")
[1] "npregHom"
> all.equal( estResultEpaAll$grad[ , "pOutput" ] * germanFarms$pOutput +
+    estResultEpaAll$grad[ , "pVarInput" ] * germanFarms$pVarInput,
+    - estResultEpaAll$grad[ , "pLabor" ] * germanFarms$pLabor )
[1] TRUE
> estElaEpaAll <- elas( estResultEpaAll )
> print( estElaEpaAll )
     pOutput pVarInput     pLabor      land
1   0.005474 -0.006189  0.0007154  0.003023
2  -0.134605  0.129474  0.0051311  0.032803
3  -0.299105  0.297279  0.0018263  0.020329
4  -0.289786  0.288337  0.0014496  0.042686
5  -0.245293  0.244858  0.0004352  0.032943
6   0.006142 -0.006462  0.0003201  0.015457
7   0.001965 -0.002313  0.0003472  0.016061
8  -0.015624  0.014881  0.0007434  0.108611
9  -0.009801  0.009051  0.0007505  0.025519
10 -0.023623  0.021427  0.0021960  0.366357
11 -0.019910  0.011063  0.0088461  0.409344
12  0.074450 -0.080449  0.0059989  0.826344
13  0.038802 -0.033260 -0.0055420 -0.064247
14  0.020332 -0.016464 -0.0038681 -0.011837
15 -0.002095  0.002317 -0.0002220  0.024102
16  0.105283 -0.091283 -0.0139998 -0.192369
17  0.120977 -0.110335 -0.0106416 -0.278812
18 -0.045048  0.042184  0.0028640  0.133527
19  0.061587 -0.075667  0.0140802  0.376005
20  0.071853 -0.080171  0.0083184  0.185275
> all.equal( estElaEpaAll[[ "pOutput" ]] + estElaEpaAll[[ "pVarInput" ]],
+    - estElaEpaAll[[ "pLabor" ]] )
[1] TRUE
> estElaEpaAllObs <- elas( estResultEpaAll, yObs = TRUE )
> print( estElaEpaAllObs )
     pOutput pVarInput     pLabor      land
1   0.005480 -0.006197  0.0007162  0.003026
2  -0.137771  0.132519  0.0052518  0.033575
3  -0.309088  0.307201  0.0018873  0.021007
4  -0.284763  0.283338  0.0014244  0.041946
5  -0.245383  0.244947  0.0004354  0.032955
6   0.006117 -0.006435  0.0003188  0.015393
7   0.001911 -0.002248  0.0003375  0.015612
8  -0.015809  0.015057  0.0007522  0.109896
9  -0.010032  0.009264  0.0007682  0.026121
10 -0.023987  0.021757  0.0022298  0.371997
11 -0.019480  0.010825  0.0086554  0.400520
12  0.074423 -0.080419  0.0059967  0.826040
13  0.036967 -0.031687 -0.0052799 -0.061208
14  0.019545 -0.015827 -0.0037184 -0.011379
15 -0.002191  0.002423 -0.0002321  0.025199
16  0.109026 -0.094529 -0.0144976 -0.199209
17  0.124674 -0.113707 -0.0109668 -0.287334
18 -0.045573  0.042675  0.0028974  0.135084
19  0.062022 -0.076202  0.0141796  0.378660
20  0.070419 -0.078571  0.0081524  0.181578
> all.equal( estElaEpaAllObs[[ "pOutput" ]] + estElaEpaAllObs[[ "pVarInput" ]],
+    - estElaEpaAllObs[[ "pLabor" ]] )
[1] TRUE
> # different order of weights
> npseed( 123 )
> estResultEpaAll2 <- npregHom( "qVarInput",
+    xNames = c( "pOutput", "pVarInput", "pLabor", "land" ),
+    data = germanFarms, homWeights = weights[ c( 3, 2, 1 ) ],
+    restrictGrad = FALSE, ckertype="epanechnikov" )
Multistart 1 of 4 |Multistart 1 of 4 |Multistart 1 of 4 |Multistart 1 of 4 /Multistart 1 of 4 -Multistart 1 of 4 |Multistart 1 of 4 |Multistart 1 of 4 /Multistart 1 of 4 -Multistart 2 of 4 |Multistart 2 of 4 |Multistart 2 of 4 /Multistart 2 of 4 -Multistart 2 of 4 \Multistart 2 of 4 |Multistart 2 of 4 |Multistart 3 of 4 |Multistart 3 of 4 |Multistart 3 of 4 /Multistart 3 of 4 -Multistart 3 of 4 \Multistart 3 of 4 |Multistart 3 of 4 |Multistart 3 of 4 /Multistart 3 of 4 -Multistart 3 of 4 \Multistart 3 of 4 |Multistart 4 of 4 |Multistart 4 of 4 |Multistart 4 of 4 /Multistart 4 of 4 -Multistart 4 of 4 \Multistart 4 of 4 |Multistart 4 of 4 |Multistart 4 of 4 |Multistart 4 of 4 /                   > all.equal( estResultEpaAll$grad, estResultEpaAll2$grad, tolerance = 1e-6 )
[1] TRUE
> all.equal( elas( estResultEpaAll ), elas( estResultEpaAll2 ), tolerance = 1e-6 )
[1] TRUE
> all.equal( elas( estResultEpaAll, yObs = TRUE ),
+    elas( estResultEpaAll2, yObs = TRUE ), tolerance = 1e-6 )
[1] TRUE
> 
> 
> # estimation with manual bandwidth selection (restricted gradients)
> estResultMan <- npregHom( "qVarInput",
+    xNames = c( "pOutput", "pVarInput", "pLabor", "land" ),
+    data = germanFarms, homWeights = weights, bws = rep( 1, 3 ),
+    bwscaling = TRUE )
> print( estResultMan )
$call
npregHom(yName = "qVarInput", xNames = c("pOutput", "pVarInput", 
    "pLabor", "land"), homWeights = weights, data = germanFarms, 
    bws = rep(1, 3), bwscaling = TRUE)

$yName
[1] "qVarInput"

$xNames
[1] "pOutput"   "pVarInput" "pLabor"    "land"     

$homWeights
  pOutput pVarInput    pLabor 
0.6723447 0.3269169 0.0007385 

$restrictGrad
[1] TRUE

$est

Regression Data: 20 training points, in 3 variable(s)
                 r_2 r_3 r_4
Scale Factor(s):   1   1   1

Kernel Regression Estimator: Local-Constant
Bandwidth Type: Fixed

Continuous Kernel Type: Second-Order Gaussian
No. Continuous Explanatory Vars.: 3


$grad
      pOutput pVarInput     pLabor   land
 [1,] -1.4898   1.04380  0.0069176  1.120
 [2,] -2.8355   2.45477  0.0048771  1.673
 [3,] -1.8973   2.23065 -0.0004034  1.243
 [4,] -1.9843   2.00220  0.0007618  1.397
 [5,] -1.6495   1.58670  0.0008466  1.442
 [6,] -1.1804   0.97103  0.0012386  2.042
 [7,] -1.3414   1.07346  0.0015798  2.827
 [8,] -1.4510   0.99464  0.0024143  4.111
 [9,] -0.9541   0.66535  0.0015448  2.560
[10,] -1.7377   0.90644  0.0040494  6.586
[11,] -2.2267   0.96781  0.0060171  9.518
[12,] -1.6074   0.35236  0.0054674  9.600
[13,]  0.3107  -0.44853  0.0007340  3.227
[14,]  0.3028  -0.38788  0.0005187  3.003
[15,] -0.5496   0.01993  0.0023781  5.556
[16,]  2.4550  -1.39102 -0.0033162 -2.028
[17,]  2.7353  -1.49666 -0.0036950 -3.100
[18,] -0.2904  -0.02190  0.0010560  2.158
[19,] -0.9306   0.01465  0.0027424  4.574
[20,] -0.4764  -0.23831  0.0022222  3.932

attr(,"class")
[1] "npregHom"
> all.equal( estResultMan$grad[ , "pOutput" ] * germanFarms$pOutput +
+    estResultMan$grad[ , "pVarInput" ] * germanFarms$pVarInput,
+    - estResultMan$grad[ , "pLabor" ] * germanFarms$pLabor )
[1] TRUE
> estElaMan <- elas( estResultMan )
> print( estElaMan )
    pOutput pVarInput   pLabor     land
1  -0.25220  0.151426  0.10077  0.04609
2  -0.45494  0.345546  0.10940  0.06470
3  -0.29406  0.305781 -0.01172  0.04834
4  -0.29239  0.273620  0.01877  0.05403
5  -0.25193  0.230597  0.02134  0.05544
6  -0.18025  0.148280  0.03197  0.07869
7  -0.22058  0.175688  0.04489  0.11157
8  -0.23573  0.165089  0.07064  0.16145
9  -0.15577  0.112617  0.04315  0.09796
10 -0.27127  0.151500  0.11977  0.25629
11 -0.32640  0.154973  0.17143  0.37465
12 -0.20499  0.048409  0.15658  0.38751
13  0.03833 -0.059878  0.02154  0.13359
14  0.03896 -0.053956  0.01500  0.12818
15 -0.07412  0.002857  0.07127  0.23309
16  0.31232 -0.200831 -0.11149 -0.08703
17  0.36548 -0.229176 -0.13630 -0.14197
18 -0.03609 -0.003405  0.03950  0.10528
19 -0.10906  0.002225  0.10683  0.23242
20 -0.05683 -0.036168  0.09300  0.20713
> all.equal( estElaMan[[ "pOutput" ]] + estElaMan[[ "pVarInput" ]],
+    - estElaMan[[ "pLabor" ]] )
[1] TRUE
> estElaManObs <- elas( estResultMan, yObs = TRUE )
> print( estElaManObs )
    pOutput pVarInput   pLabor     land
1  -0.25780  0.154792  0.10301  0.04711
2  -0.46926  0.356422  0.11284  0.06674
3  -0.30713  0.319365 -0.01224  0.05048
4  -0.28787  0.269395  0.01848  0.05320
5  -0.25204  0.230691  0.02135  0.05546
6  -0.17967  0.147800  0.03187  0.07843
7  -0.21504  0.171277  0.04376  0.10877
8  -0.24058  0.168481  0.07210  0.16477
9  -0.16017  0.115802  0.04437  0.10073
10 -0.28022  0.156500  0.12372  0.26475
11 -0.32531  0.154456  0.17086  0.37340
12 -0.19935  0.047076  0.15227  0.37684
13  0.03595 -0.056161  0.02021  0.12530
14  0.03683 -0.051003  0.01417  0.12117
15 -0.07556  0.002912  0.07265  0.23762
16  0.32277 -0.207550 -0.11522 -0.08994
17  0.38203 -0.239551 -0.14248 -0.14840
18 -0.03696 -0.003486  0.04045  0.10780
19 -0.10951  0.002234  0.10727  0.23339
20 -0.05518 -0.035116  0.09029  0.20111
> all.equal( estElaManObs[[ "pOutput" ]] + estElaManObs[[ "pVarInput" ]],
+    - estElaManObs[[ "pLabor" ]] )
[1] TRUE
> # different normalized variable omitted
> estResultMan2 <- npregHom( "qVarInput",
+    xNames = c( "pOutput", "pVarInput", "pLabor", "land" ),
+    data = germanFarms, homWeights = weights[ c( 3, 2, 1 ) ],
+    bws = rep( 1, 3 ), bwscaling = TRUE )
> print( estResultMan2 )
$call
npregHom(yName = "qVarInput", xNames = c("pOutput", "pVarInput", 
    "pLabor", "land"), homWeights = weights[c(3, 2, 1)], data = germanFarms, 
    bws = rep(1, 3), bwscaling = TRUE)

$yName
[1] "qVarInput"

$xNames
[1] "pOutput"   "pVarInput" "pLabor"    "land"     

$homWeights
   pLabor pVarInput   pOutput 
0.0007385 0.3269169 0.6723447 

$restrictGrad
[1] TRUE

$est

Regression Data: 20 training points, in 3 variable(s)
                 r_1 r_2 r_4
Scale Factor(s):   1   1   1

Kernel Regression Estimator: Local-Constant
Bandwidth Type: Fixed

Continuous Kernel Type: Second-Order Gaussian
No. Continuous Explanatory Vars.: 3


$grad
      pOutput pVarInput     pLabor    land
 [1,] -0.2789  -0.13688  0.0046043  0.3981
 [2,] -0.4932  -0.24126  0.0050420  1.4846
 [3,] -0.3620  -0.17682  0.0027657  3.9030
 [4,] -0.2133  -0.10423  0.0018537  1.6886
 [5,] -0.2156  -0.10540  0.0019144  1.5539
 [6,] -0.2187  -0.10690  0.0019263  1.6999
 [7,] -0.2518  -0.12306  0.0021661  2.2753
 [8,] -0.3023  -0.14771  0.0025162  2.9253
 [9,] -0.1989  -0.09723  0.0017519  1.6834
[10,] -0.4249  -0.20758  0.0034155  4.0293
[11,] -0.7477  -0.36527  0.0058999  6.1099
[12,] -1.5178  -0.74110  0.0103137 10.3009
[13,]  0.2188   0.10683 -0.0014056  1.6245
[14,] -0.1481  -0.07231  0.0010071  3.0966
[15,] -0.5345  -0.26099  0.0036539  5.1904
[16,]  1.4024   0.68441 -0.0082461 -3.1568
[17,]  1.2494   0.60967 -0.0070560 -3.2826
[18,]  0.1615   0.07880 -0.0008641  0.1781
[19,] -1.1692  -0.57032  0.0057400  4.7021
[20,] -0.8107  -0.39537  0.0037447  3.3550

attr(,"class")
[1] "npregHom"
> all.equal( estResultMan2$grad[ , "pOutput" ] * germanFarms$pOutput +
+    estResultMan2$grad[ , "pVarInput" ] * germanFarms$pVarInput,
+    - estResultMan2$grad[ , "pLabor" ] * germanFarms$pLabor )
[1] TRUE
> estElaMan2 <- elas( estResultMan2 )
> print( estElaMan2 )
    pOutput pVarInput   pLabor      land
1  -0.04795  -0.02017  0.06812  0.016631
2  -0.07719  -0.03312  0.11031  0.056000
3  -0.05451  -0.02355  0.07806  0.147457
4  -0.03114  -0.01412  0.04526  0.064739
5  -0.03287  -0.01529  0.04816  0.059633
6  -0.03366  -0.01645  0.05011  0.065997
7  -0.04169  -0.02028  0.06197  0.090416
8  -0.04968  -0.02480  0.07448  0.116229
9  -0.03289  -0.01667  0.04956  0.065233
10 -0.06773  -0.03543  0.10316  0.160136
11 -0.11275  -0.06017  0.17292  0.247407
12 -0.19312  -0.10158  0.29470  0.414829
13  0.02692   0.01422 -0.04114  0.067056
14 -0.01900  -0.01003  0.02903  0.131778
15 -0.07188  -0.03731  0.10919  0.217147
16  0.17886   0.09906 -0.27792 -0.135821
17  0.16825   0.09409 -0.26234 -0.151506
18  0.02010   0.01226 -0.03236  0.008701
19 -0.13725  -0.08674  0.22399  0.239337
20 -0.09634  -0.05977  0.15611  0.176048
> all.equal( estElaMan2[[ "pOutput" ]] + estElaMan2[[ "pVarInput" ]],
+    - estElaMan2[[ "pLabor" ]] )
[1] TRUE
> estElaMan2Obs <- elas( estResultMan2, yObs = TRUE )
> print( estElaMan2Obs )
    pOutput pVarInput   pLabor      land
1  -0.04826 -0.020299  0.06856  0.016738
2  -0.08163 -0.035030  0.11666  0.059224
3  -0.05860 -0.025316  0.08391  0.158519
4  -0.03094 -0.014025  0.04497  0.064319
5  -0.03295 -0.015324  0.04827  0.059767
6  -0.03329 -0.016272  0.04956  0.065280
7  -0.04037 -0.019635  0.06000  0.087539
8  -0.05012 -0.025020  0.07514  0.117255
9  -0.03340 -0.016922  0.05032  0.066232
10 -0.06852 -0.035840  0.10435  0.161984
11 -0.10923 -0.058295  0.16753  0.239695
12 -0.18823 -0.099011  0.28725  0.404339
13  0.02532  0.013376 -0.03870  0.063073
14 -0.01801 -0.009508  0.02752  0.124944
15 -0.07349 -0.038137  0.11162  0.221990
16  0.18438  0.102119 -0.28650 -0.140014
17  0.17449  0.097582 -0.27208 -0.157125
18  0.02055  0.012543 -0.03310  0.008899
19 -0.13758 -0.086947  0.22453  0.239909
20 -0.09389 -0.058260  0.15215  0.171588
> all.equal( estElaMan2Obs[[ "pOutput" ]] + estElaMan2Obs[[ "pVarInput" ]],
+    - estElaMan2Obs[[ "pLabor" ]] )
[1] TRUE
> 
> # estimation with manual bandwidth selection (gradients not restricted)
> estResultManAll <- npregHom( "qVarInput",
+    xNames = c( "pOutput", "pVarInput", "pLabor", "land" ),
+    data = germanFarms, homWeights = weights, restrictGrad = FALSE,
+    bws = rep( 1, 4 ), bwscaling = TRUE )
> print( estResultManAll )
$call
npregHom(yName = "qVarInput", xNames = c("pOutput", "pVarInput", 
    "pLabor", "land"), homWeights = weights, data = germanFarms, 
    restrictGrad = FALSE, bws = rep(1, 4), bwscaling = TRUE)

$yName
[1] "qVarInput"

$xNames
[1] "pOutput"   "pVarInput" "pLabor"    "land"     

$homWeights
  pOutput pVarInput    pLabor 
0.6723447 0.3269169 0.0007385 

$restrictGrad
[1] FALSE

$est

Regression Data: 20 training points, in 4 variable(s)
                 r_1 r_2 r_3 r_4
Scale Factor(s):   1   1   1   1

Kernel Regression Estimator: Local-Constant
Bandwidth Type: Fixed

Continuous Kernel Type: Second-Order Gaussian
No. Continuous Explanatory Vars.: 4


$grad
       pOutput pVarInput     pLabor    land
 [1,]  0.48388  -0.97191  0.0040560  0.6604
 [2,] -3.65993   3.53543  0.0039925  1.0953
 [3,] -3.82316   4.43204 -0.0005164  0.2903
 [4,] -5.22794   5.42872  0.0011550  0.9044
 [5,] -3.23437   3.22303  0.0010151  0.9734
 [6,] -0.52226   0.31589  0.0012208  1.8110
 [7,] -0.99388   0.72400  0.0015813  2.5333
 [8,] -0.74838   0.27500  0.0025952  4.1736
 [9,] -0.28552   0.01275  0.0015915  2.5074
[10,] -0.25937  -0.43578  0.0038315  6.1480
[11,]  0.52950  -1.36317  0.0049372  7.7652
[12,]  1.30051  -2.14795  0.0045126  7.8012
[13,]  1.79355  -1.75692  0.0004523  2.3194
[14,]  1.62746  -1.63964  0.0006453  2.7772
[15,]  0.68838  -1.08744  0.0021036  4.5772
[16,]  3.90297  -2.77186 -0.0028657 -1.7417
[17,]  3.90630  -2.66907 -0.0030696 -2.5017
[18,]  0.05381  -0.43563  0.0016316  2.6043
[19,]  1.27327  -1.63296  0.0025340  3.7094
[20,]  1.96517  -2.17506  0.0022862  3.4821

attr(,"class")
[1] "npregHom"
> all.equal( estResultManAll$grad[ , "pOutput" ] * germanFarms$pOutput +
+    estResultManAll$grad[ , "pVarInput" ] * germanFarms$pVarInput,
+    - estResultManAll$grad[ , "pLabor" ] * germanFarms$pLabor )
[1] TRUE
> estElaManAll <- elas( estResultManAll )
> print( estElaManAll )
     pOutput pVarInput   pLabor     land
1   0.082566 -0.142123  0.05956  0.02738
2  -0.592147  0.501838  0.09031  0.04272
3  -0.608385  0.623786 -0.01540  0.01159
4  -0.771527  0.743025  0.02850  0.03504
5  -0.491495  0.466040  0.02546  0.03724
6  -0.079365  0.048004  0.03136  0.06943
7  -0.162610  0.117902  0.04471  0.09947
8  -0.121091  0.045460  0.07563  0.16326
9  -0.046527  0.002154  0.04437  0.09576
10 -0.040421 -0.072711  0.11313  0.23885
11  0.077749 -0.218649  0.14090  0.30617
12  0.164918 -0.293430  0.12851  0.31312
13  0.220316 -0.233534  0.01322  0.09560
14  0.209000 -0.227615  0.01862  0.11830
15  0.092477 -0.155270  0.06279  0.19129
16  0.496717 -0.400342 -0.09638 -0.07478
17  0.521621 -0.408454 -0.11317 -0.11449
18  0.006697 -0.067810  0.06111  0.12723
19  0.149518 -0.248434  0.09892  0.18887
20  0.233677 -0.329040  0.09536  0.18283
> all.equal( estElaManAll[[ "pOutput" ]] + estElaManAll[[ "pVarInput" ]],
+    - estElaManAll[[ "pLabor" ]] )
[1] TRUE
> estElaManAllObs <- elas( estResultManAll, yObs = TRUE )
> print( estElaManAllObs )
     pOutput pVarInput   pLabor     land
1   0.083733  -0.14413  0.06040  0.02777
2  -0.605705   0.51333  0.09238  0.04369
3  -0.618876   0.63454 -0.01567  0.01179
4  -0.758452   0.73043  0.02802  0.03445
5  -0.494193   0.46860  0.02560  0.03744
6  -0.079493   0.04808  0.03141  0.06954
7  -0.159323   0.11552  0.04380  0.09746
8  -0.124081   0.04658  0.07750  0.16729
9  -0.047932   0.00222  0.04571  0.09865
10 -0.041826  -0.07524  0.11707  0.24716
11  0.077360  -0.21755  0.14019  0.30463
12  0.161285  -0.28697  0.12568  0.30622
13  0.207535  -0.21999  0.01245  0.09006
14  0.197968  -0.21560  0.01763  0.11206
15  0.094642  -0.15890  0.06426  0.19576
16  0.513145  -0.41358 -0.09956 -0.07725
17  0.545567  -0.42720 -0.11836 -0.11975
18  0.006848  -0.06934  0.06249  0.13010
19  0.149829  -0.24895  0.09912  0.18926
20  0.227617  -0.32051  0.09289  0.17809
> all.equal( estElaManAllObs[[ "pOutput" ]] + estElaManAllObs[[ "pVarInput" ]],
+    - estElaManAllObs[[ "pLabor" ]] )
[1] TRUE
> # different order of weights
> estResultManAll2 <- npregHom( "qVarInput",
+    xNames = c( "pOutput", "pVarInput", "pLabor", "land" ),
+    data = germanFarms, homWeights = weights[ c( 3, 2, 1 ) ],
+    restrictGrad = FALSE, bws = rep( 1, 4 ), bwscaling = TRUE )
> all.equal( estResultManAll$grad, estResultManAll2$grad )
[1] TRUE
> all.equal( elas( estResultManAll ), elas( estResultManAll2 ) )
[1] TRUE
> all.equal( elas( estResultManAll, yObs = TRUE ),
+    elas( estResultManAll2, yObs = TRUE ) )
[1] TRUE
> 
> 
> # local-linear estimation (restricted gradients)
> npseed( 123 )
> estResultLl <- npregHom( "qVarInput",
+    xNames = c( "pOutput", "pVarInput", "pLabor", "land" ),
+    data = germanFarms, homWeights = weights, regtype = "ll" )
Multistart 1 of 3 |Multistart 1 of 3 |Multistart 1 of 3 |Multistart 1 of 3 /Multistart 1 of 3 -Multistart 1 of 3 \Multistart 1 of 3 |Multistart 1 of 3 |Multistart 1 of 3 /Multistart 1 of 3 -Multistart 1 of 3 \Multistart 2 of 3 |Multistart 2 of 3 |Multistart 2 of 3 /Multistart 2 of 3 -Multistart 2 of 3 |Multistart 2 of 3 |Multistart 2 of 3 /Multistart 3 of 3 |Multistart 3 of 3 |Multistart 3 of 3 /Multistart 3 of 3 -Multistart 3 of 3 |Multistart 3 of 3 |Multistart 3 of 3 /                   > print( estResultLl )
$call
npregHom(yName = "qVarInput", xNames = c("pOutput", "pVarInput", 
    "pLabor", "land"), homWeights = weights, data = germanFarms, 
    regtype = "ll")

$yName
[1] "qVarInput"

$xNames
[1] "pOutput"   "pVarInput" "pLabor"    "land"     

$homWeights
  pOutput pVarInput    pLabor 
0.6723447 0.3269169 0.0007385 

$restrictGrad
[1] TRUE

$est

Regression Data: 20 training points, in 3 variable(s)
                  r_2   r_3   r_4
Bandwidth(s): 0.01269 25.36 5.628

Kernel Regression Estimator: Local-Linear
Bandwidth Type: Fixed

Continuous Kernel Type: Second-Order Gaussian
No. Continuous Explanatory Vars.: 3


$grad
        pOutput pVarInput    pLabor    land
 [1,]   35.8109  -36.8716 -0.048952 451.938
 [2,]   34.7974  -32.8516 -0.042742 451.802
 [3,]   23.6961  -20.4229 -0.030053 330.479
 [4,]    6.4592   -4.1800 -0.015445 151.495
 [5,]   -2.4228   -0.8538  0.019605  14.753
 [6,]    7.2999   -1.7292 -0.032955  41.501
 [7,]    6.2401    0.2174 -0.037364  47.133
 [8,]    6.8047   -2.0050 -0.026408  38.852
 [9,]    0.5288    0.2953 -0.004880  20.626
[10,]   -9.7325    6.2049  0.016305  10.529
[11,]   -8.7614    5.8163  0.012389  15.315
[12,]  -22.2674   17.0711  0.017264  11.799
[13,]  -21.4688   16.2616  0.016275  12.884
[14,]  -21.3423   16.3997  0.016090  12.765
[15,]  -19.2517   14.9765  0.015004   9.143
[16,]   29.0700  -33.2452  0.032767 -11.402
[17,]   28.1363  -32.2187  0.031827 -11.875
[18,]    1.9600   -3.2579  0.007027  10.199
[19,] -376.8853  304.6070 -0.053414   0.000
[20,]    1.9594   -3.1310  0.005769  11.078

attr(,"class")
[1] "npregHom"
> all.equal( estResultLl$grad[ , "pOutput" ] * germanFarms$pOutput +
+    estResultLl$grad[ , "pVarInput" ] * germanFarms$pVarInput,
+    - estResultLl$grad[ , "pLabor" ] * germanFarms$pLabor )
[1] TRUE
> estElaLl <- elas( estResultLl )
> print( estElaLl )
     pOutput pVarInput  pLabor    land
1    6.19688  -5.46795 -0.7289 19.0017
2    5.75883  -4.76991 -0.9889 18.0232
3    3.83581  -2.92397 -0.9118 13.4221
4    0.93708  -0.56242 -0.3747  5.7706
5   -0.37019  -0.12413  0.4943  0.5674
6    1.11136  -0.26325 -0.8481  1.5941
7    1.00024   0.03469 -1.0349  1.8132
8    1.12735  -0.33937 -0.7880  1.5561
9    0.08882   0.05143 -0.1402  0.8120
10  -1.55844   1.06377  0.4947  0.4203
11  -1.28163   0.92941  0.3522  0.6016
12  -2.77385   2.29088  0.4830  0.4652
13  -2.48631   2.03787  0.4484  0.5007
14  -2.61319   2.17060  0.4426  0.5184
15  -2.61010   2.15811  0.4520  0.3856
16   3.82383  -4.96281  1.1390 -0.5060
17   3.92948  -5.15668  1.2272 -0.5684
18   0.24942  -0.51857  0.2691  0.5095
19 -20.01170  20.95448 -0.9428  0.0000
20   0.22697  -0.46140  0.2344  0.5666
> all.equal( estElaLl[[ "pOutput" ]] + estElaLl[[ "pVarInput" ]],
+    - estElaLl[[ "pLabor" ]] )
[1] TRUE
> estElaLlObs <- elas( estResultLl, yObs = TRUE )
> print( estElaLlObs )
     pOutput pVarInput  pLabor    land
1    6.19688  -5.46795 -0.7289 19.0017
2    5.75883  -4.76991 -0.9889 18.0232
3    3.83581  -2.92397 -0.9118 13.4221
4    0.93707  -0.56241 -0.3747  5.7706
5   -0.37020  -0.12413  0.4943  0.5674
6    1.11111  -0.26319 -0.8479  1.5937
7    1.00032   0.03469 -1.0350  1.8134
8    1.12822  -0.33963 -0.7886  1.5573
9    0.08877   0.05140 -0.1402  0.8115
10  -1.56946   1.07129  0.4982  0.4233
11  -1.28003   0.92825  0.3518  0.6008
12  -2.76152   2.28069  0.4808  0.4631
13  -2.48420   2.03614  0.4481  0.5002
14  -2.59613   2.15643  0.4397  0.5150
15  -2.64681   2.18846  0.4583  0.3910
16   3.82200  -4.96043  1.1384 -0.5057
17   3.92960  -5.15684  1.2272 -0.5684
18   0.24942  -0.51857  0.2691  0.5095
19 -44.34914  46.43851 -2.0894  0.0000
20   0.22695  -0.46137  0.2344  0.5666
> all.equal( estElaLlObs[[ "pOutput" ]] + estElaLlObs[[ "pVarInput" ]],
+    - estElaLlObs[[ "pLabor" ]] )
[1] TRUE
> 
> # local-linear estimation (gradients not restricted)
> npseed( 123 )
> estResultLlAll <- npregHom( "qVarInput",
+    xNames = c( "pOutput", "pVarInput", "pLabor", "land" ),
+    data = germanFarms, homWeights = weights, restrictGrad = FALSE,
+    regtype = "ll" )
Multistart 1 of 4 |Multistart 1 of 4 |Multistart 1 of 4 |Multistart 1 of 4 |Multistart 1 of 4 |Multistart 2 of 4 |Multistart 2 of 4 |Multistart 2 of 4 /Multistart 2 of 4 -Multistart 2 of 4 |Multistart 2 of 4 |Multistart 3 of 4 |Multistart 3 of 4 |Multistart 3 of 4 /Multistart 3 of 4 |Multistart 3 of 4 |Multistart 4 of 4 |Multistart 4 of 4 |Multistart 4 of 4 /Multistart 4 of 4 |Multistart 4 of 4 |Multistart 4 of 4 /                   > print( estResultLlAll )
$call
npregHom(yName = "qVarInput", xNames = c("pOutput", "pVarInput", 
    "pLabor", "land"), homWeights = weights, data = germanFarms, 
    restrictGrad = FALSE, regtype = "ll")

$yName
[1] "qVarInput"

$xNames
[1] "pOutput"   "pVarInput" "pLabor"    "land"     

$homWeights
  pOutput pVarInput    pLabor 
0.6723447 0.3269169 0.0007385 

$restrictGrad
[1] FALSE

$est

Regression Data: 20 training points, in 4 variable(s)
                 r_1     r_2   r_3   r_4
Bandwidth(s): 0.1446 0.01985 6.972 2.935

Kernel Regression Estimator: Local-Linear
Bandwidth Type: Fixed

Continuous Kernel Type: Second-Order Gaussian
No. Continuous Explanatory Vars.: 4


$grad
         pOutput pVarInput    pLabor    land
 [1,]     12.263    -22.03  0.076927  79.625
 [2,]   -235.456    201.14  0.421911  21.865
 [3,]   -179.514     57.37  0.687029  62.299
 [4,]    -40.996     43.51  0.003835  29.418
 [5,]   -153.514    103.69  0.332377  29.080
 [6,]     59.476    -20.96 -0.227872  45.722
 [7,]   1266.176   -901.89 -2.132452  44.133
 [8,]    -91.124     80.05  0.051845  44.896
 [9,]    532.239   -354.27 -0.964111  41.260
[10,] -53272.122  35565.85 80.188859  58.966
[11,]     -8.611     44.05 -0.203279  54.964
[12,]   3459.568  -2519.87 -3.317288  11.314
[13,]   -141.521     75.87  0.249743   5.553
[14,]   2452.709  -1544.15 -3.487761  11.279
[15,]  -1564.725    993.55  2.289487  11.349
[16,]    360.144   -208.06 -0.469324  11.569
[17,]   -328.342    270.56  0.066210  21.151
[18,]   -118.337     44.32  0.208978 -45.569
[19,]     49.314    -26.01 -0.046980  11.218
[20,]    739.488   -393.69 -0.680228  11.540

attr(,"class")
[1] "npregHom"
> all.equal( estResultLlAll$grad[ , "pOutput" ] * germanFarms$pOutput +
+    estResultLlAll$grad[ , "pVarInput" ] * germanFarms$pVarInput,
+    - estResultLlAll$grad[ , "pLabor" ] * germanFarms$pLabor )
[1] TRUE
> estElaLlAll <- elas( estResultLlAll )
> print( estElaLlAll )
    pOutput pVarInput     pLabor    land
1     2.122    -3.268    1.14551  3.3478
2   -40.111    30.063   10.04851  0.8978
3   -28.739     8.123   20.61617  2.5024
4    -4.564     4.492    0.07138  0.8598
5   -20.486    13.166    7.31972  0.9769
6     6.733    -2.372   -4.36042  1.3058
7   204.118  -144.715  -59.40315  1.7075
8   -11.038     9.907    1.13111  1.3148
9    54.158   -37.374  -16.78460  0.9840
10  611.081  -436.801 -174.28002 -0.1686
11   -1.090     6.092   -5.00154  1.8684
12  581.806  -456.522 -125.28460  0.6022
13  -44.840    26.013   18.82703  0.5904
14  286.491  -194.971  -91.51961  0.4370
15  189.117  -127.631  -61.48621 -0.4267
16   37.425   -24.537  -12.88795  0.4056
17 -521.699   492.654   29.04456 11.5177
18  -15.087     7.068    8.01904 -2.2808
19    5.749    -3.928   -1.82068  0.5671
20   78.326   -53.051  -25.27483  0.5397
> all.equal( estElaLlAll[[ "pOutput" ]] + estElaLlAll[[ "pVarInput" ]],
+    - estElaLlAll[[ "pLabor" ]] )
[1] TRUE
> estElaLlAllObs <- elas( estResultLlAll, yObs = TRUE )
> print( estElaLlAllObs )
     pOutput pVarInput     pLabor    land
1      2.122    -3.268    1.14551  3.3478
2    -38.967    29.205    9.76187  0.8722
3    -29.059     8.214   20.84527  2.5302
4     -5.948     5.855    0.09302  1.1206
5    -23.456    15.075    8.38088  1.1185
6      9.053    -3.190   -5.86306  1.7559
7    202.974  -143.903  -59.07013  1.6979
8    -15.108    13.560    1.54820  1.7996
9     89.350   -61.659  -27.69115  1.6234
10 -8590.616  6140.575 2450.04162  2.3705
11    -1.258     7.030   -5.77218  2.1563
12   429.044  -336.655  -92.38918  0.4441
13   -16.376     9.500    6.87576  0.2156
14   298.353  -203.044  -95.30904  0.4551
15  -215.126   145.184   69.94217  0.4854
16    47.350   -31.044  -16.30593  0.5131
17   -45.857    43.304    2.55302  1.0124
18   -15.059     7.055    8.00405 -2.2765
19     5.803    -3.965   -1.83771  0.5724
20    85.652   -58.013  -27.63862  0.5902
> all.equal( estElaLlAllObs[[ "pOutput" ]] + estElaLlAllObs[[ "pVarInput" ]],
+    - estElaLlAllObs[[ "pLabor" ]] )
[1] TRUE
> 
> 
> # local-linear estimation with Epanechnikov kernel (restricted gradients)
> npseed( 123 )
> estResultLlEpa <- npregHom( "qVarInput",
+    xNames = c( "pOutput", "pVarInput", "pLabor", "land" ),
+    data = germanFarms, homWeights = weights, ckertype="epanechnikov",
+    regtype = "ll" )
Multistart 1 of 3 |Multistart 1 of 3 |Multistart 1 of 3 |Multistart 1 of 3 /Multistart 1 of 3 |Multistart 1 of 3 |Multistart 2 of 3 |Multistart 2 of 3 |Multistart 2 of 3 /Multistart 2 of 3 -Multistart 2 of 3 \Multistart 2 of 3 |Multistart 2 of 3 |Multistart 2 of 3 |Multistart 2 of 3 /Multistart 2 of 3 -Multistart 2 of 3 \Multistart 3 of 3 |Multistart 3 of 3 |Multistart 3 of 3 /Multistart 3 of 3 -Multistart 3 of 3 |Multistart 3 of 3 |Multistart 3 of 3 /Multistart 3 of 3 -                   > print( estResultLlEpa )
$call
npregHom(yName = "qVarInput", xNames = c("pOutput", "pVarInput", 
    "pLabor", "land"), homWeights = weights, data = germanFarms, 
    ckertype = "epanechnikov", regtype = "ll")

$yName
[1] "qVarInput"

$xNames
[1] "pOutput"   "pVarInput" "pLabor"    "land"     

$homWeights
  pOutput pVarInput    pLabor 
0.6723447 0.3269169 0.0007385 

$restrictGrad
[1] TRUE

$est

Regression Data: 20 training points, in 3 variable(s)
                r_2   r_3   r_4
Bandwidth(s): 0.133 30.84 20.76

Kernel Regression Estimator: Local-Linear
Bandwidth Type: Fixed

Continuous Kernel Type: Second-Order Epanechnikov
No. Continuous Explanatory Vars.: 3


$grad
      pOutput pVarInput     pLabor   land
 [1,]  4.5552  -4.67424 -0.0063847 113.70
 [2,] -1.3378   0.92859  0.0037418  16.35
 [3,]  0.2275   1.16366 -0.0067049  22.75
 [4,] -0.5625   0.92254 -0.0017528  20.66
 [5,] -0.7841   0.79152  0.0001875  19.45
 [6,] -0.5913   0.68697 -0.0005659  20.09
 [7,] -0.1365   0.72491 -0.0033856  22.07
 [8,]  0.1506   0.77861 -0.0052528  22.94
 [9,] -0.4760   0.56436 -0.0006374  20.27
[10,]  0.6121   0.76083 -0.0075298  24.31
[11,]  1.0710   0.69786 -0.0094327  25.32
[12,]  3.5612   0.08013 -0.0162421  29.78
[13,]  4.9256  -0.38878 -0.0189339  31.92
[14,]  3.5006   0.05444 -0.0158444  29.84
[15,]  3.1216   0.16443 -0.0148349  29.40
[16,]  6.1129  -1.03620 -0.0186823  31.68
[17,]  6.2305  -1.13744 -0.0178458  29.90
[18,]  7.9501  -4.26304 -0.0086980  21.53
[19,]  8.7429  -3.57319 -0.0123747  26.01
[20,] 10.1258  -1.95992 -0.0217571  36.81

attr(,"class")
[1] "npregHom"
> all.equal( estResultLlEpa$grad[ , "pOutput" ] * germanFarms$pOutput +
+    estResultLlEpa$grad[ , "pVarInput" ] * germanFarms$pVarInput,
+    - estResultLlEpa$grad[ , "pLabor" ] * germanFarms$pLabor )
[1] TRUE
> estElaLlEpa <- elas( estResultLlEpa )
> print( estElaLlEpa )
    pOutput pVarInput    pLabor   land
1   0.78834 -0.693253 -0.095085 4.7811
2  -0.22133  0.134780  0.086545 0.6518
3   0.03655  0.165305 -0.201851 0.9168
4  -0.08421  0.128081 -0.043873 0.8120
5  -0.12214  0.117318  0.004821 0.7628
6  -0.09161  0.106427 -0.014819 0.7853
7  -0.02231  0.117931 -0.095622 0.8658
8   0.02447  0.129245 -0.153714 0.9012
9  -0.07910  0.097223 -0.018122 0.7894
10  0.09694  0.129022 -0.225967 0.9599
11  0.15863  0.112911 -0.271540 1.0071
12  0.47296  0.011464 -0.484420 1.2520
13  0.63016 -0.053822 -0.576342 1.3704
14  0.43573  0.007326 -0.443051 1.2322
15  0.41461  0.023213 -0.437819 1.2149
16  0.82758 -0.159204 -0.668377 1.4467
17  0.83636 -0.174981 -0.661383 1.3754
18  0.99760 -0.669105 -0.328500 1.0605
19  1.04207 -0.551768 -0.490299 1.3442
20  1.17676 -0.289776 -0.886988 1.8892
> all.equal( estElaLlEpa[[ "pOutput" ]] + estElaLlEpa[[ "pVarInput" ]],
+    - estElaLlEpa[[ "pLabor" ]] )
[1] TRUE
> estElaLlEpaObs <- elas( estResultLlEpa, yObs = TRUE )
> print( estElaLlEpaObs )
    pOutput pVarInput    pLabor   land
1   0.78825 -0.693175 -0.095074 4.7806
2  -0.22140  0.134827  0.086575 0.6521
3   0.03683  0.166602 -0.203434 0.9240
4  -0.08161  0.124127 -0.042519 0.7869
5  -0.11981  0.115079  0.004729 0.7483
6  -0.09000  0.104563 -0.014559 0.7716
7  -0.02188  0.115664 -0.093784 0.8492
8   0.02497  0.131888 -0.156858 0.9196
9  -0.07992  0.098226 -0.018308 0.7975
10  0.09870  0.131359 -0.230060 0.9773
11  0.15647  0.111374 -0.267844 0.9933
12  0.44165  0.010705 -0.452355 1.1691
13  0.56996 -0.048680 -0.521275 1.2394
14  0.42582  0.007159 -0.432974 1.2042
15  0.42917  0.024028 -0.453196 1.2576
16  0.80370 -0.154609 -0.649087 1.4050
17  0.87018 -0.182055 -0.688122 1.4310
18  1.01170 -0.678557 -0.333141 1.0755
19  1.02881 -0.544746 -0.484060 1.3271
20  1.17283 -0.288806 -0.884021 1.8828
> all.equal( estElaLlEpaObs[[ "pOutput" ]] + estElaLlEpaObs[[ "pVarInput" ]],
+    - estElaLlEpaObs[[ "pLabor" ]] )
[1] TRUE
> 
> # local linear estimation with Epanechnikov kernel (gradients not restricted)
> npseed( 123 )
> estResultLlEpaAll <- npregHom( "qVarInput",
+    xNames = c( "pOutput", "pVarInput", "pLabor", "land" ),
+    data = germanFarms, homWeights = weights, restrictGrad = FALSE,
+    ckertype = "epanechnikov", regtype = "ll" )
Multistart 1 of 4 |Multistart 1 of 4 |Multistart 1 of 4 |Multistart 1 of 4 /Multistart 1 of 4 |Multistart 1 of 4 |Multistart 2 of 4 |Multistart 2 of 4 |Multistart 2 of 4 /Multistart 2 of 4 |Multistart 2 of 4 |Multistart 2 of 4 /Multistart 3 of 4 |Multistart 3 of 4 |Multistart 3 of 4 /Multistart 3 of 4 |Multistart 3 of 4 |Multistart 4 of 4 |Multistart 4 of 4 |Multistart 4 of 4 /Multistart 4 of 4 -Multistart 4 of 4 \Multistart 4 of 4 |Multistart 4 of 4 |Multistart 4 of 4 |                   > print( estResultLlEpaAll )
$call
npregHom(yName = "qVarInput", xNames = c("pOutput", "pVarInput", 
    "pLabor", "land"), homWeights = weights, data = germanFarms, 
    restrictGrad = FALSE, ckertype = "epanechnikov", regtype = "ll")

$yName
[1] "qVarInput"

$xNames
[1] "pOutput"   "pVarInput" "pLabor"    "land"     

$homWeights
  pOutput pVarInput    pLabor 
0.6723447 0.3269169 0.0007385 

$restrictGrad
[1] FALSE

$est

Regression Data: 20 training points, in 4 variable(s)
                 r_1      r_2   r_3   r_4
Bandwidth(s): 0.1518 0.005619 33.37 8.776

Kernel Regression Estimator: Local-Linear
Bandwidth Type: Fixed

Continuous Kernel Type: Second-Order Epanechnikov
No. Continuous Explanatory Vars.: 4


$grad
        pOutput  pVarInput    pLabor       land
 [1,] 155227.08 -1.793e+05 -17.82060     0.0000
 [2,]      0.00  0.000e+00   0.00000     0.0000
 [3,]      0.00  0.000e+00   0.00000     0.0000
 [4,] -96093.25  1.027e+05   4.83483     0.0000
 [5,]      0.00  0.000e+00   0.00000     0.0000
 [6,]    -95.71  4.975e+01   0.27190   -16.6686
 [7,]    101.15 -7.505e+02   3.73758 -2048.0000
 [8,]  -1223.72  9.662e+02   1.31343    -1.1778
 [9,]    237.51 -2.119e+02  -0.10411    23.4207
[10,]    -75.99  1.426e+01   0.32047     1.0434
[11,]   1180.19 -1.092e+03   0.06518     0.0000
[12,]     16.57 -1.865e+01   0.01571    19.3319
[13,]    150.35 -6.343e+01  -0.34341     2.3807
[14,]   -130.62  7.222e+01   0.23394    22.7944
[15,]   -298.31  1.888e+02   0.43955    -0.2987
[16,]     49.83 -3.963e+01  -0.01837    16.6577
[17,]    -28.46 -2.233e+00   0.11237    11.6365
[18,]    -85.61 -4.136e+01   0.45634  -256.0000
[19,]     92.67  4.479e+01  -0.45331  -256.0000
[20,]      0.00  0.000e+00   0.00000     0.0000

attr(,"class")
[1] "npregHom"
> all.equal( estResultLlEpaAll$grad[ , "pOutput" ] * germanFarms$pOutput +
+    estResultLlEpaAll$grad[ , "pVarInput" ] * germanFarms$pVarInput,
+    - estResultLlEpaAll$grad[ , "pLabor" ] * germanFarms$pLabor )
[1] TRUE
> estElaLlEpaAll <- elas( estResultLlEpaAll )
> print( estElaLlEpaAll )
     pOutput  pVarInput   pLabor     land
1  -6538.581  6473.9859  64.5955  0.00000
2      0.000     0.0000   0.0000  0.00000
3      0.000     0.0000   0.0000  0.00000
4   5163.947 -5120.5033 -43.4437  0.00000
5      0.000     0.0000   0.0000  0.00000
6    -33.995    17.6696  16.3251 -1.49374
7     -3.439    25.4007 -21.9614 16.71349
8    -49.053    39.5703   9.4825 -0.01141
9      8.722    -8.0679  -0.6541  0.20157
10    -7.261     1.4591   5.8018  0.02486
11  -789.925   798.4045  -8.4794  0.00000
12     2.507    -3.0414   0.5341  0.92608
13     9.671    -4.4154  -5.2558  0.05138
14   -15.551     9.2944   6.2570  0.90018
15   -33.504    22.5343  10.9693 -0.01044
16     5.505    -4.9683  -0.5363  0.62075
17    -5.303    -0.4768   5.7796  0.74300
18    -7.302    -4.4124  11.7143 -8.57157
19     7.504     4.6986 -12.2022 -8.98818
20     0.000     0.0000   0.0000  0.00000
> all.equal( estElaLlEpaAll[[ "pOutput" ]] + estElaLlEpaAll[[ "pVarInput" ]],
+    - estElaLlEpaAll[[ "pLabor" ]] )
[1] TRUE
> estElaLlEpaAllObs <- elas( estResultLlEpaAll, yObs = TRUE )
> print( estElaLlEpaAllObs )
      pOutput  pVarInput    pLabor      land
1   26861.184 -2.660e+04 -265.3652   0.00000
2       0.000  0.000e+00    0.0000   0.00000
3       0.000  0.000e+00    0.0000   0.00000
4  -13940.868  1.382e+04  117.2831   0.00000
5       0.000  0.000e+00    0.0000   0.00000
6     -14.568  7.572e+00    6.9958  -0.64011
7      16.214 -1.197e+02  103.5330 -78.79273
8    -202.892  1.637e+02   39.2215  -0.04721
9      39.873 -3.688e+01   -2.9903   0.92149
10    -12.254  2.463e+00    9.7913   0.04195
11    172.425 -1.743e+02    1.8509   0.00000
12      2.054 -2.492e+00    0.4376   0.75883
13     17.397 -7.943e+00   -9.4546   0.09243
14    -15.889  9.496e+00    6.3927   0.91971
15    -41.013  2.759e+01   13.4279  -0.01278
16      6.552 -5.913e+00   -0.6384   0.73883
17     -3.975 -3.574e-01    4.3328   0.55700
18    -10.895 -6.583e+00   17.4783 -12.78920
19     10.904  6.828e+00  -17.7322 -13.06159
20      0.000  0.000e+00    0.0000   0.00000
> all.equal( estElaLlEpaAllObs[[ "pOutput" ]] + estElaLlEpaAllObs[[ "pVarInput" ]],
+    - estElaLlEpaAllObs[[ "pLabor" ]] )
[1] TRUE
> 
> 
> # local-linear estimation with manual bandwidth selection (restricted gradients)
> estResultLlMan <- npregHom( "qVarInput",
+    xNames = c( "pOutput", "pVarInput", "pLabor", "land" ),
+    data = germanFarms, homWeights = weights, bws = rep( 1, 3 ),
+    bwscaling = TRUE, regtype = "ll" )
> print( estResultLlMan )
$call
npregHom(yName = "qVarInput", xNames = c("pOutput", "pVarInput", 
    "pLabor", "land"), homWeights = weights, data = germanFarms, 
    bws = rep(1, 3), bwscaling = TRUE, regtype = "ll")

$yName
[1] "qVarInput"

$xNames
[1] "pOutput"   "pVarInput" "pLabor"    "land"     

$homWeights
  pOutput pVarInput    pLabor 
0.6723447 0.3269169 0.0007385 

$restrictGrad
[1] TRUE

$est

Regression Data: 20 training points, in 3 variable(s)
                 r_2 r_3 r_4
Scale Factor(s):   1   1   1

Kernel Regression Estimator: Local-Linear
Bandwidth Type: Fixed

Continuous Kernel Type: Second-Order Gaussian
No. Continuous Explanatory Vars.: 3


$grad
        pOutput pVarInput     pLabor   land
 [1,] -0.930010    0.6905  0.0039309 35.875
 [2,] -1.758550    1.7546  0.0015675 27.445
 [3,] -1.014811    2.0636 -0.0043232 22.849
 [4,] -0.569253    1.1519 -0.0029848 23.470
 [5,]  0.003515    0.5613 -0.0032579 24.313
 [6,]  1.259702   -0.2115 -0.0062008 27.443
 [7,]  1.151370   -0.1213 -0.0059646 27.106
 [8,]  1.370415   -0.2963 -0.0059283 27.375
 [9,]  1.544402   -0.4307 -0.0064169 28.594
[10,]  1.096820   -0.6178 -0.0022980 24.188
[11,]  0.844312   -0.8355  0.0003518 21.364
[12,]  4.138106   -3.5627 -0.0013362 20.392
[13,]  9.363267   -8.9327  0.0012725 16.733
[14,]  8.408820   -7.8646  0.0004121 16.741
[15,]  5.412853   -4.9437 -0.0007132 18.727
[16,]  7.837912   -5.2355 -0.0071759 12.843
[17,]  3.774439    0.6595 -0.0164087 11.810
[18,]  7.644679   -2.6813 -0.0142566 28.644
[19,]  3.779845   -3.5057  0.0022924 14.569
[20,]  2.155914   -3.6920  0.0072438  9.492

attr(,"class")
[1] "npregHom"
> all.equal( estResultLlMan$grad[ , "pOutput" ] * germanFarms$pOutput +
+    estResultLlMan$grad[ , "pVarInput" ] * germanFarms$pVarInput,
+    - estResultLlMan$grad[ , "pLabor" ] * germanFarms$pLabor )
[1] TRUE
> estElaLlMan <- elas( estResultLlMan )
> print( estElaLlMan )
      pOutput pVarInput   pLabor   land
1  -0.1609061   0.10238  0.05852 1.5081
2  -0.2919450   0.25556  0.03638 1.0983
3  -0.1629424   0.29305 -0.13011 0.9205
4  -0.0848937   0.15932 -0.07443 0.9190
5   0.0005436   0.08259 -0.08314 0.9464
6   0.1943123  -0.03263 -0.16169 1.0680
7   0.1870152  -0.01960 -0.16741 1.0567
8   0.2227033  -0.04919 -0.17352 1.0755
9   0.2576786  -0.07450 -0.18317 1.1181
10  0.1743155  -0.10512 -0.06920 0.9583
11  0.1250970  -0.13523  0.01013 0.8500
12  0.5311325  -0.49262 -0.03852 0.8284
13  1.1448317  -1.18185  0.03702 0.6865
14  1.0517818  -1.06336  0.01158 0.6945
15  0.7078694  -0.68714 -0.02072 0.7618
16  1.0286309  -0.77977 -0.24887 0.5686
17  0.5138153   0.10289 -0.61670 0.5510
18  0.9652638  -0.42347 -0.54179 1.4199
19  0.4457536  -0.53562  0.08987 0.7450
20  0.2496932  -0.54400  0.29431 0.4854
> all.equal( estElaLlMan[[ "pOutput" ]] + estElaLlMan[[ "pVarInput" ]],
+    - estElaLlMan[[ "pLabor" ]] )
[1] TRUE
> estElaLlManObs <- elas( estResultLlMan, yObs = TRUE )
> print( estElaLlManObs )
      pOutput pVarInput   pLabor   land
1  -0.1609331   0.10240  0.05853 1.5084
2  -0.2910334   0.25477  0.03627 1.0948
3  -0.1642727   0.29545 -0.13117 0.9280
4  -0.0825852   0.15499 -0.07241 0.8940
5   0.0005371   0.08161 -0.08215 0.9352
6   0.1917386  -0.03219 -0.15954 1.0539
7   0.1845697  -0.01935 -0.16522 1.0428
8   0.2272144  -0.05018 -0.17703 1.0973
9   0.2592688  -0.07496 -0.18430 1.1250
10  0.1768722  -0.10666 -0.07021 0.9724
11  0.1233529  -0.13334  0.00999 0.8381
12  0.5131937  -0.47598 -0.03722 0.8005
13  1.0834420  -1.11848  0.03503 0.6497
14  1.0228673  -1.03413  0.01126 0.6754
15  0.7441844  -0.72240 -0.02179 0.8009
16  1.0304927  -0.78118 -0.24932 0.5696
17  0.5271504   0.10556 -0.63271 0.5653
18  0.9728346  -0.42679 -0.54604 1.4310
19  0.4447849  -0.53446  0.08967 0.7433
20  0.2497101  -0.54404  0.29433 0.4854
> all.equal( estElaLlManObs[[ "pOutput" ]] + estElaLlManObs[[ "pVarInput" ]],
+    - estElaLlManObs[[ "pLabor" ]] )
[1] TRUE
> 
> # local-linear estimation with manual bandwidth selection (gradients not restricted)
> estResultLlManAll <- npregHom( "qVarInput",
+    xNames = c( "pOutput", "pVarInput", "pLabor", "land" ),
+    data = germanFarms, homWeights = weights, restrictGrad = FALSE,
+    bws = rep( 1, 4 ), bwscaling = TRUE, regtype = "ll" )
> print( estResultLlManAll )
$call
npregHom(yName = "qVarInput", xNames = c("pOutput", "pVarInput", 
    "pLabor", "land"), homWeights = weights, data = germanFarms, 
    restrictGrad = FALSE, bws = rep(1, 4), bwscaling = TRUE, 
    regtype = "ll")

$yName
[1] "qVarInput"

$xNames
[1] "pOutput"   "pVarInput" "pLabor"    "land"     

$homWeights
  pOutput pVarInput    pLabor 
0.6723447 0.3269169 0.0007385 

$restrictGrad
[1] FALSE

$est

Regression Data: 20 training points, in 4 variable(s)
                 r_1 r_2 r_3 r_4
Scale Factor(s):   1   1   1   1

Kernel Regression Estimator: Local-Linear
Bandwidth Type: Fixed

Continuous Kernel Type: Second-Order Gaussian
No. Continuous Explanatory Vars.: 4


$grad
        pOutput pVarInput    pLabor   land
 [1,]   -10.262    12.596 -0.006195 30.600
 [2,]    33.826   -28.697 -0.061867 44.095
 [3,]  -212.681   195.373  0.212776 31.872
 [4,]   -80.822    53.029  0.189228 17.267
 [5,]    31.324   -31.911 -0.005812 18.231
 [6,]  -168.383   145.213  0.137066 26.153
 [7,]   132.151  -100.802 -0.184141 24.244
 [8,]   229.984  -169.304 -0.316562 22.318
 [9,]  -501.206   359.802  0.749192 27.440
[10,]   388.385  -286.151 -0.432872 22.474
[11,]  -131.867    75.469  0.254312 23.253
[12,]   -56.570    33.240  0.092450 18.620
[13,]   162.904  -111.201 -0.178935 14.605
[14,]  -672.268   444.207  0.855073 16.073
[15,]     6.359     4.267 -0.049027 16.944
[16,]  1057.205  -645.527 -1.228402 11.164
[17,]  -109.414    33.423  0.257568  9.897
[18,]   -89.268     3.153  0.283493 23.936
[19,]    32.710   -12.978 -0.047818  3.200
[20,] -1672.483   785.312  1.919603  4.758

attr(,"class")
[1] "npregHom"
> all.equal( estResultLlManAll$grad[ , "pOutput" ] * germanFarms$pOutput +
+    estResultLlManAll$grad[ , "pVarInput" ] * germanFarms$pVarInput,
+    - estResultLlManAll$grad[ , "pLabor" ] * germanFarms$pLabor )
[1] TRUE
> estElaLlManAll <- elas( estResultLlManAll )
> print( estElaLlManAll )
     pOutput pVarInput     pLabor    land
1    -1.5407    1.6208   -0.08004  1.1163
2     3.9210   -2.9184   -1.00260  1.2321
3   -45.5048   36.9717    8.53304  1.7109
4   -15.8849    9.6662    6.21867  0.8911
5     2.8325   -2.7458   -0.08673  0.4150
6   -39.3673   33.9503    5.41701  1.5427
7    30.8774  -23.4427   -7.43469  1.3595
8    37.2422  -28.0095   -9.23271  0.8737
9   -80.1761   59.6717   20.50436  1.0288
10  104.0806  -82.1019  -21.97866  1.5014
11  -37.0226   23.1455   13.87704  1.7530
12   -5.1999    3.2915    1.90840  0.5417
13    4.4306   -3.2727   -1.15792  0.1333
14  -32.2865   23.0611    9.22539  0.2560
15    0.9786    0.6978   -1.67641  0.8111
16 1386.8792 -961.0371 -425.84214  4.9405
17   -3.6133    1.2649    2.34837  0.1120
18  -65.8155    2.9075   62.90801  6.9279
19   -2.6219    1.3477    1.27412 -0.1112
20  311.2772 -185.9475 -125.32973 -0.3910
> all.equal( estElaLlManAll[[ "pOutput" ]] + estElaLlManAll[[ "pVarInput" ]],
+    - estElaLlManAll[[ "pLabor" ]] )
[1] TRUE
> estElaLlManAllObs <- elas( estResultLlManAll, yObs = TRUE )
> print( estElaLlManAllObs )
     pOutput pVarInput    pLabor   land
1    -1.7758    1.8680  -0.09225 1.2866
2     5.5981   -4.1667  -1.43143 1.7590
3   -34.4278   27.9719   6.45588 1.2944
4   -11.7253    7.1351   4.59029 0.6577
5     4.7861   -4.6395  -0.14655 0.7012
6   -25.6295   22.1029   3.52667 1.0043
7    21.1844  -16.0836  -5.10080 0.9327
8    38.1313  -28.6782  -9.45314 0.8946
9   -84.1406   62.6224  21.51826 1.0796
10   62.6307  -49.4050 -13.22570 0.9035
11  -19.2656   12.0444   7.22128 0.9122
12   -7.0156    4.4408   2.57480 0.7309
13   18.8499  -13.9236  -4.92631 0.5671
14  -81.7761   58.4098  23.36633 0.6485
15    0.8743    0.6235  -1.49775 0.7247
16  138.9964  -96.3175 -42.67893 0.4952
17  -15.2812    5.3495   9.93165 0.4738
18  -11.3599    0.5018  10.85806 1.1958
19    3.8490   -1.9786  -1.87048 0.1633
20 -193.7164  115.7203  77.99614 0.2433
> all.equal( estElaLlManAllObs[[ "pOutput" ]] + estElaLlManAllObs[[ "pVarInput" ]],
+    - estElaLlManAllObs[[ "pLabor" ]] )
[1] TRUE
> # different order of weights
> estResultLlManAll2 <- npregHom( "qVarInput",
+    xNames = c( "pOutput", "pVarInput", "pLabor", "land" ),
+    data = germanFarms, homWeights = weights[ c( 3, 2, 1 ) ], restrictGrad = FALSE,
+    bws = rep( 1, 4 ), bwscaling = TRUE, regtype = "ll" )
> all.equal( estResultLlManAll$grad, estResultLlManAll2$grad )
[1] TRUE
> all.equal( estResultLlManAll$est, estResultLlManAll2$est, check.attributes = FALSE )
[1] TRUE
> 
> proc.time()
   user  system elapsed 
  1.582   0.049   1.633 
